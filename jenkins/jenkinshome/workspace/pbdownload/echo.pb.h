// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace echo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class EchoRep;
class EchoRequest;
class EchoResponse;
class EchoNest;

enum EchoEnum {
  DELAY = 0,
  STOP = 1,
  CLEAR = 2
};
bool EchoEnum_IsValid(int value);
const EchoEnum EchoEnum_MIN = DELAY;
const EchoEnum EchoEnum_MAX = CLEAR;
const int EchoEnum_ARRAYSIZE = EchoEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* EchoEnum_descriptor();
inline const ::std::string& EchoEnum_Name(EchoEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EchoEnum_descriptor(), value);
}
inline bool EchoEnum_Parse(
    const ::std::string& name, EchoEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EchoEnum>(
    EchoEnum_descriptor(), name, value);
}
// ===================================================================

class EchoRep : public ::google::protobuf::Message {
 public:
  EchoRep();
  virtual ~EchoRep();
  
  EchoRep(const EchoRep& from);
  
  inline EchoRep& operator=(const EchoRep& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRep& default_instance();
  
  void Swap(EchoRep* other);
  
  // implements Message ----------------------------------------------
  
  EchoRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRep& from);
  void MergeFrom(const EchoRep& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 reint = 1;
  inline int reint_size() const;
  inline void clear_reint();
  static const int kReintFieldNumber = 1;
  inline ::google::protobuf::int64 reint(int index) const;
  inline void set_reint(int index, ::google::protobuf::int64 value);
  inline void add_reint(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      reint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_reint();
  
  // repeated string restring = 2;
  inline int restring_size() const;
  inline void clear_restring();
  static const int kRestringFieldNumber = 2;
  inline const ::std::string& restring(int index) const;
  inline ::std::string* mutable_restring(int index);
  inline void set_restring(int index, const ::std::string& value);
  inline void set_restring(int index, const char* value);
  inline void set_restring(int index, const char* value, size_t size);
  inline ::std::string* add_restring();
  inline void add_restring(const ::std::string& value);
  inline void add_restring(const char* value);
  inline void add_restring(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& restring() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_restring();
  
  // @@protoc_insertion_point(class_scope:echo.EchoRep)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > reint_;
  ::google::protobuf::RepeatedPtrField< ::std::string> restring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();
  
  void InitAsDefaultInstance();
  static EchoRep* default_instance_;
};
// -------------------------------------------------------------------

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();
  
  EchoRequest(const EchoRequest& from);
  
  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();
  
  void Swap(EchoRequest* other);
  
  // implements Message ----------------------------------------------
  
  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional .echo.EchoEnum e = 3;
  inline bool has_e() const;
  inline void clear_e();
  static const int kEFieldNumber = 3;
  inline echo::EchoEnum e() const;
  inline void set_e(echo::EchoEnum value);
  
  // repeated int64 reint = 4;
  inline int reint_size() const;
  inline void clear_reint();
  static const int kReintFieldNumber = 4;
  inline ::google::protobuf::int64 reint(int index) const;
  inline void set_reint(int index, ::google::protobuf::int64 value);
  inline void add_reint(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      reint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_reint();
  
  // repeated .echo.EchoRep rerep = 5;
  inline int rerep_size() const;
  inline void clear_rerep();
  static const int kRerepFieldNumber = 5;
  inline const ::echo::EchoRep& rerep(int index) const;
  inline ::echo::EchoRep* mutable_rerep(int index);
  inline ::echo::EchoRep* add_rerep();
  inline const ::google::protobuf::RepeatedPtrField< ::echo::EchoRep >&
      rerep() const;
  inline ::google::protobuf::RepeatedPtrField< ::echo::EchoRep >*
      mutable_rerep();
  
  // @@protoc_insertion_point(class_scope:echo.EchoRequest)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_e();
  inline void clear_has_e();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  ::google::protobuf::int32 index_;
  int e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > reint_;
  ::google::protobuf::RepeatedPtrField< ::echo::EchoRep > rerep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();
  
  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();
  
  EchoResponse(const EchoResponse& from);
  
  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();
  
  void Swap(EchoResponse* other);
  
  // implements Message ----------------------------------------------
  
  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional double pi = 2;
  inline bool has_pi() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 2;
  inline double pi() const;
  inline void set_pi(double value);
  
  // optional .echo.EchoRequest request = 3;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::echo::EchoRequest& request() const;
  inline ::echo::EchoRequest* mutable_request();
  inline ::echo::EchoRequest* release_request();
  
  // @@protoc_insertion_point(class_scope:echo.EchoResponse)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_pi();
  inline void clear_has_pi();
  inline void set_has_request();
  inline void clear_has_request();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  double pi_;
  ::echo::EchoRequest* request_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();
  
  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// -------------------------------------------------------------------

class EchoNest : public ::google::protobuf::Message {
 public:
  EchoNest();
  virtual ~EchoNest();
  
  EchoNest(const EchoNest& from);
  
  inline EchoNest& operator=(const EchoNest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoNest& default_instance();
  
  void Swap(EchoNest* other);
  
  // implements Message ----------------------------------------------
  
  EchoNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoNest& from);
  void MergeFrom(const EchoNest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .echo.EchoRequest request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::echo::EchoRequest& request() const;
  inline ::echo::EchoRequest* mutable_request();
  inline ::echo::EchoRequest* release_request();
  
  // optional int64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);
  
  // optional bool b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline bool b() const;
  inline void set_b(bool value);
  
  // @@protoc_insertion_point(class_scope:echo.EchoNest)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::echo::EchoRequest* request_;
  ::google::protobuf::int64 index_;
  bool b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();
  
  void InitAsDefaultInstance();
  static EchoNest* default_instance_;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();
  
  typedef EchoService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Http(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements EchoService ------------------------------------------
  
  void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void Http(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

// EchoRep

// repeated int64 reint = 1;
inline int EchoRep::reint_size() const {
  return reint_.size();
}
inline void EchoRep::clear_reint() {
  reint_.Clear();
}
inline ::google::protobuf::int64 EchoRep::reint(int index) const {
  return reint_.Get(index);
}
inline void EchoRep::set_reint(int index, ::google::protobuf::int64 value) {
  reint_.Set(index, value);
}
inline void EchoRep::add_reint(::google::protobuf::int64 value) {
  reint_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EchoRep::reint() const {
  return reint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EchoRep::mutable_reint() {
  return &reint_;
}

// repeated string restring = 2;
inline int EchoRep::restring_size() const {
  return restring_.size();
}
inline void EchoRep::clear_restring() {
  restring_.Clear();
}
inline const ::std::string& EchoRep::restring(int index) const {
  return restring_.Get(index);
}
inline ::std::string* EchoRep::mutable_restring(int index) {
  return restring_.Mutable(index);
}
inline void EchoRep::set_restring(int index, const ::std::string& value) {
  restring_.Mutable(index)->assign(value);
}
inline void EchoRep::set_restring(int index, const char* value) {
  restring_.Mutable(index)->assign(value);
}
inline void EchoRep::set_restring(int index, const char* value, size_t size) {
  restring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRep::add_restring() {
  return restring_.Add();
}
inline void EchoRep::add_restring(const ::std::string& value) {
  restring_.Add()->assign(value);
}
inline void EchoRep::add_restring(const char* value) {
  restring_.Add()->assign(value);
}
inline void EchoRep::add_restring(const char* value, size_t size) {
  restring_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EchoRep::restring() const {
  return restring_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EchoRep::mutable_restring() {
  return &restring_;
}

// -------------------------------------------------------------------

// EchoRequest

// required string message = 1;
inline bool EchoRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EchoRequest::message() const {
  return *message_;
}
inline void EchoRequest::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoRequest::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoRequest::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRequest::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* EchoRequest::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 2;
inline bool EchoRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 EchoRequest::index() const {
  return index_;
}
inline void EchoRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional .echo.EchoEnum e = 3;
inline bool EchoRequest::has_e() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EchoRequest::set_has_e() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EchoRequest::clear_has_e() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EchoRequest::clear_e() {
  e_ = 0;
  clear_has_e();
}
inline echo::EchoEnum EchoRequest::e() const {
  return static_cast< echo::EchoEnum >(e_);
}
inline void EchoRequest::set_e(echo::EchoEnum value) {
  GOOGLE_DCHECK(echo::EchoEnum_IsValid(value));
  set_has_e();
  e_ = value;
}

// repeated int64 reint = 4;
inline int EchoRequest::reint_size() const {
  return reint_.size();
}
inline void EchoRequest::clear_reint() {
  reint_.Clear();
}
inline ::google::protobuf::int64 EchoRequest::reint(int index) const {
  return reint_.Get(index);
}
inline void EchoRequest::set_reint(int index, ::google::protobuf::int64 value) {
  reint_.Set(index, value);
}
inline void EchoRequest::add_reint(::google::protobuf::int64 value) {
  reint_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
EchoRequest::reint() const {
  return reint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
EchoRequest::mutable_reint() {
  return &reint_;
}

// repeated .echo.EchoRep rerep = 5;
inline int EchoRequest::rerep_size() const {
  return rerep_.size();
}
inline void EchoRequest::clear_rerep() {
  rerep_.Clear();
}
inline const ::echo::EchoRep& EchoRequest::rerep(int index) const {
  return rerep_.Get(index);
}
inline ::echo::EchoRep* EchoRequest::mutable_rerep(int index) {
  return rerep_.Mutable(index);
}
inline ::echo::EchoRep* EchoRequest::add_rerep() {
  return rerep_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::echo::EchoRep >&
EchoRequest::rerep() const {
  return rerep_;
}
inline ::google::protobuf::RepeatedPtrField< ::echo::EchoRep >*
EchoRequest::mutable_rerep() {
  return &rerep_;
}

// -------------------------------------------------------------------

// EchoResponse

// required string message = 1;
inline bool EchoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EchoResponse::message() const {
  return *message_;
}
inline void EchoResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EchoResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* EchoResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double pi = 2;
inline bool EchoResponse::has_pi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoResponse::set_has_pi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoResponse::clear_has_pi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoResponse::clear_pi() {
  pi_ = 0;
  clear_has_pi();
}
inline double EchoResponse::pi() const {
  return pi_;
}
inline void EchoResponse::set_pi(double value) {
  set_has_pi();
  pi_ = value;
}

// optional .echo.EchoRequest request = 3;
inline bool EchoResponse::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EchoResponse::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EchoResponse::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EchoResponse::clear_request() {
  if (request_ != NULL) request_->::echo::EchoRequest::Clear();
  clear_has_request();
}
inline const ::echo::EchoRequest& EchoResponse::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::echo::EchoRequest* EchoResponse::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::echo::EchoRequest;
  return request_;
}
inline ::echo::EchoRequest* EchoResponse::release_request() {
  clear_has_request();
  ::echo::EchoRequest* temp = request_;
  request_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EchoNest

// optional .echo.EchoRequest request = 1;
inline bool EchoNest::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoNest::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoNest::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoNest::clear_request() {
  if (request_ != NULL) request_->::echo::EchoRequest::Clear();
  clear_has_request();
}
inline const ::echo::EchoRequest& EchoNest::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::echo::EchoRequest* EchoNest::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::echo::EchoRequest;
  return request_;
}
inline ::echo::EchoRequest* EchoNest::release_request() {
  clear_has_request();
  ::echo::EchoRequest* temp = request_;
  request_ = NULL;
  return temp;
}

// optional int64 index = 2;
inline bool EchoNest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoNest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoNest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoNest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 EchoNest::index() const {
  return index_;
}
inline void EchoNest::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// optional bool b = 3;
inline bool EchoNest::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EchoNest::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EchoNest::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EchoNest::clear_b() {
  b_ = false;
  clear_has_b();
}
inline bool EchoNest::b() const {
  return b_;
}
inline void EchoNest::set_b(bool value) {
  set_has_b();
  b_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< echo::EchoEnum>() {
  return echo::EchoEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
