// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rp.proto

#ifndef PROTOBUF_rp_2eproto__INCLUDED
#define PROTOBUF_rp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "pbrpc.pb.h"
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rp_2eproto();
void protobuf_AssignDesc_rp_2eproto();
void protobuf_ShutdownFile_rp_2eproto();

class RPCommonRequest;
class RPResultPOIItem;
class RPResultItem;
class RPCommonResponse;

// ===================================================================

class RPCommonRequest : public ::google::protobuf::Message {
 public:
  RPCommonRequest();
  virtual ~RPCommonRequest();
  
  RPCommonRequest(const RPCommonRequest& from);
  
  inline RPCommonRequest& operator=(const RPCommonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCommonRequest& default_instance();
  
  void Swap(RPCommonRequest* other);
  
  // implements Message ----------------------------------------------
  
  RPCommonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCommonRequest& from);
  void MergeFrom(const RPCommonRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .lbs.da.openservice.RequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::lbs::da::openservice::RequestHeader& header() const;
  inline ::lbs::da::openservice::RequestHeader* mutable_header();
  inline ::lbs::da::openservice::RequestHeader* release_header();
  
  // optional string provider = 2;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 2;
  inline const ::std::string& provider() const;
  inline void set_provider(const ::std::string& value);
  inline void set_provider(const char* value);
  inline void set_provider(const char* value, size_t size);
  inline ::std::string* mutable_provider();
  inline ::std::string* release_provider();
  
  // optional string logId = 3;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIdFieldNumber = 3;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  
  // optional string userID = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // optional string cuid = 5;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 5;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const char* value, size_t size);
  inline ::std::string* mutable_cuid();
  inline ::std::string* release_cuid();
  
  // optional string coor_sys = 6;
  inline bool has_coor_sys() const;
  inline void clear_coor_sys();
  static const int kCoorSysFieldNumber = 6;
  inline const ::std::string& coor_sys() const;
  inline void set_coor_sys(const ::std::string& value);
  inline void set_coor_sys(const char* value);
  inline void set_coor_sys(const char* value, size_t size);
  inline ::std::string* mutable_coor_sys();
  inline ::std::string* release_coor_sys();
  
  // optional double x = 7;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 7;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 8;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 8;
  inline double y() const;
  inline void set_y(double value);
  
  // optional int64 areaId = 9;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 9;
  inline ::google::protobuf::int64 areaid() const;
  inline void set_areaid(::google::protobuf::int64 value);
  
  // optional int64 dealId = 10;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealIdFieldNumber = 10;
  inline ::google::protobuf::int64 dealid() const;
  inline void set_dealid(::google::protobuf::int64 value);
  
  // optional int32 size = 11;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 11;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // optional string deviceType = 12;
  inline bool has_devicetype() const;
  inline void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 12;
  inline const ::std::string& devicetype() const;
  inline void set_devicetype(const ::std::string& value);
  inline void set_devicetype(const char* value);
  inline void set_devicetype(const char* value, size_t size);
  inline ::std::string* mutable_devicetype();
  inline ::std::string* release_devicetype();
  
  // optional int32 situationId = 13;
  inline bool has_situationid() const;
  inline void clear_situationid();
  static const int kSituationIdFieldNumber = 13;
  inline ::google::protobuf::int32 situationid() const;
  inline void set_situationid(::google::protobuf::int32 value);
  
  // optional int32 need_poi = 14;
  inline bool has_need_poi() const;
  inline void clear_need_poi();
  static const int kNeedPoiFieldNumber = 14;
  inline ::google::protobuf::int32 need_poi() const;
  inline void set_need_poi(::google::protobuf::int32 value);
  
  // optional int32 poi_num = 15;
  inline bool has_poi_num() const;
  inline void clear_poi_num();
  static const int kPoiNumFieldNumber = 15;
  inline ::google::protobuf::int32 poi_num() const;
  inline void set_poi_num(::google::protobuf::int32 value);
  
  // optional string baidu_id = 16;
  inline bool has_baidu_id() const;
  inline void clear_baidu_id();
  static const int kBaiduIdFieldNumber = 16;
  inline const ::std::string& baidu_id() const;
  inline void set_baidu_id(const ::std::string& value);
  inline void set_baidu_id(const char* value);
  inline void set_baidu_id(const char* value, size_t size);
  inline ::std::string* mutable_baidu_id();
  inline ::std::string* release_baidu_id();
  
  // optional int64 targetAreaId = 17;
  inline bool has_targetareaid() const;
  inline void clear_targetareaid();
  static const int kTargetAreaIdFieldNumber = 17;
  inline ::google::protobuf::int64 targetareaid() const;
  inline void set_targetareaid(::google::protobuf::int64 value);
  
  // optional string keywords = 18;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 18;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  inline ::std::string* release_keywords();
  
  // optional string str_catg = 19;
  inline bool has_str_catg() const;
  inline void clear_str_catg();
  static const int kStrCatgFieldNumber = 19;
  inline const ::std::string& str_catg() const;
  inline void set_str_catg(const ::std::string& value);
  inline void set_str_catg(const char* value);
  inline void set_str_catg(const char* value, size_t size);
  inline ::std::string* mutable_str_catg();
  inline ::std::string* release_str_catg();
  
  // optional string str_subcatg = 20;
  inline bool has_str_subcatg() const;
  inline void clear_str_subcatg();
  static const int kStrSubcatgFieldNumber = 20;
  inline const ::std::string& str_subcatg() const;
  inline void set_str_subcatg(const ::std::string& value);
  inline void set_str_subcatg(const char* value);
  inline void set_str_subcatg(const char* value, size_t size);
  inline ::std::string* mutable_str_subcatg();
  inline ::std::string* release_str_subcatg();
  
  // optional string str_thdcatg = 21;
  inline bool has_str_thdcatg() const;
  inline void clear_str_thdcatg();
  static const int kStrThdcatgFieldNumber = 21;
  inline const ::std::string& str_thdcatg() const;
  inline void set_str_thdcatg(const ::std::string& value);
  inline void set_str_thdcatg(const char* value);
  inline void set_str_thdcatg(const char* value, size_t size);
  inline ::std::string* mutable_str_thdcatg();
  inline ::std::string* release_str_thdcatg();
  
  // optional string str_shop_dist = 22;
  inline bool has_str_shop_dist() const;
  inline void clear_str_shop_dist();
  static const int kStrShopDistFieldNumber = 22;
  inline const ::std::string& str_shop_dist() const;
  inline void set_str_shop_dist(const ::std::string& value);
  inline void set_str_shop_dist(const char* value);
  inline void set_str_shop_dist(const char* value, size_t size);
  inline ::std::string* mutable_str_shop_dist();
  inline ::std::string* release_str_shop_dist();
  
  // optional string str_shop_range = 23;
  inline bool has_str_shop_range() const;
  inline void clear_str_shop_range();
  static const int kStrShopRangeFieldNumber = 23;
  inline const ::std::string& str_shop_range() const;
  inline void set_str_shop_range(const ::std::string& value);
  inline void set_str_shop_range(const char* value);
  inline void set_str_shop_range(const char* value, size_t size);
  inline ::std::string* mutable_str_shop_range();
  inline ::std::string* release_str_shop_range();
  
  // optional string qrw_str_poi_id = 24;
  inline bool has_qrw_str_poi_id() const;
  inline void clear_qrw_str_poi_id();
  static const int kQrwStrPoiIdFieldNumber = 24;
  inline const ::std::string& qrw_str_poi_id() const;
  inline void set_qrw_str_poi_id(const ::std::string& value);
  inline void set_qrw_str_poi_id(const char* value);
  inline void set_qrw_str_poi_id(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_poi_id();
  inline ::std::string* release_qrw_str_poi_id();
  
  // optional string qrw_str_brand_id = 25;
  inline bool has_qrw_str_brand_id() const;
  inline void clear_qrw_str_brand_id();
  static const int kQrwStrBrandIdFieldNumber = 25;
  inline const ::std::string& qrw_str_brand_id() const;
  inline void set_qrw_str_brand_id(const ::std::string& value);
  inline void set_qrw_str_brand_id(const char* value);
  inline void set_qrw_str_brand_id(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_brand_id();
  inline ::std::string* release_qrw_str_brand_id();
  
  // optional string qrw_str_thdcatg = 26;
  inline bool has_qrw_str_thdcatg() const;
  inline void clear_qrw_str_thdcatg();
  static const int kQrwStrThdcatgFieldNumber = 26;
  inline const ::std::string& qrw_str_thdcatg() const;
  inline void set_qrw_str_thdcatg(const ::std::string& value);
  inline void set_qrw_str_thdcatg(const char* value);
  inline void set_qrw_str_thdcatg(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_thdcatg();
  inline ::std::string* release_qrw_str_thdcatg();
  
  // optional string qrw_str_subcatg = 27;
  inline bool has_qrw_str_subcatg() const;
  inline void clear_qrw_str_subcatg();
  static const int kQrwStrSubcatgFieldNumber = 27;
  inline const ::std::string& qrw_str_subcatg() const;
  inline void set_qrw_str_subcatg(const ::std::string& value);
  inline void set_qrw_str_subcatg(const char* value);
  inline void set_qrw_str_subcatg(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_subcatg();
  inline ::std::string* release_qrw_str_subcatg();
  
  // optional string qrw_str_catg = 28;
  inline bool has_qrw_str_catg() const;
  inline void clear_qrw_str_catg();
  static const int kQrwStrCatgFieldNumber = 28;
  inline const ::std::string& qrw_str_catg() const;
  inline void set_qrw_str_catg(const ::std::string& value);
  inline void set_qrw_str_catg(const char* value);
  inline void set_qrw_str_catg(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_catg();
  inline ::std::string* release_qrw_str_catg();
  
  // optional string qrw_str_city = 29;
  inline bool has_qrw_str_city() const;
  inline void clear_qrw_str_city();
  static const int kQrwStrCityFieldNumber = 29;
  inline const ::std::string& qrw_str_city() const;
  inline void set_qrw_str_city(const ::std::string& value);
  inline void set_qrw_str_city(const char* value);
  inline void set_qrw_str_city(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_city();
  inline ::std::string* release_qrw_str_city();
  
  // optional string qrw_str_dist = 30;
  inline bool has_qrw_str_dist() const;
  inline void clear_qrw_str_dist();
  static const int kQrwStrDistFieldNumber = 30;
  inline const ::std::string& qrw_str_dist() const;
  inline void set_qrw_str_dist(const ::std::string& value);
  inline void set_qrw_str_dist(const char* value);
  inline void set_qrw_str_dist(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_dist();
  inline ::std::string* release_qrw_str_dist();
  
  // optional string qrw_str_range = 31;
  inline bool has_qrw_str_range() const;
  inline void clear_qrw_str_range();
  static const int kQrwStrRangeFieldNumber = 31;
  inline const ::std::string& qrw_str_range() const;
  inline void set_qrw_str_range(const ::std::string& value);
  inline void set_qrw_str_range(const char* value);
  inline void set_qrw_str_range(const char* value, size_t size);
  inline ::std::string* mutable_qrw_str_range();
  inline ::std::string* release_qrw_str_range();
  
  // optional int32 client = 32;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 32;
  inline ::google::protobuf::int32 client() const;
  inline void set_client(::google::protobuf::int32 value);
  
  // optional int32 channelType = 33;
  inline bool has_channeltype() const;
  inline void clear_channeltype();
  static const int kChannelTypeFieldNumber = 33;
  inline ::google::protobuf::int32 channeltype() const;
  inline void set_channeltype(::google::protobuf::int32 value);
  
  // optional int32 startDay = 34;
  inline bool has_startday() const;
  inline void clear_startday();
  static const int kStartDayFieldNumber = 34;
  inline ::google::protobuf::int32 startday() const;
  inline void set_startday(::google::protobuf::int32 value);
  
  // optional int32 daySize = 35;
  inline bool has_daysize() const;
  inline void clear_daysize();
  static const int kDaySizeFieldNumber = 35;
  inline ::google::protobuf::int32 daysize() const;
  inline void set_daysize(::google::protobuf::int32 value);
  
  // optional int32 dealSize = 36;
  inline bool has_dealsize() const;
  inline void clear_dealsize();
  static const int kDealSizeFieldNumber = 36;
  inline ::google::protobuf::int32 dealsize() const;
  inline void set_dealsize(::google::protobuf::int32 value);
  
  // optional string str_site_list = 37;
  inline bool has_str_site_list() const;
  inline void clear_str_site_list();
  static const int kStrSiteListFieldNumber = 37;
  inline const ::std::string& str_site_list() const;
  inline void set_str_site_list(const ::std::string& value);
  inline void set_str_site_list(const char* value);
  inline void set_str_site_list(const char* value, size_t size);
  inline ::std::string* mutable_str_site_list();
  inline ::std::string* release_str_site_list();
  
  // optional int32 eventId = 38;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 38;
  inline ::google::protobuf::int32 eventid() const;
  inline void set_eventid(::google::protobuf::int32 value);
  
  // optional int64 recDay = 39;
  inline bool has_recday() const;
  inline void clear_recday();
  static const int kRecDayFieldNumber = 39;
  inline ::google::protobuf::int64 recday() const;
  inline void set_recday(::google::protobuf::int64 value);
  
  // optional int64 dealPos = 40;
  inline bool has_dealpos() const;
  inline void clear_dealpos();
  static const int kDealPosFieldNumber = 40;
  inline ::google::protobuf::int64 dealpos() const;
  inline void set_dealpos(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.RPCommonRequest)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_cuid();
  inline void clear_has_cuid();
  inline void set_has_coor_sys();
  inline void clear_has_coor_sys();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_devicetype();
  inline void clear_has_devicetype();
  inline void set_has_situationid();
  inline void clear_has_situationid();
  inline void set_has_need_poi();
  inline void clear_has_need_poi();
  inline void set_has_poi_num();
  inline void clear_has_poi_num();
  inline void set_has_baidu_id();
  inline void clear_has_baidu_id();
  inline void set_has_targetareaid();
  inline void clear_has_targetareaid();
  inline void set_has_keywords();
  inline void clear_has_keywords();
  inline void set_has_str_catg();
  inline void clear_has_str_catg();
  inline void set_has_str_subcatg();
  inline void clear_has_str_subcatg();
  inline void set_has_str_thdcatg();
  inline void clear_has_str_thdcatg();
  inline void set_has_str_shop_dist();
  inline void clear_has_str_shop_dist();
  inline void set_has_str_shop_range();
  inline void clear_has_str_shop_range();
  inline void set_has_qrw_str_poi_id();
  inline void clear_has_qrw_str_poi_id();
  inline void set_has_qrw_str_brand_id();
  inline void clear_has_qrw_str_brand_id();
  inline void set_has_qrw_str_thdcatg();
  inline void clear_has_qrw_str_thdcatg();
  inline void set_has_qrw_str_subcatg();
  inline void clear_has_qrw_str_subcatg();
  inline void set_has_qrw_str_catg();
  inline void clear_has_qrw_str_catg();
  inline void set_has_qrw_str_city();
  inline void clear_has_qrw_str_city();
  inline void set_has_qrw_str_dist();
  inline void clear_has_qrw_str_dist();
  inline void set_has_qrw_str_range();
  inline void clear_has_qrw_str_range();
  inline void set_has_client();
  inline void clear_has_client();
  inline void set_has_channeltype();
  inline void clear_has_channeltype();
  inline void set_has_startday();
  inline void clear_has_startday();
  inline void set_has_daysize();
  inline void clear_has_daysize();
  inline void set_has_dealsize();
  inline void clear_has_dealsize();
  inline void set_has_str_site_list();
  inline void clear_has_str_site_list();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_recday();
  inline void clear_has_recday();
  inline void set_has_dealpos();
  inline void clear_has_dealpos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::lbs::da::openservice::RequestHeader* header_;
  ::std::string* provider_;
  ::std::string* logid_;
  ::std::string* userid_;
  ::std::string* cuid_;
  ::std::string* coor_sys_;
  double x_;
  double y_;
  ::google::protobuf::int64 areaid_;
  ::google::protobuf::int64 dealid_;
  ::std::string* devicetype_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 situationid_;
  ::google::protobuf::int32 need_poi_;
  ::google::protobuf::int32 poi_num_;
  ::std::string* baidu_id_;
  ::google::protobuf::int64 targetareaid_;
  ::std::string* keywords_;
  ::std::string* str_catg_;
  ::std::string* str_subcatg_;
  ::std::string* str_thdcatg_;
  ::std::string* str_shop_dist_;
  ::std::string* str_shop_range_;
  ::std::string* qrw_str_poi_id_;
  ::std::string* qrw_str_brand_id_;
  ::std::string* qrw_str_thdcatg_;
  ::std::string* qrw_str_subcatg_;
  ::std::string* qrw_str_catg_;
  ::std::string* qrw_str_city_;
  ::std::string* qrw_str_dist_;
  ::std::string* qrw_str_range_;
  ::google::protobuf::int32 client_;
  ::google::protobuf::int32 channeltype_;
  ::google::protobuf::int32 startday_;
  ::google::protobuf::int32 daysize_;
  ::std::string* str_site_list_;
  ::google::protobuf::int32 dealsize_;
  ::google::protobuf::int32 eventid_;
  ::google::protobuf::int64 recday_;
  ::google::protobuf::int64 dealpos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(40 + 31) / 32];
  
  friend void  protobuf_AddDesc_rp_2eproto();
  friend void protobuf_AssignDesc_rp_2eproto();
  friend void protobuf_ShutdownFile_rp_2eproto();
  
  void InitAsDefaultInstance();
  static RPCommonRequest* default_instance_;
};
// -------------------------------------------------------------------

class RPResultPOIItem : public ::google::protobuf::Message {
 public:
  RPResultPOIItem();
  virtual ~RPResultPOIItem();
  
  RPResultPOIItem(const RPResultPOIItem& from);
  
  inline RPResultPOIItem& operator=(const RPResultPOIItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPResultPOIItem& default_instance();
  
  void Swap(RPResultPOIItem* other);
  
  // implements Message ----------------------------------------------
  
  RPResultPOIItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPResultPOIItem& from);
  void MergeFrom(const RPResultPOIItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 poiid = 1;
  inline bool has_poiid() const;
  inline void clear_poiid();
  static const int kPoiidFieldNumber = 1;
  inline ::google::protobuf::int32 poiid() const;
  inline void set_poiid(::google::protobuf::int32 value);
  
  // optional double x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline double distance() const;
  inline void set_distance(double value);
  
  // optional string poiname = 5;
  inline bool has_poiname() const;
  inline void clear_poiname();
  static const int kPoinameFieldNumber = 5;
  inline const ::std::string& poiname() const;
  inline void set_poiname(const ::std::string& value);
  inline void set_poiname(const char* value);
  inline void set_poiname(const char* value, size_t size);
  inline ::std::string* mutable_poiname();
  inline ::std::string* release_poiname();
  
  // optional string address = 6;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 6;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // optional string tel = 7;
  inline bool has_tel() const;
  inline void clear_tel();
  static const int kTelFieldNumber = 7;
  inline const ::std::string& tel() const;
  inline void set_tel(const ::std::string& value);
  inline void set_tel(const char* value);
  inline void set_tel(const char* value, size_t size);
  inline ::std::string* mutable_tel();
  inline ::std::string* release_tel();
  
  // optional string rangeid = 8;
  inline bool has_rangeid() const;
  inline void clear_rangeid();
  static const int kRangeidFieldNumber = 8;
  inline const ::std::string& rangeid() const;
  inline void set_rangeid(const ::std::string& value);
  inline void set_rangeid(const char* value);
  inline void set_rangeid(const char* value, size_t size);
  inline ::std::string* mutable_rangeid();
  inline ::std::string* release_rangeid();
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.RPResultPOIItem)
 private:
  inline void set_has_poiid();
  inline void clear_has_poiid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_poiname();
  inline void clear_has_poiname();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_tel();
  inline void clear_has_tel();
  inline void set_has_rangeid();
  inline void clear_has_rangeid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double distance_;
  ::std::string* poiname_;
  ::std::string* address_;
  ::std::string* tel_;
  ::std::string* rangeid_;
  ::google::protobuf::int32 poiid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_rp_2eproto();
  friend void protobuf_AssignDesc_rp_2eproto();
  friend void protobuf_ShutdownFile_rp_2eproto();
  
  void InitAsDefaultInstance();
  static RPResultPOIItem* default_instance_;
};
// -------------------------------------------------------------------

class RPResultItem : public ::google::protobuf::Message {
 public:
  RPResultItem();
  virtual ~RPResultItem();
  
  RPResultItem(const RPResultItem& from);
  
  inline RPResultItem& operator=(const RPResultItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPResultItem& default_instance();
  
  void Swap(RPResultItem* other);
  
  // implements Message ----------------------------------------------
  
  RPResultItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPResultItem& from);
  void MergeFrom(const RPResultItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 dealId = 1;
  inline bool has_dealid() const;
  inline void clear_dealid();
  static const int kDealIdFieldNumber = 1;
  inline ::google::protobuf::int64 dealid() const;
  inline void set_dealid(::google::protobuf::int64 value);
  
  // optional double weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline double weight() const;
  inline void set_weight(double value);
  
  // optional int32 rec_strategy = 3;
  inline bool has_rec_strategy() const;
  inline void clear_rec_strategy();
  static const int kRecStrategyFieldNumber = 3;
  inline ::google::protobuf::int32 rec_strategy() const;
  inline void set_rec_strategy(::google::protobuf::int32 value);
  
  // optional string reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // optional int32 ifvirtual = 5;
  inline bool has_ifvirtual() const;
  inline void clear_ifvirtual();
  static const int kIfvirtualFieldNumber = 5;
  inline ::google::protobuf::int32 ifvirtual() const;
  inline void set_ifvirtual(::google::protobuf::int32 value);
  
  // optional string image = 6;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 6;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  
  // optional string tiny_image = 7;
  inline bool has_tiny_image() const;
  inline void clear_tiny_image();
  static const int kTinyImageFieldNumber = 7;
  inline const ::std::string& tiny_image() const;
  inline void set_tiny_image(const ::std::string& value);
  inline void set_tiny_image(const char* value);
  inline void set_tiny_image(const char* value, size_t size);
  inline ::std::string* mutable_tiny_image();
  inline ::std::string* release_tiny_image();
  
  // optional string mid_image = 8;
  inline bool has_mid_image() const;
  inline void clear_mid_image();
  static const int kMidImageFieldNumber = 8;
  inline const ::std::string& mid_image() const;
  inline void set_mid_image(const ::std::string& value);
  inline void set_mid_image(const char* value);
  inline void set_mid_image(const char* value, size_t size);
  inline ::std::string* mutable_mid_image();
  inline ::std::string* release_mid_image();
  
  // optional string business_title = 9;
  inline bool has_business_title() const;
  inline void clear_business_title();
  static const int kBusinessTitleFieldNumber = 9;
  inline const ::std::string& business_title() const;
  inline void set_business_title(const ::std::string& value);
  inline void set_business_title(const char* value);
  inline void set_business_title(const char* value, size_t size);
  inline ::std::string* mutable_business_title();
  inline ::std::string* release_business_title();
  
  // optional string medium_title = 10;
  inline bool has_medium_title() const;
  inline void clear_medium_title();
  static const int kMediumTitleFieldNumber = 10;
  inline const ::std::string& medium_title() const;
  inline void set_medium_title(const ::std::string& value);
  inline void set_medium_title(const char* value);
  inline void set_medium_title(const char* value, size_t size);
  inline ::std::string* mutable_medium_title();
  inline ::std::string* release_medium_title();
  
  // optional string min_title = 11;
  inline bool has_min_title() const;
  inline void clear_min_title();
  static const int kMinTitleFieldNumber = 11;
  inline const ::std::string& min_title() const;
  inline void set_min_title(const ::std::string& value);
  inline void set_min_title(const char* value);
  inline void set_min_title(const char* value, size_t size);
  inline ::std::string* mutable_min_title();
  inline ::std::string* release_min_title();
  
  // optional string title_high_price = 12;
  inline bool has_title_high_price() const;
  inline void clear_title_high_price();
  static const int kTitleHighPriceFieldNumber = 12;
  inline const ::std::string& title_high_price() const;
  inline void set_title_high_price(const ::std::string& value);
  inline void set_title_high_price(const char* value);
  inline void set_title_high_price(const char* value, size_t size);
  inline ::std::string* mutable_title_high_price();
  inline ::std::string* release_title_high_price();
  
  // optional int32 price_ori = 13;
  inline bool has_price_ori() const;
  inline void clear_price_ori();
  static const int kPriceOriFieldNumber = 13;
  inline ::google::protobuf::int32 price_ori() const;
  inline void set_price_ori(::google::protobuf::int32 value);
  
  // optional int32 price_current = 14;
  inline bool has_price_current() const;
  inline void clear_price_current();
  static const int kPriceCurrentFieldNumber = 14;
  inline ::google::protobuf::int32 price_current() const;
  inline void set_price_current(::google::protobuf::int32 value);
  
  // optional string tags = 15;
  inline bool has_tags() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 15;
  inline const ::std::string& tags() const;
  inline void set_tags(const ::std::string& value);
  inline void set_tags(const char* value);
  inline void set_tags(const char* value, size_t size);
  inline ::std::string* mutable_tags();
  inline ::std::string* release_tags();
  
  // optional int32 is_new = 16;
  inline bool has_is_new() const;
  inline void clear_is_new();
  static const int kIsNewFieldNumber = 16;
  inline ::google::protobuf::int32 is_new() const;
  inline void set_is_new(::google::protobuf::int32 value);
  
  // optional int32 is_flush = 17;
  inline bool has_is_flush() const;
  inline void clear_is_flush();
  static const int kIsFlushFieldNumber = 17;
  inline ::google::protobuf::int32 is_flush() const;
  inline void set_is_flush(::google::protobuf::int32 value);
  
  // optional int32 is_reservation = 18;
  inline bool has_is_reservation() const;
  inline void clear_is_reservation();
  static const int kIsReservationFieldNumber = 18;
  inline ::google::protobuf::int32 is_reservation() const;
  inline void set_is_reservation(::google::protobuf::int32 value);
  
  // optional int32 sale_count = 19;
  inline bool has_sale_count() const;
  inline void clear_sale_count();
  static const int kSaleCountFieldNumber = 19;
  inline ::google::protobuf::int32 sale_count() const;
  inline void set_sale_count(::google::protobuf::int32 value);
  
  // optional int32 type = 20;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 20;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 pay_start_time = 21;
  inline bool has_pay_start_time() const;
  inline void clear_pay_start_time();
  static const int kPayStartTimeFieldNumber = 21;
  inline ::google::protobuf::int32 pay_start_time() const;
  inline void set_pay_start_time(::google::protobuf::int32 value);
  
  // optional int32 pay_end_time = 22;
  inline bool has_pay_end_time() const;
  inline void clear_pay_end_time();
  static const int kPayEndTimeFieldNumber = 22;
  inline ::google::protobuf::int32 pay_end_time() const;
  inline void set_pay_end_time(::google::protobuf::int32 value);
  
  // optional int32 deal_start_time = 23;
  inline bool has_deal_start_time() const;
  inline void clear_deal_start_time();
  static const int kDealStartTimeFieldNumber = 23;
  inline ::google::protobuf::int32 deal_start_time() const;
  inline void set_deal_start_time(::google::protobuf::int32 value);
  
  // optional int32 deal_expire_time = 24;
  inline bool has_deal_expire_time() const;
  inline void clear_deal_expire_time();
  static const int kDealExpireTimeFieldNumber = 24;
  inline ::google::protobuf::int32 deal_expire_time() const;
  inline void set_deal_expire_time(::google::protobuf::int32 value);
  
  // optional int32 city_num = 25;
  inline bool has_city_num() const;
  inline void clear_city_num();
  static const int kCityNumFieldNumber = 25;
  inline ::google::protobuf::int32 city_num() const;
  inline void set_city_num(::google::protobuf::int32 value);
  
  // repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
  inline int poi_size() const;
  inline void clear_poi();
  static const int kPoiFieldNumber = 26;
  inline const ::lbs::da::openservice::RPResultPOIItem& poi(int index) const;
  inline ::lbs::da::openservice::RPResultPOIItem* mutable_poi(int index);
  inline ::lbs::da::openservice::RPResultPOIItem* add_poi();
  inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultPOIItem >&
      poi() const;
  inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultPOIItem >*
      mutable_poi();
  
  // optional int32 poi_num = 27;
  inline bool has_poi_num() const;
  inline void clear_poi_num();
  static const int kPoiNumFieldNumber = 27;
  inline ::google::protobuf::int32 poi_num() const;
  inline void set_poi_num(::google::protobuf::int32 value);
  
  // optional string range = 28;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 28;
  inline const ::std::string& range() const;
  inline void set_range(const ::std::string& value);
  inline void set_range(const char* value);
  inline void set_range(const char* value, size_t size);
  inline ::std::string* mutable_range();
  inline ::std::string* release_range();
  
  // optional int32 score = 29;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 29;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 comment_num = 30;
  inline bool has_comment_num() const;
  inline void clear_comment_num();
  static const int kCommentNumFieldNumber = 30;
  inline ::google::protobuf::int32 comment_num() const;
  inline void set_comment_num(::google::protobuf::int32 value);
  
  // optional string tinyurl = 31;
  inline bool has_tinyurl() const;
  inline void clear_tinyurl();
  static const int kTinyurlFieldNumber = 31;
  inline const ::std::string& tinyurl() const;
  inline void set_tinyurl(const ::std::string& value);
  inline void set_tinyurl(const char* value);
  inline void set_tinyurl(const char* value, size_t size);
  inline ::std::string* mutable_tinyurl();
  inline ::std::string* release_tinyurl();
  
  // optional string group_title = 32;
  inline bool has_group_title() const;
  inline void clear_group_title();
  static const int kGroupTitleFieldNumber = 32;
  inline const ::std::string& group_title() const;
  inline void set_group_title(const ::std::string& value);
  inline void set_group_title(const char* value);
  inline void set_group_title(const char* value, size_t size);
  inline ::std::string* mutable_group_title();
  inline ::std::string* release_group_title();
  
  // optional int32 group_type = 33;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 33;
  inline ::google::protobuf::int32 group_type() const;
  inline void set_group_type(::google::protobuf::int32 value);
  
  // repeated .lbs.da.openservice.RPResultItem group_list = 34;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 34;
  inline const ::lbs::da::openservice::RPResultItem& group_list(int index) const;
  inline ::lbs::da::openservice::RPResultItem* mutable_group_list(int index);
  inline ::lbs::da::openservice::RPResultItem* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
      mutable_group_list();
  
  // optional int32 day = 35;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 35;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);
  
  // optional string bn_rp_svr_exp_ids = 36;
  inline bool has_bn_rp_svr_exp_ids() const;
  inline void clear_bn_rp_svr_exp_ids();
  static const int kBnRpSvrExpIdsFieldNumber = 36;
  inline const ::std::string& bn_rp_svr_exp_ids() const;
  inline void set_bn_rp_svr_exp_ids(const ::std::string& value);
  inline void set_bn_rp_svr_exp_ids(const char* value);
  inline void set_bn_rp_svr_exp_ids(const char* value, size_t size);
  inline ::std::string* mutable_bn_rp_svr_exp_ids();
  inline ::std::string* release_bn_rp_svr_exp_ids();
  
  // optional int32 pushNum = 37;
  inline bool has_pushnum() const;
  inline void clear_pushnum();
  static const int kPushNumFieldNumber = 37;
  inline ::google::protobuf::int32 pushnum() const;
  inline void set_pushnum(::google::protobuf::int32 value);
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
  inline int bn_rp_svr_result_size() const;
  inline void clear_bn_rp_svr_result();
  static const int kBnRpSvrResultFieldNumber = 38;
  inline const ::lbs::da::openservice::RPResultItem& bn_rp_svr_result(int index) const;
  inline ::lbs::da::openservice::RPResultItem* mutable_bn_rp_svr_result(int index);
  inline ::lbs::da::openservice::RPResultItem* add_bn_rp_svr_result();
  inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
      bn_rp_svr_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
      mutable_bn_rp_svr_result();
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.RPResultItem)
 private:
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_rec_strategy();
  inline void clear_has_rec_strategy();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_ifvirtual();
  inline void clear_has_ifvirtual();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_tiny_image();
  inline void clear_has_tiny_image();
  inline void set_has_mid_image();
  inline void clear_has_mid_image();
  inline void set_has_business_title();
  inline void clear_has_business_title();
  inline void set_has_medium_title();
  inline void clear_has_medium_title();
  inline void set_has_min_title();
  inline void clear_has_min_title();
  inline void set_has_title_high_price();
  inline void clear_has_title_high_price();
  inline void set_has_price_ori();
  inline void clear_has_price_ori();
  inline void set_has_price_current();
  inline void clear_has_price_current();
  inline void set_has_tags();
  inline void clear_has_tags();
  inline void set_has_is_new();
  inline void clear_has_is_new();
  inline void set_has_is_flush();
  inline void clear_has_is_flush();
  inline void set_has_is_reservation();
  inline void clear_has_is_reservation();
  inline void set_has_sale_count();
  inline void clear_has_sale_count();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pay_start_time();
  inline void clear_has_pay_start_time();
  inline void set_has_pay_end_time();
  inline void clear_has_pay_end_time();
  inline void set_has_deal_start_time();
  inline void clear_has_deal_start_time();
  inline void set_has_deal_expire_time();
  inline void clear_has_deal_expire_time();
  inline void set_has_city_num();
  inline void clear_has_city_num();
  inline void set_has_poi_num();
  inline void clear_has_poi_num();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_comment_num();
  inline void clear_has_comment_num();
  inline void set_has_tinyurl();
  inline void clear_has_tinyurl();
  inline void set_has_group_title();
  inline void clear_has_group_title();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_bn_rp_svr_exp_ids();
  inline void clear_has_bn_rp_svr_exp_ids();
  inline void set_has_pushnum();
  inline void clear_has_pushnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 dealid_;
  double weight_;
  ::std::string* reason_;
  ::google::protobuf::int32 rec_strategy_;
  ::google::protobuf::int32 ifvirtual_;
  ::std::string* image_;
  ::std::string* tiny_image_;
  ::std::string* mid_image_;
  ::std::string* business_title_;
  ::std::string* medium_title_;
  ::std::string* min_title_;
  ::std::string* title_high_price_;
  ::google::protobuf::int32 price_ori_;
  ::google::protobuf::int32 price_current_;
  ::std::string* tags_;
  ::google::protobuf::int32 is_new_;
  ::google::protobuf::int32 is_flush_;
  ::google::protobuf::int32 is_reservation_;
  ::google::protobuf::int32 sale_count_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pay_start_time_;
  ::google::protobuf::int32 pay_end_time_;
  ::google::protobuf::int32 deal_start_time_;
  ::google::protobuf::int32 deal_expire_time_;
  ::google::protobuf::int32 city_num_;
  ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultPOIItem > poi_;
  ::google::protobuf::int32 poi_num_;
  ::google::protobuf::int32 score_;
  ::std::string* range_;
  ::std::string* tinyurl_;
  ::google::protobuf::int32 comment_num_;
  ::google::protobuf::int32 group_type_;
  ::std::string* group_title_;
  ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem > group_list_;
  ::std::string* bn_rp_svr_exp_ids_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 pushnum_;
  ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem > bn_rp_svr_result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];
  
  friend void  protobuf_AddDesc_rp_2eproto();
  friend void protobuf_AssignDesc_rp_2eproto();
  friend void protobuf_ShutdownFile_rp_2eproto();
  
  void InitAsDefaultInstance();
  static RPResultItem* default_instance_;
};
// -------------------------------------------------------------------

class RPCommonResponse : public ::google::protobuf::Message {
 public:
  RPCommonResponse();
  virtual ~RPCommonResponse();
  
  RPCommonResponse(const RPCommonResponse& from);
  
  inline RPCommonResponse& operator=(const RPCommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCommonResponse& default_instance();
  
  void Swap(RPCommonResponse* other);
  
  // implements Message ----------------------------------------------
  
  RPCommonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCommonResponse& from);
  void MergeFrom(const RPCommonResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bn_rp_svr_errinf = 1;
  inline bool has_bn_rp_svr_errinf() const;
  inline void clear_bn_rp_svr_errinf();
  static const int kBnRpSvrErrinfFieldNumber = 1;
  inline const ::std::string& bn_rp_svr_errinf() const;
  inline void set_bn_rp_svr_errinf(const ::std::string& value);
  inline void set_bn_rp_svr_errinf(const char* value);
  inline void set_bn_rp_svr_errinf(const char* value, size_t size);
  inline ::std::string* mutable_bn_rp_svr_errinf();
  inline ::std::string* release_bn_rp_svr_errinf();
  
  // optional int32 bn_rp_svr_errno = 2;
  inline bool has_bn_rp_svr_errno() const;
  inline void clear_bn_rp_svr_errno();
  static const int kBnRpSvrErrnoFieldNumber = 2;
  inline ::google::protobuf::int32 bn_rp_svr_errno() const;
  inline void set_bn_rp_svr_errno(::google::protobuf::int32 value);
  
  // optional string bn_rp_svr_exp_ids = 3;
  inline bool has_bn_rp_svr_exp_ids() const;
  inline void clear_bn_rp_svr_exp_ids();
  static const int kBnRpSvrExpIdsFieldNumber = 3;
  inline const ::std::string& bn_rp_svr_exp_ids() const;
  inline void set_bn_rp_svr_exp_ids(const ::std::string& value);
  inline void set_bn_rp_svr_exp_ids(const char* value);
  inline void set_bn_rp_svr_exp_ids(const char* value, size_t size);
  inline ::std::string* mutable_bn_rp_svr_exp_ids();
  inline ::std::string* release_bn_rp_svr_exp_ids();
  
  // optional string logId = 4;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIdFieldNumber = 4;
  inline const ::std::string& logid() const;
  inline void set_logid(const ::std::string& value);
  inline void set_logid(const char* value);
  inline void set_logid(const char* value, size_t size);
  inline ::std::string* mutable_logid();
  inline ::std::string* release_logid();
  
  // optional int32 bn_rp_svr_rec_num = 5;
  inline bool has_bn_rp_svr_rec_num() const;
  inline void clear_bn_rp_svr_rec_num();
  static const int kBnRpSvrRecNumFieldNumber = 5;
  inline ::google::protobuf::int32 bn_rp_svr_rec_num() const;
  inline void set_bn_rp_svr_rec_num(::google::protobuf::int32 value);
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
  inline int bn_rp_svr_result_size() const;
  inline void clear_bn_rp_svr_result();
  static const int kBnRpSvrResultFieldNumber = 6;
  inline const ::lbs::da::openservice::RPResultItem& bn_rp_svr_result(int index) const;
  inline ::lbs::da::openservice::RPResultItem* mutable_bn_rp_svr_result(int index);
  inline ::lbs::da::openservice::RPResultItem* add_bn_rp_svr_result();
  inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
      bn_rp_svr_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
      mutable_bn_rp_svr_result();
  
  // optional int32 bn_rp_svr_nresult_flag = 7;
  inline bool has_bn_rp_svr_nresult_flag() const;
  inline void clear_bn_rp_svr_nresult_flag();
  static const int kBnRpSvrNresultFlagFieldNumber = 7;
  inline ::google::protobuf::int32 bn_rp_svr_nresult_flag() const;
  inline void set_bn_rp_svr_nresult_flag(::google::protobuf::int32 value);
  
  // optional string bn_rp_svr_title = 8;
  inline bool has_bn_rp_svr_title() const;
  inline void clear_bn_rp_svr_title();
  static const int kBnRpSvrTitleFieldNumber = 8;
  inline const ::std::string& bn_rp_svr_title() const;
  inline void set_bn_rp_svr_title(const ::std::string& value);
  inline void set_bn_rp_svr_title(const char* value);
  inline void set_bn_rp_svr_title(const char* value, size_t size);
  inline ::std::string* mutable_bn_rp_svr_title();
  inline ::std::string* release_bn_rp_svr_title();
  
  // optional string bn_rp_svr_subtitle = 9;
  inline bool has_bn_rp_svr_subtitle() const;
  inline void clear_bn_rp_svr_subtitle();
  static const int kBnRpSvrSubtitleFieldNumber = 9;
  inline const ::std::string& bn_rp_svr_subtitle() const;
  inline void set_bn_rp_svr_subtitle(const ::std::string& value);
  inline void set_bn_rp_svr_subtitle(const char* value);
  inline void set_bn_rp_svr_subtitle(const char* value, size_t size);
  inline ::std::string* mutable_bn_rp_svr_subtitle();
  inline ::std::string* release_bn_rp_svr_subtitle();
  
  // optional string gift_cart_id = 10;
  inline bool has_gift_cart_id() const;
  inline void clear_gift_cart_id();
  static const int kGiftCartIdFieldNumber = 10;
  inline const ::std::string& gift_cart_id() const;
  inline void set_gift_cart_id(const ::std::string& value);
  inline void set_gift_cart_id(const char* value);
  inline void set_gift_cart_id(const char* value, size_t size);
  inline ::std::string* mutable_gift_cart_id();
  inline ::std::string* release_gift_cart_id();
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.RPCommonResponse)
 private:
  inline void set_has_bn_rp_svr_errinf();
  inline void clear_has_bn_rp_svr_errinf();
  inline void set_has_bn_rp_svr_errno();
  inline void clear_has_bn_rp_svr_errno();
  inline void set_has_bn_rp_svr_exp_ids();
  inline void clear_has_bn_rp_svr_exp_ids();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_bn_rp_svr_rec_num();
  inline void clear_has_bn_rp_svr_rec_num();
  inline void set_has_bn_rp_svr_nresult_flag();
  inline void clear_has_bn_rp_svr_nresult_flag();
  inline void set_has_bn_rp_svr_title();
  inline void clear_has_bn_rp_svr_title();
  inline void set_has_bn_rp_svr_subtitle();
  inline void clear_has_bn_rp_svr_subtitle();
  inline void set_has_gift_cart_id();
  inline void clear_has_gift_cart_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bn_rp_svr_errinf_;
  ::std::string* bn_rp_svr_exp_ids_;
  ::google::protobuf::int32 bn_rp_svr_errno_;
  ::google::protobuf::int32 bn_rp_svr_rec_num_;
  ::std::string* logid_;
  ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem > bn_rp_svr_result_;
  ::std::string* bn_rp_svr_title_;
  ::std::string* bn_rp_svr_subtitle_;
  ::std::string* gift_cart_id_;
  ::google::protobuf::int32 bn_rp_svr_nresult_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rp_2eproto();
  friend void protobuf_AssignDesc_rp_2eproto();
  friend void protobuf_ShutdownFile_rp_2eproto();
  
  void InitAsDefaultInstance();
  static RPCommonResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RPCommonRequest

// required .lbs.da.openservice.RequestHeader header = 1;
inline bool RPCommonRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCommonRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCommonRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCommonRequest::clear_header() {
  if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
  clear_has_header();
}
inline const ::lbs::da::openservice::RequestHeader& RPCommonRequest::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lbs::da::openservice::RequestHeader* RPCommonRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lbs::da::openservice::RequestHeader;
  return header_;
}
inline ::lbs::da::openservice::RequestHeader* RPCommonRequest::release_header() {
  clear_has_header();
  ::lbs::da::openservice::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}

// optional string provider = 2;
inline bool RPCommonRequest::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCommonRequest::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCommonRequest::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCommonRequest::clear_provider() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    provider_->clear();
  }
  clear_has_provider();
}
inline const ::std::string& RPCommonRequest::provider() const {
  return *provider_;
}
inline void RPCommonRequest::set_provider(const ::std::string& value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
}
inline void RPCommonRequest::set_provider(const char* value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
}
inline void RPCommonRequest::set_provider(const char* value, size_t size) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_provider() {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  return provider_;
}
inline ::std::string* RPCommonRequest::release_provider() {
  clear_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = provider_;
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string logId = 3;
inline bool RPCommonRequest::has_logid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCommonRequest::set_has_logid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCommonRequest::clear_has_logid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCommonRequest::clear_logid() {
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& RPCommonRequest::logid() const {
  return *logid_;
}
inline void RPCommonRequest::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void RPCommonRequest::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void RPCommonRequest::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  return logid_;
}
inline ::std::string* RPCommonRequest::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userID = 4;
inline bool RPCommonRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCommonRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCommonRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCommonRequest::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& RPCommonRequest::userid() const {
  return *userid_;
}
inline void RPCommonRequest::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RPCommonRequest::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RPCommonRequest::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* RPCommonRequest::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cuid = 5;
inline bool RPCommonRequest::has_cuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCommonRequest::set_has_cuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCommonRequest::clear_has_cuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPCommonRequest::clear_cuid() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    cuid_->clear();
  }
  clear_has_cuid();
}
inline const ::std::string& RPCommonRequest::cuid() const {
  return *cuid_;
}
inline void RPCommonRequest::set_cuid(const ::std::string& value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void RPCommonRequest::set_cuid(const char* value) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void RPCommonRequest::set_cuid(const char* value, size_t size) {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_cuid() {
  set_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    cuid_ = new ::std::string;
  }
  return cuid_;
}
inline ::std::string* RPCommonRequest::release_cuid() {
  clear_has_cuid();
  if (cuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cuid_;
    cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string coor_sys = 6;
inline bool RPCommonRequest::has_coor_sys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPCommonRequest::set_has_coor_sys() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPCommonRequest::clear_has_coor_sys() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RPCommonRequest::clear_coor_sys() {
  if (coor_sys_ != &::google::protobuf::internal::kEmptyString) {
    coor_sys_->clear();
  }
  clear_has_coor_sys();
}
inline const ::std::string& RPCommonRequest::coor_sys() const {
  return *coor_sys_;
}
inline void RPCommonRequest::set_coor_sys(const ::std::string& value) {
  set_has_coor_sys();
  if (coor_sys_ == &::google::protobuf::internal::kEmptyString) {
    coor_sys_ = new ::std::string;
  }
  coor_sys_->assign(value);
}
inline void RPCommonRequest::set_coor_sys(const char* value) {
  set_has_coor_sys();
  if (coor_sys_ == &::google::protobuf::internal::kEmptyString) {
    coor_sys_ = new ::std::string;
  }
  coor_sys_->assign(value);
}
inline void RPCommonRequest::set_coor_sys(const char* value, size_t size) {
  set_has_coor_sys();
  if (coor_sys_ == &::google::protobuf::internal::kEmptyString) {
    coor_sys_ = new ::std::string;
  }
  coor_sys_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_coor_sys() {
  set_has_coor_sys();
  if (coor_sys_ == &::google::protobuf::internal::kEmptyString) {
    coor_sys_ = new ::std::string;
  }
  return coor_sys_;
}
inline ::std::string* RPCommonRequest::release_coor_sys() {
  clear_has_coor_sys();
  if (coor_sys_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = coor_sys_;
    coor_sys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double x = 7;
inline bool RPCommonRequest::has_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPCommonRequest::set_has_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPCommonRequest::clear_has_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPCommonRequest::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RPCommonRequest::x() const {
  return x_;
}
inline void RPCommonRequest::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 8;
inline bool RPCommonRequest::has_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPCommonRequest::set_has_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPCommonRequest::clear_has_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RPCommonRequest::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RPCommonRequest::y() const {
  return y_;
}
inline void RPCommonRequest::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional int64 areaId = 9;
inline bool RPCommonRequest::has_areaid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RPCommonRequest::set_has_areaid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RPCommonRequest::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RPCommonRequest::clear_areaid() {
  areaid_ = GOOGLE_LONGLONG(0);
  clear_has_areaid();
}
inline ::google::protobuf::int64 RPCommonRequest::areaid() const {
  return areaid_;
}
inline void RPCommonRequest::set_areaid(::google::protobuf::int64 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional int64 dealId = 10;
inline bool RPCommonRequest::has_dealid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RPCommonRequest::set_has_dealid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RPCommonRequest::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RPCommonRequest::clear_dealid() {
  dealid_ = GOOGLE_LONGLONG(0);
  clear_has_dealid();
}
inline ::google::protobuf::int64 RPCommonRequest::dealid() const {
  return dealid_;
}
inline void RPCommonRequest::set_dealid(::google::protobuf::int64 value) {
  set_has_dealid();
  dealid_ = value;
}

// optional int32 size = 11;
inline bool RPCommonRequest::has_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RPCommonRequest::set_has_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RPCommonRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RPCommonRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 RPCommonRequest::size() const {
  return size_;
}
inline void RPCommonRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional string deviceType = 12;
inline bool RPCommonRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RPCommonRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RPCommonRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RPCommonRequest::clear_devicetype() {
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    devicetype_->clear();
  }
  clear_has_devicetype();
}
inline const ::std::string& RPCommonRequest::devicetype() const {
  return *devicetype_;
}
inline void RPCommonRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
}
inline void RPCommonRequest::set_devicetype(const char* value) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(value);
}
inline void RPCommonRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  devicetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_devicetype() {
  set_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    devicetype_ = new ::std::string;
  }
  return devicetype_;
}
inline ::std::string* RPCommonRequest::release_devicetype() {
  clear_has_devicetype();
  if (devicetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicetype_;
    devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 situationId = 13;
inline bool RPCommonRequest::has_situationid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RPCommonRequest::set_has_situationid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RPCommonRequest::clear_has_situationid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RPCommonRequest::clear_situationid() {
  situationid_ = 0;
  clear_has_situationid();
}
inline ::google::protobuf::int32 RPCommonRequest::situationid() const {
  return situationid_;
}
inline void RPCommonRequest::set_situationid(::google::protobuf::int32 value) {
  set_has_situationid();
  situationid_ = value;
}

// optional int32 need_poi = 14;
inline bool RPCommonRequest::has_need_poi() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RPCommonRequest::set_has_need_poi() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RPCommonRequest::clear_has_need_poi() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RPCommonRequest::clear_need_poi() {
  need_poi_ = 0;
  clear_has_need_poi();
}
inline ::google::protobuf::int32 RPCommonRequest::need_poi() const {
  return need_poi_;
}
inline void RPCommonRequest::set_need_poi(::google::protobuf::int32 value) {
  set_has_need_poi();
  need_poi_ = value;
}

// optional int32 poi_num = 15;
inline bool RPCommonRequest::has_poi_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RPCommonRequest::set_has_poi_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RPCommonRequest::clear_has_poi_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RPCommonRequest::clear_poi_num() {
  poi_num_ = 0;
  clear_has_poi_num();
}
inline ::google::protobuf::int32 RPCommonRequest::poi_num() const {
  return poi_num_;
}
inline void RPCommonRequest::set_poi_num(::google::protobuf::int32 value) {
  set_has_poi_num();
  poi_num_ = value;
}

// optional string baidu_id = 16;
inline bool RPCommonRequest::has_baidu_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RPCommonRequest::set_has_baidu_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RPCommonRequest::clear_has_baidu_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RPCommonRequest::clear_baidu_id() {
  if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
    baidu_id_->clear();
  }
  clear_has_baidu_id();
}
inline const ::std::string& RPCommonRequest::baidu_id() const {
  return *baidu_id_;
}
inline void RPCommonRequest::set_baidu_id(const ::std::string& value) {
  set_has_baidu_id();
  if (baidu_id_ == &::google::protobuf::internal::kEmptyString) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(value);
}
inline void RPCommonRequest::set_baidu_id(const char* value) {
  set_has_baidu_id();
  if (baidu_id_ == &::google::protobuf::internal::kEmptyString) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(value);
}
inline void RPCommonRequest::set_baidu_id(const char* value, size_t size) {
  set_has_baidu_id();
  if (baidu_id_ == &::google::protobuf::internal::kEmptyString) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_baidu_id() {
  set_has_baidu_id();
  if (baidu_id_ == &::google::protobuf::internal::kEmptyString) {
    baidu_id_ = new ::std::string;
  }
  return baidu_id_;
}
inline ::std::string* RPCommonRequest::release_baidu_id() {
  clear_has_baidu_id();
  if (baidu_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = baidu_id_;
    baidu_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 targetAreaId = 17;
inline bool RPCommonRequest::has_targetareaid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RPCommonRequest::set_has_targetareaid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RPCommonRequest::clear_has_targetareaid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RPCommonRequest::clear_targetareaid() {
  targetareaid_ = GOOGLE_LONGLONG(0);
  clear_has_targetareaid();
}
inline ::google::protobuf::int64 RPCommonRequest::targetareaid() const {
  return targetareaid_;
}
inline void RPCommonRequest::set_targetareaid(::google::protobuf::int64 value) {
  set_has_targetareaid();
  targetareaid_ = value;
}

// optional string keywords = 18;
inline bool RPCommonRequest::has_keywords() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RPCommonRequest::set_has_keywords() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RPCommonRequest::clear_has_keywords() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RPCommonRequest::clear_keywords() {
  if (keywords_ != &::google::protobuf::internal::kEmptyString) {
    keywords_->clear();
  }
  clear_has_keywords();
}
inline const ::std::string& RPCommonRequest::keywords() const {
  return *keywords_;
}
inline void RPCommonRequest::set_keywords(const ::std::string& value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void RPCommonRequest::set_keywords(const char* value) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void RPCommonRequest::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_keywords() {
  set_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    keywords_ = new ::std::string;
  }
  return keywords_;
}
inline ::std::string* RPCommonRequest::release_keywords() {
  clear_has_keywords();
  if (keywords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keywords_;
    keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_catg = 19;
inline bool RPCommonRequest::has_str_catg() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RPCommonRequest::set_has_str_catg() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RPCommonRequest::clear_has_str_catg() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RPCommonRequest::clear_str_catg() {
  if (str_catg_ != &::google::protobuf::internal::kEmptyString) {
    str_catg_->clear();
  }
  clear_has_str_catg();
}
inline const ::std::string& RPCommonRequest::str_catg() const {
  return *str_catg_;
}
inline void RPCommonRequest::set_str_catg(const ::std::string& value) {
  set_has_str_catg();
  if (str_catg_ == &::google::protobuf::internal::kEmptyString) {
    str_catg_ = new ::std::string;
  }
  str_catg_->assign(value);
}
inline void RPCommonRequest::set_str_catg(const char* value) {
  set_has_str_catg();
  if (str_catg_ == &::google::protobuf::internal::kEmptyString) {
    str_catg_ = new ::std::string;
  }
  str_catg_->assign(value);
}
inline void RPCommonRequest::set_str_catg(const char* value, size_t size) {
  set_has_str_catg();
  if (str_catg_ == &::google::protobuf::internal::kEmptyString) {
    str_catg_ = new ::std::string;
  }
  str_catg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_catg() {
  set_has_str_catg();
  if (str_catg_ == &::google::protobuf::internal::kEmptyString) {
    str_catg_ = new ::std::string;
  }
  return str_catg_;
}
inline ::std::string* RPCommonRequest::release_str_catg() {
  clear_has_str_catg();
  if (str_catg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_catg_;
    str_catg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_subcatg = 20;
inline bool RPCommonRequest::has_str_subcatg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RPCommonRequest::set_has_str_subcatg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RPCommonRequest::clear_has_str_subcatg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RPCommonRequest::clear_str_subcatg() {
  if (str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
    str_subcatg_->clear();
  }
  clear_has_str_subcatg();
}
inline const ::std::string& RPCommonRequest::str_subcatg() const {
  return *str_subcatg_;
}
inline void RPCommonRequest::set_str_subcatg(const ::std::string& value) {
  set_has_str_subcatg();
  if (str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_subcatg_ = new ::std::string;
  }
  str_subcatg_->assign(value);
}
inline void RPCommonRequest::set_str_subcatg(const char* value) {
  set_has_str_subcatg();
  if (str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_subcatg_ = new ::std::string;
  }
  str_subcatg_->assign(value);
}
inline void RPCommonRequest::set_str_subcatg(const char* value, size_t size) {
  set_has_str_subcatg();
  if (str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_subcatg_ = new ::std::string;
  }
  str_subcatg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_subcatg() {
  set_has_str_subcatg();
  if (str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_subcatg_ = new ::std::string;
  }
  return str_subcatg_;
}
inline ::std::string* RPCommonRequest::release_str_subcatg() {
  clear_has_str_subcatg();
  if (str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_subcatg_;
    str_subcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_thdcatg = 21;
inline bool RPCommonRequest::has_str_thdcatg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RPCommonRequest::set_has_str_thdcatg() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RPCommonRequest::clear_has_str_thdcatg() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RPCommonRequest::clear_str_thdcatg() {
  if (str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
    str_thdcatg_->clear();
  }
  clear_has_str_thdcatg();
}
inline const ::std::string& RPCommonRequest::str_thdcatg() const {
  return *str_thdcatg_;
}
inline void RPCommonRequest::set_str_thdcatg(const ::std::string& value) {
  set_has_str_thdcatg();
  if (str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_thdcatg_ = new ::std::string;
  }
  str_thdcatg_->assign(value);
}
inline void RPCommonRequest::set_str_thdcatg(const char* value) {
  set_has_str_thdcatg();
  if (str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_thdcatg_ = new ::std::string;
  }
  str_thdcatg_->assign(value);
}
inline void RPCommonRequest::set_str_thdcatg(const char* value, size_t size) {
  set_has_str_thdcatg();
  if (str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_thdcatg_ = new ::std::string;
  }
  str_thdcatg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_thdcatg() {
  set_has_str_thdcatg();
  if (str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    str_thdcatg_ = new ::std::string;
  }
  return str_thdcatg_;
}
inline ::std::string* RPCommonRequest::release_str_thdcatg() {
  clear_has_str_thdcatg();
  if (str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_thdcatg_;
    str_thdcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_shop_dist = 22;
inline bool RPCommonRequest::has_str_shop_dist() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RPCommonRequest::set_has_str_shop_dist() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RPCommonRequest::clear_has_str_shop_dist() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RPCommonRequest::clear_str_shop_dist() {
  if (str_shop_dist_ != &::google::protobuf::internal::kEmptyString) {
    str_shop_dist_->clear();
  }
  clear_has_str_shop_dist();
}
inline const ::std::string& RPCommonRequest::str_shop_dist() const {
  return *str_shop_dist_;
}
inline void RPCommonRequest::set_str_shop_dist(const ::std::string& value) {
  set_has_str_shop_dist();
  if (str_shop_dist_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_dist_ = new ::std::string;
  }
  str_shop_dist_->assign(value);
}
inline void RPCommonRequest::set_str_shop_dist(const char* value) {
  set_has_str_shop_dist();
  if (str_shop_dist_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_dist_ = new ::std::string;
  }
  str_shop_dist_->assign(value);
}
inline void RPCommonRequest::set_str_shop_dist(const char* value, size_t size) {
  set_has_str_shop_dist();
  if (str_shop_dist_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_dist_ = new ::std::string;
  }
  str_shop_dist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_shop_dist() {
  set_has_str_shop_dist();
  if (str_shop_dist_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_dist_ = new ::std::string;
  }
  return str_shop_dist_;
}
inline ::std::string* RPCommonRequest::release_str_shop_dist() {
  clear_has_str_shop_dist();
  if (str_shop_dist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_shop_dist_;
    str_shop_dist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str_shop_range = 23;
inline bool RPCommonRequest::has_str_shop_range() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RPCommonRequest::set_has_str_shop_range() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RPCommonRequest::clear_has_str_shop_range() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RPCommonRequest::clear_str_shop_range() {
  if (str_shop_range_ != &::google::protobuf::internal::kEmptyString) {
    str_shop_range_->clear();
  }
  clear_has_str_shop_range();
}
inline const ::std::string& RPCommonRequest::str_shop_range() const {
  return *str_shop_range_;
}
inline void RPCommonRequest::set_str_shop_range(const ::std::string& value) {
  set_has_str_shop_range();
  if (str_shop_range_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_range_ = new ::std::string;
  }
  str_shop_range_->assign(value);
}
inline void RPCommonRequest::set_str_shop_range(const char* value) {
  set_has_str_shop_range();
  if (str_shop_range_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_range_ = new ::std::string;
  }
  str_shop_range_->assign(value);
}
inline void RPCommonRequest::set_str_shop_range(const char* value, size_t size) {
  set_has_str_shop_range();
  if (str_shop_range_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_range_ = new ::std::string;
  }
  str_shop_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_shop_range() {
  set_has_str_shop_range();
  if (str_shop_range_ == &::google::protobuf::internal::kEmptyString) {
    str_shop_range_ = new ::std::string;
  }
  return str_shop_range_;
}
inline ::std::string* RPCommonRequest::release_str_shop_range() {
  clear_has_str_shop_range();
  if (str_shop_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_shop_range_;
    str_shop_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_poi_id = 24;
inline bool RPCommonRequest::has_qrw_str_poi_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_poi_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RPCommonRequest::clear_has_qrw_str_poi_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RPCommonRequest::clear_qrw_str_poi_id() {
  if (qrw_str_poi_id_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_poi_id_->clear();
  }
  clear_has_qrw_str_poi_id();
}
inline const ::std::string& RPCommonRequest::qrw_str_poi_id() const {
  return *qrw_str_poi_id_;
}
inline void RPCommonRequest::set_qrw_str_poi_id(const ::std::string& value) {
  set_has_qrw_str_poi_id();
  if (qrw_str_poi_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_poi_id_ = new ::std::string;
  }
  qrw_str_poi_id_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_poi_id(const char* value) {
  set_has_qrw_str_poi_id();
  if (qrw_str_poi_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_poi_id_ = new ::std::string;
  }
  qrw_str_poi_id_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_poi_id(const char* value, size_t size) {
  set_has_qrw_str_poi_id();
  if (qrw_str_poi_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_poi_id_ = new ::std::string;
  }
  qrw_str_poi_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_poi_id() {
  set_has_qrw_str_poi_id();
  if (qrw_str_poi_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_poi_id_ = new ::std::string;
  }
  return qrw_str_poi_id_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_poi_id() {
  clear_has_qrw_str_poi_id();
  if (qrw_str_poi_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_poi_id_;
    qrw_str_poi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_brand_id = 25;
inline bool RPCommonRequest::has_qrw_str_brand_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_brand_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_brand_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RPCommonRequest::clear_qrw_str_brand_id() {
  if (qrw_str_brand_id_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_brand_id_->clear();
  }
  clear_has_qrw_str_brand_id();
}
inline const ::std::string& RPCommonRequest::qrw_str_brand_id() const {
  return *qrw_str_brand_id_;
}
inline void RPCommonRequest::set_qrw_str_brand_id(const ::std::string& value) {
  set_has_qrw_str_brand_id();
  if (qrw_str_brand_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_brand_id_ = new ::std::string;
  }
  qrw_str_brand_id_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_brand_id(const char* value) {
  set_has_qrw_str_brand_id();
  if (qrw_str_brand_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_brand_id_ = new ::std::string;
  }
  qrw_str_brand_id_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_brand_id(const char* value, size_t size) {
  set_has_qrw_str_brand_id();
  if (qrw_str_brand_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_brand_id_ = new ::std::string;
  }
  qrw_str_brand_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_brand_id() {
  set_has_qrw_str_brand_id();
  if (qrw_str_brand_id_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_brand_id_ = new ::std::string;
  }
  return qrw_str_brand_id_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_brand_id() {
  clear_has_qrw_str_brand_id();
  if (qrw_str_brand_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_brand_id_;
    qrw_str_brand_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_thdcatg = 26;
inline bool RPCommonRequest::has_qrw_str_thdcatg() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_thdcatg() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_thdcatg() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RPCommonRequest::clear_qrw_str_thdcatg() {
  if (qrw_str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_thdcatg_->clear();
  }
  clear_has_qrw_str_thdcatg();
}
inline const ::std::string& RPCommonRequest::qrw_str_thdcatg() const {
  return *qrw_str_thdcatg_;
}
inline void RPCommonRequest::set_qrw_str_thdcatg(const ::std::string& value) {
  set_has_qrw_str_thdcatg();
  if (qrw_str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_thdcatg_ = new ::std::string;
  }
  qrw_str_thdcatg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_thdcatg(const char* value) {
  set_has_qrw_str_thdcatg();
  if (qrw_str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_thdcatg_ = new ::std::string;
  }
  qrw_str_thdcatg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_thdcatg(const char* value, size_t size) {
  set_has_qrw_str_thdcatg();
  if (qrw_str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_thdcatg_ = new ::std::string;
  }
  qrw_str_thdcatg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_thdcatg() {
  set_has_qrw_str_thdcatg();
  if (qrw_str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_thdcatg_ = new ::std::string;
  }
  return qrw_str_thdcatg_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_thdcatg() {
  clear_has_qrw_str_thdcatg();
  if (qrw_str_thdcatg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_thdcatg_;
    qrw_str_thdcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_subcatg = 27;
inline bool RPCommonRequest::has_qrw_str_subcatg() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_subcatg() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_subcatg() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RPCommonRequest::clear_qrw_str_subcatg() {
  if (qrw_str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_subcatg_->clear();
  }
  clear_has_qrw_str_subcatg();
}
inline const ::std::string& RPCommonRequest::qrw_str_subcatg() const {
  return *qrw_str_subcatg_;
}
inline void RPCommonRequest::set_qrw_str_subcatg(const ::std::string& value) {
  set_has_qrw_str_subcatg();
  if (qrw_str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_subcatg_ = new ::std::string;
  }
  qrw_str_subcatg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_subcatg(const char* value) {
  set_has_qrw_str_subcatg();
  if (qrw_str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_subcatg_ = new ::std::string;
  }
  qrw_str_subcatg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_subcatg(const char* value, size_t size) {
  set_has_qrw_str_subcatg();
  if (qrw_str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_subcatg_ = new ::std::string;
  }
  qrw_str_subcatg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_subcatg() {
  set_has_qrw_str_subcatg();
  if (qrw_str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_subcatg_ = new ::std::string;
  }
  return qrw_str_subcatg_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_subcatg() {
  clear_has_qrw_str_subcatg();
  if (qrw_str_subcatg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_subcatg_;
    qrw_str_subcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_catg = 28;
inline bool RPCommonRequest::has_qrw_str_catg() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_catg() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_catg() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RPCommonRequest::clear_qrw_str_catg() {
  if (qrw_str_catg_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_catg_->clear();
  }
  clear_has_qrw_str_catg();
}
inline const ::std::string& RPCommonRequest::qrw_str_catg() const {
  return *qrw_str_catg_;
}
inline void RPCommonRequest::set_qrw_str_catg(const ::std::string& value) {
  set_has_qrw_str_catg();
  if (qrw_str_catg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_catg_ = new ::std::string;
  }
  qrw_str_catg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_catg(const char* value) {
  set_has_qrw_str_catg();
  if (qrw_str_catg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_catg_ = new ::std::string;
  }
  qrw_str_catg_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_catg(const char* value, size_t size) {
  set_has_qrw_str_catg();
  if (qrw_str_catg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_catg_ = new ::std::string;
  }
  qrw_str_catg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_catg() {
  set_has_qrw_str_catg();
  if (qrw_str_catg_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_catg_ = new ::std::string;
  }
  return qrw_str_catg_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_catg() {
  clear_has_qrw_str_catg();
  if (qrw_str_catg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_catg_;
    qrw_str_catg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_city = 29;
inline bool RPCommonRequest::has_qrw_str_city() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_city() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_city() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RPCommonRequest::clear_qrw_str_city() {
  if (qrw_str_city_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_city_->clear();
  }
  clear_has_qrw_str_city();
}
inline const ::std::string& RPCommonRequest::qrw_str_city() const {
  return *qrw_str_city_;
}
inline void RPCommonRequest::set_qrw_str_city(const ::std::string& value) {
  set_has_qrw_str_city();
  if (qrw_str_city_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_city_ = new ::std::string;
  }
  qrw_str_city_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_city(const char* value) {
  set_has_qrw_str_city();
  if (qrw_str_city_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_city_ = new ::std::string;
  }
  qrw_str_city_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_city(const char* value, size_t size) {
  set_has_qrw_str_city();
  if (qrw_str_city_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_city_ = new ::std::string;
  }
  qrw_str_city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_city() {
  set_has_qrw_str_city();
  if (qrw_str_city_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_city_ = new ::std::string;
  }
  return qrw_str_city_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_city() {
  clear_has_qrw_str_city();
  if (qrw_str_city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_city_;
    qrw_str_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_dist = 30;
inline bool RPCommonRequest::has_qrw_str_dist() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_dist() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_dist() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RPCommonRequest::clear_qrw_str_dist() {
  if (qrw_str_dist_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_dist_->clear();
  }
  clear_has_qrw_str_dist();
}
inline const ::std::string& RPCommonRequest::qrw_str_dist() const {
  return *qrw_str_dist_;
}
inline void RPCommonRequest::set_qrw_str_dist(const ::std::string& value) {
  set_has_qrw_str_dist();
  if (qrw_str_dist_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_dist_ = new ::std::string;
  }
  qrw_str_dist_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_dist(const char* value) {
  set_has_qrw_str_dist();
  if (qrw_str_dist_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_dist_ = new ::std::string;
  }
  qrw_str_dist_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_dist(const char* value, size_t size) {
  set_has_qrw_str_dist();
  if (qrw_str_dist_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_dist_ = new ::std::string;
  }
  qrw_str_dist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_dist() {
  set_has_qrw_str_dist();
  if (qrw_str_dist_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_dist_ = new ::std::string;
  }
  return qrw_str_dist_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_dist() {
  clear_has_qrw_str_dist();
  if (qrw_str_dist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_dist_;
    qrw_str_dist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrw_str_range = 31;
inline bool RPCommonRequest::has_qrw_str_range() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RPCommonRequest::set_has_qrw_str_range() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RPCommonRequest::clear_has_qrw_str_range() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RPCommonRequest::clear_qrw_str_range() {
  if (qrw_str_range_ != &::google::protobuf::internal::kEmptyString) {
    qrw_str_range_->clear();
  }
  clear_has_qrw_str_range();
}
inline const ::std::string& RPCommonRequest::qrw_str_range() const {
  return *qrw_str_range_;
}
inline void RPCommonRequest::set_qrw_str_range(const ::std::string& value) {
  set_has_qrw_str_range();
  if (qrw_str_range_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_range_ = new ::std::string;
  }
  qrw_str_range_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_range(const char* value) {
  set_has_qrw_str_range();
  if (qrw_str_range_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_range_ = new ::std::string;
  }
  qrw_str_range_->assign(value);
}
inline void RPCommonRequest::set_qrw_str_range(const char* value, size_t size) {
  set_has_qrw_str_range();
  if (qrw_str_range_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_range_ = new ::std::string;
  }
  qrw_str_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_qrw_str_range() {
  set_has_qrw_str_range();
  if (qrw_str_range_ == &::google::protobuf::internal::kEmptyString) {
    qrw_str_range_ = new ::std::string;
  }
  return qrw_str_range_;
}
inline ::std::string* RPCommonRequest::release_qrw_str_range() {
  clear_has_qrw_str_range();
  if (qrw_str_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrw_str_range_;
    qrw_str_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 client = 32;
inline bool RPCommonRequest::has_client() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RPCommonRequest::set_has_client() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RPCommonRequest::clear_has_client() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RPCommonRequest::clear_client() {
  client_ = 0;
  clear_has_client();
}
inline ::google::protobuf::int32 RPCommonRequest::client() const {
  return client_;
}
inline void RPCommonRequest::set_client(::google::protobuf::int32 value) {
  set_has_client();
  client_ = value;
}

// optional int32 channelType = 33;
inline bool RPCommonRequest::has_channeltype() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RPCommonRequest::set_has_channeltype() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RPCommonRequest::clear_has_channeltype() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RPCommonRequest::clear_channeltype() {
  channeltype_ = 0;
  clear_has_channeltype();
}
inline ::google::protobuf::int32 RPCommonRequest::channeltype() const {
  return channeltype_;
}
inline void RPCommonRequest::set_channeltype(::google::protobuf::int32 value) {
  set_has_channeltype();
  channeltype_ = value;
}

// optional int32 startDay = 34;
inline bool RPCommonRequest::has_startday() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RPCommonRequest::set_has_startday() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RPCommonRequest::clear_has_startday() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RPCommonRequest::clear_startday() {
  startday_ = 0;
  clear_has_startday();
}
inline ::google::protobuf::int32 RPCommonRequest::startday() const {
  return startday_;
}
inline void RPCommonRequest::set_startday(::google::protobuf::int32 value) {
  set_has_startday();
  startday_ = value;
}

// optional int32 daySize = 35;
inline bool RPCommonRequest::has_daysize() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RPCommonRequest::set_has_daysize() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RPCommonRequest::clear_has_daysize() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RPCommonRequest::clear_daysize() {
  daysize_ = 0;
  clear_has_daysize();
}
inline ::google::protobuf::int32 RPCommonRequest::daysize() const {
  return daysize_;
}
inline void RPCommonRequest::set_daysize(::google::protobuf::int32 value) {
  set_has_daysize();
  daysize_ = value;
}

// optional int32 dealSize = 36;
inline bool RPCommonRequest::has_dealsize() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RPCommonRequest::set_has_dealsize() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RPCommonRequest::clear_has_dealsize() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RPCommonRequest::clear_dealsize() {
  dealsize_ = 0;
  clear_has_dealsize();
}
inline ::google::protobuf::int32 RPCommonRequest::dealsize() const {
  return dealsize_;
}
inline void RPCommonRequest::set_dealsize(::google::protobuf::int32 value) {
  set_has_dealsize();
  dealsize_ = value;
}

// optional string str_site_list = 37;
inline bool RPCommonRequest::has_str_site_list() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RPCommonRequest::set_has_str_site_list() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RPCommonRequest::clear_has_str_site_list() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RPCommonRequest::clear_str_site_list() {
  if (str_site_list_ != &::google::protobuf::internal::kEmptyString) {
    str_site_list_->clear();
  }
  clear_has_str_site_list();
}
inline const ::std::string& RPCommonRequest::str_site_list() const {
  return *str_site_list_;
}
inline void RPCommonRequest::set_str_site_list(const ::std::string& value) {
  set_has_str_site_list();
  if (str_site_list_ == &::google::protobuf::internal::kEmptyString) {
    str_site_list_ = new ::std::string;
  }
  str_site_list_->assign(value);
}
inline void RPCommonRequest::set_str_site_list(const char* value) {
  set_has_str_site_list();
  if (str_site_list_ == &::google::protobuf::internal::kEmptyString) {
    str_site_list_ = new ::std::string;
  }
  str_site_list_->assign(value);
}
inline void RPCommonRequest::set_str_site_list(const char* value, size_t size) {
  set_has_str_site_list();
  if (str_site_list_ == &::google::protobuf::internal::kEmptyString) {
    str_site_list_ = new ::std::string;
  }
  str_site_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonRequest::mutable_str_site_list() {
  set_has_str_site_list();
  if (str_site_list_ == &::google::protobuf::internal::kEmptyString) {
    str_site_list_ = new ::std::string;
  }
  return str_site_list_;
}
inline ::std::string* RPCommonRequest::release_str_site_list() {
  clear_has_str_site_list();
  if (str_site_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_site_list_;
    str_site_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 eventId = 38;
inline bool RPCommonRequest::has_eventid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RPCommonRequest::set_has_eventid() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RPCommonRequest::clear_has_eventid() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RPCommonRequest::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
inline ::google::protobuf::int32 RPCommonRequest::eventid() const {
  return eventid_;
}
inline void RPCommonRequest::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional int64 recDay = 39;
inline bool RPCommonRequest::has_recday() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RPCommonRequest::set_has_recday() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RPCommonRequest::clear_has_recday() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RPCommonRequest::clear_recday() {
  recday_ = GOOGLE_LONGLONG(0);
  clear_has_recday();
}
inline ::google::protobuf::int64 RPCommonRequest::recday() const {
  return recday_;
}
inline void RPCommonRequest::set_recday(::google::protobuf::int64 value) {
  set_has_recday();
  recday_ = value;
}

// optional int64 dealPos = 40;
inline bool RPCommonRequest::has_dealpos() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RPCommonRequest::set_has_dealpos() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RPCommonRequest::clear_has_dealpos() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RPCommonRequest::clear_dealpos() {
  dealpos_ = GOOGLE_LONGLONG(0);
  clear_has_dealpos();
}
inline ::google::protobuf::int64 RPCommonRequest::dealpos() const {
  return dealpos_;
}
inline void RPCommonRequest::set_dealpos(::google::protobuf::int64 value) {
  set_has_dealpos();
  dealpos_ = value;
}

// -------------------------------------------------------------------

// RPResultPOIItem

// optional int32 poiid = 1;
inline bool RPResultPOIItem::has_poiid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPResultPOIItem::set_has_poiid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPResultPOIItem::clear_has_poiid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPResultPOIItem::clear_poiid() {
  poiid_ = 0;
  clear_has_poiid();
}
inline ::google::protobuf::int32 RPResultPOIItem::poiid() const {
  return poiid_;
}
inline void RPResultPOIItem::set_poiid(::google::protobuf::int32 value) {
  set_has_poiid();
  poiid_ = value;
}

// optional double x = 2;
inline bool RPResultPOIItem::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPResultPOIItem::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPResultPOIItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPResultPOIItem::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RPResultPOIItem::x() const {
  return x_;
}
inline void RPResultPOIItem::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 3;
inline bool RPResultPOIItem::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPResultPOIItem::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPResultPOIItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPResultPOIItem::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RPResultPOIItem::y() const {
  return y_;
}
inline void RPResultPOIItem::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double distance = 4;
inline bool RPResultPOIItem::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPResultPOIItem::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPResultPOIItem::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPResultPOIItem::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double RPResultPOIItem::distance() const {
  return distance_;
}
inline void RPResultPOIItem::set_distance(double value) {
  set_has_distance();
  distance_ = value;
}

// optional string poiname = 5;
inline bool RPResultPOIItem::has_poiname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPResultPOIItem::set_has_poiname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPResultPOIItem::clear_has_poiname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPResultPOIItem::clear_poiname() {
  if (poiname_ != &::google::protobuf::internal::kEmptyString) {
    poiname_->clear();
  }
  clear_has_poiname();
}
inline const ::std::string& RPResultPOIItem::poiname() const {
  return *poiname_;
}
inline void RPResultPOIItem::set_poiname(const ::std::string& value) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(value);
}
inline void RPResultPOIItem::set_poiname(const char* value) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(value);
}
inline void RPResultPOIItem::set_poiname(const char* value, size_t size) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultPOIItem::mutable_poiname() {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  return poiname_;
}
inline ::std::string* RPResultPOIItem::release_poiname() {
  clear_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poiname_;
    poiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string address = 6;
inline bool RPResultPOIItem::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPResultPOIItem::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPResultPOIItem::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RPResultPOIItem::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& RPResultPOIItem::address() const {
  return *address_;
}
inline void RPResultPOIItem::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void RPResultPOIItem::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void RPResultPOIItem::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultPOIItem::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* RPResultPOIItem::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tel = 7;
inline bool RPResultPOIItem::has_tel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPResultPOIItem::set_has_tel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPResultPOIItem::clear_has_tel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPResultPOIItem::clear_tel() {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& RPResultPOIItem::tel() const {
  return *tel_;
}
inline void RPResultPOIItem::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void RPResultPOIItem::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void RPResultPOIItem::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultPOIItem::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  return tel_;
}
inline ::std::string* RPResultPOIItem::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rangeid = 8;
inline bool RPResultPOIItem::has_rangeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPResultPOIItem::set_has_rangeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPResultPOIItem::clear_has_rangeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RPResultPOIItem::clear_rangeid() {
  if (rangeid_ != &::google::protobuf::internal::kEmptyString) {
    rangeid_->clear();
  }
  clear_has_rangeid();
}
inline const ::std::string& RPResultPOIItem::rangeid() const {
  return *rangeid_;
}
inline void RPResultPOIItem::set_rangeid(const ::std::string& value) {
  set_has_rangeid();
  if (rangeid_ == &::google::protobuf::internal::kEmptyString) {
    rangeid_ = new ::std::string;
  }
  rangeid_->assign(value);
}
inline void RPResultPOIItem::set_rangeid(const char* value) {
  set_has_rangeid();
  if (rangeid_ == &::google::protobuf::internal::kEmptyString) {
    rangeid_ = new ::std::string;
  }
  rangeid_->assign(value);
}
inline void RPResultPOIItem::set_rangeid(const char* value, size_t size) {
  set_has_rangeid();
  if (rangeid_ == &::google::protobuf::internal::kEmptyString) {
    rangeid_ = new ::std::string;
  }
  rangeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultPOIItem::mutable_rangeid() {
  set_has_rangeid();
  if (rangeid_ == &::google::protobuf::internal::kEmptyString) {
    rangeid_ = new ::std::string;
  }
  return rangeid_;
}
inline ::std::string* RPResultPOIItem::release_rangeid() {
  clear_has_rangeid();
  if (rangeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rangeid_;
    rangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RPResultItem

// optional int64 dealId = 1;
inline bool RPResultItem::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPResultItem::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPResultItem::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPResultItem::clear_dealid() {
  dealid_ = GOOGLE_LONGLONG(0);
  clear_has_dealid();
}
inline ::google::protobuf::int64 RPResultItem::dealid() const {
  return dealid_;
}
inline void RPResultItem::set_dealid(::google::protobuf::int64 value) {
  set_has_dealid();
  dealid_ = value;
}

// optional double weight = 2;
inline bool RPResultItem::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPResultItem::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPResultItem::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPResultItem::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double RPResultItem::weight() const {
  return weight_;
}
inline void RPResultItem::set_weight(double value) {
  set_has_weight();
  weight_ = value;
}

// optional int32 rec_strategy = 3;
inline bool RPResultItem::has_rec_strategy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPResultItem::set_has_rec_strategy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPResultItem::clear_has_rec_strategy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPResultItem::clear_rec_strategy() {
  rec_strategy_ = 0;
  clear_has_rec_strategy();
}
inline ::google::protobuf::int32 RPResultItem::rec_strategy() const {
  return rec_strategy_;
}
inline void RPResultItem::set_rec_strategy(::google::protobuf::int32 value) {
  set_has_rec_strategy();
  rec_strategy_ = value;
}

// optional string reason = 4;
inline bool RPResultItem::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPResultItem::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPResultItem::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPResultItem::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& RPResultItem::reason() const {
  return *reason_;
}
inline void RPResultItem::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RPResultItem::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RPResultItem::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* RPResultItem::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 ifvirtual = 5;
inline bool RPResultItem::has_ifvirtual() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPResultItem::set_has_ifvirtual() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPResultItem::clear_has_ifvirtual() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPResultItem::clear_ifvirtual() {
  ifvirtual_ = 0;
  clear_has_ifvirtual();
}
inline ::google::protobuf::int32 RPResultItem::ifvirtual() const {
  return ifvirtual_;
}
inline void RPResultItem::set_ifvirtual(::google::protobuf::int32 value) {
  set_has_ifvirtual();
  ifvirtual_ = value;
}

// optional string image = 6;
inline bool RPResultItem::has_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPResultItem::set_has_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPResultItem::clear_has_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RPResultItem::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& RPResultItem::image() const {
  return *image_;
}
inline void RPResultItem::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void RPResultItem::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void RPResultItem::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* RPResultItem::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tiny_image = 7;
inline bool RPResultItem::has_tiny_image() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPResultItem::set_has_tiny_image() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPResultItem::clear_has_tiny_image() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPResultItem::clear_tiny_image() {
  if (tiny_image_ != &::google::protobuf::internal::kEmptyString) {
    tiny_image_->clear();
  }
  clear_has_tiny_image();
}
inline const ::std::string& RPResultItem::tiny_image() const {
  return *tiny_image_;
}
inline void RPResultItem::set_tiny_image(const ::std::string& value) {
  set_has_tiny_image();
  if (tiny_image_ == &::google::protobuf::internal::kEmptyString) {
    tiny_image_ = new ::std::string;
  }
  tiny_image_->assign(value);
}
inline void RPResultItem::set_tiny_image(const char* value) {
  set_has_tiny_image();
  if (tiny_image_ == &::google::protobuf::internal::kEmptyString) {
    tiny_image_ = new ::std::string;
  }
  tiny_image_->assign(value);
}
inline void RPResultItem::set_tiny_image(const char* value, size_t size) {
  set_has_tiny_image();
  if (tiny_image_ == &::google::protobuf::internal::kEmptyString) {
    tiny_image_ = new ::std::string;
  }
  tiny_image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_tiny_image() {
  set_has_tiny_image();
  if (tiny_image_ == &::google::protobuf::internal::kEmptyString) {
    tiny_image_ = new ::std::string;
  }
  return tiny_image_;
}
inline ::std::string* RPResultItem::release_tiny_image() {
  clear_has_tiny_image();
  if (tiny_image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiny_image_;
    tiny_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mid_image = 8;
inline bool RPResultItem::has_mid_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPResultItem::set_has_mid_image() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPResultItem::clear_has_mid_image() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RPResultItem::clear_mid_image() {
  if (mid_image_ != &::google::protobuf::internal::kEmptyString) {
    mid_image_->clear();
  }
  clear_has_mid_image();
}
inline const ::std::string& RPResultItem::mid_image() const {
  return *mid_image_;
}
inline void RPResultItem::set_mid_image(const ::std::string& value) {
  set_has_mid_image();
  if (mid_image_ == &::google::protobuf::internal::kEmptyString) {
    mid_image_ = new ::std::string;
  }
  mid_image_->assign(value);
}
inline void RPResultItem::set_mid_image(const char* value) {
  set_has_mid_image();
  if (mid_image_ == &::google::protobuf::internal::kEmptyString) {
    mid_image_ = new ::std::string;
  }
  mid_image_->assign(value);
}
inline void RPResultItem::set_mid_image(const char* value, size_t size) {
  set_has_mid_image();
  if (mid_image_ == &::google::protobuf::internal::kEmptyString) {
    mid_image_ = new ::std::string;
  }
  mid_image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_mid_image() {
  set_has_mid_image();
  if (mid_image_ == &::google::protobuf::internal::kEmptyString) {
    mid_image_ = new ::std::string;
  }
  return mid_image_;
}
inline ::std::string* RPResultItem::release_mid_image() {
  clear_has_mid_image();
  if (mid_image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mid_image_;
    mid_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string business_title = 9;
inline bool RPResultItem::has_business_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RPResultItem::set_has_business_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RPResultItem::clear_has_business_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RPResultItem::clear_business_title() {
  if (business_title_ != &::google::protobuf::internal::kEmptyString) {
    business_title_->clear();
  }
  clear_has_business_title();
}
inline const ::std::string& RPResultItem::business_title() const {
  return *business_title_;
}
inline void RPResultItem::set_business_title(const ::std::string& value) {
  set_has_business_title();
  if (business_title_ == &::google::protobuf::internal::kEmptyString) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(value);
}
inline void RPResultItem::set_business_title(const char* value) {
  set_has_business_title();
  if (business_title_ == &::google::protobuf::internal::kEmptyString) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(value);
}
inline void RPResultItem::set_business_title(const char* value, size_t size) {
  set_has_business_title();
  if (business_title_ == &::google::protobuf::internal::kEmptyString) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_business_title() {
  set_has_business_title();
  if (business_title_ == &::google::protobuf::internal::kEmptyString) {
    business_title_ = new ::std::string;
  }
  return business_title_;
}
inline ::std::string* RPResultItem::release_business_title() {
  clear_has_business_title();
  if (business_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = business_title_;
    business_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string medium_title = 10;
inline bool RPResultItem::has_medium_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RPResultItem::set_has_medium_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RPResultItem::clear_has_medium_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RPResultItem::clear_medium_title() {
  if (medium_title_ != &::google::protobuf::internal::kEmptyString) {
    medium_title_->clear();
  }
  clear_has_medium_title();
}
inline const ::std::string& RPResultItem::medium_title() const {
  return *medium_title_;
}
inline void RPResultItem::set_medium_title(const ::std::string& value) {
  set_has_medium_title();
  if (medium_title_ == &::google::protobuf::internal::kEmptyString) {
    medium_title_ = new ::std::string;
  }
  medium_title_->assign(value);
}
inline void RPResultItem::set_medium_title(const char* value) {
  set_has_medium_title();
  if (medium_title_ == &::google::protobuf::internal::kEmptyString) {
    medium_title_ = new ::std::string;
  }
  medium_title_->assign(value);
}
inline void RPResultItem::set_medium_title(const char* value, size_t size) {
  set_has_medium_title();
  if (medium_title_ == &::google::protobuf::internal::kEmptyString) {
    medium_title_ = new ::std::string;
  }
  medium_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_medium_title() {
  set_has_medium_title();
  if (medium_title_ == &::google::protobuf::internal::kEmptyString) {
    medium_title_ = new ::std::string;
  }
  return medium_title_;
}
inline ::std::string* RPResultItem::release_medium_title() {
  clear_has_medium_title();
  if (medium_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = medium_title_;
    medium_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string min_title = 11;
inline bool RPResultItem::has_min_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RPResultItem::set_has_min_title() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RPResultItem::clear_has_min_title() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RPResultItem::clear_min_title() {
  if (min_title_ != &::google::protobuf::internal::kEmptyString) {
    min_title_->clear();
  }
  clear_has_min_title();
}
inline const ::std::string& RPResultItem::min_title() const {
  return *min_title_;
}
inline void RPResultItem::set_min_title(const ::std::string& value) {
  set_has_min_title();
  if (min_title_ == &::google::protobuf::internal::kEmptyString) {
    min_title_ = new ::std::string;
  }
  min_title_->assign(value);
}
inline void RPResultItem::set_min_title(const char* value) {
  set_has_min_title();
  if (min_title_ == &::google::protobuf::internal::kEmptyString) {
    min_title_ = new ::std::string;
  }
  min_title_->assign(value);
}
inline void RPResultItem::set_min_title(const char* value, size_t size) {
  set_has_min_title();
  if (min_title_ == &::google::protobuf::internal::kEmptyString) {
    min_title_ = new ::std::string;
  }
  min_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_min_title() {
  set_has_min_title();
  if (min_title_ == &::google::protobuf::internal::kEmptyString) {
    min_title_ = new ::std::string;
  }
  return min_title_;
}
inline ::std::string* RPResultItem::release_min_title() {
  clear_has_min_title();
  if (min_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = min_title_;
    min_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title_high_price = 12;
inline bool RPResultItem::has_title_high_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RPResultItem::set_has_title_high_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RPResultItem::clear_has_title_high_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RPResultItem::clear_title_high_price() {
  if (title_high_price_ != &::google::protobuf::internal::kEmptyString) {
    title_high_price_->clear();
  }
  clear_has_title_high_price();
}
inline const ::std::string& RPResultItem::title_high_price() const {
  return *title_high_price_;
}
inline void RPResultItem::set_title_high_price(const ::std::string& value) {
  set_has_title_high_price();
  if (title_high_price_ == &::google::protobuf::internal::kEmptyString) {
    title_high_price_ = new ::std::string;
  }
  title_high_price_->assign(value);
}
inline void RPResultItem::set_title_high_price(const char* value) {
  set_has_title_high_price();
  if (title_high_price_ == &::google::protobuf::internal::kEmptyString) {
    title_high_price_ = new ::std::string;
  }
  title_high_price_->assign(value);
}
inline void RPResultItem::set_title_high_price(const char* value, size_t size) {
  set_has_title_high_price();
  if (title_high_price_ == &::google::protobuf::internal::kEmptyString) {
    title_high_price_ = new ::std::string;
  }
  title_high_price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_title_high_price() {
  set_has_title_high_price();
  if (title_high_price_ == &::google::protobuf::internal::kEmptyString) {
    title_high_price_ = new ::std::string;
  }
  return title_high_price_;
}
inline ::std::string* RPResultItem::release_title_high_price() {
  clear_has_title_high_price();
  if (title_high_price_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_high_price_;
    title_high_price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 price_ori = 13;
inline bool RPResultItem::has_price_ori() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RPResultItem::set_has_price_ori() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RPResultItem::clear_has_price_ori() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RPResultItem::clear_price_ori() {
  price_ori_ = 0;
  clear_has_price_ori();
}
inline ::google::protobuf::int32 RPResultItem::price_ori() const {
  return price_ori_;
}
inline void RPResultItem::set_price_ori(::google::protobuf::int32 value) {
  set_has_price_ori();
  price_ori_ = value;
}

// optional int32 price_current = 14;
inline bool RPResultItem::has_price_current() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RPResultItem::set_has_price_current() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RPResultItem::clear_has_price_current() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RPResultItem::clear_price_current() {
  price_current_ = 0;
  clear_has_price_current();
}
inline ::google::protobuf::int32 RPResultItem::price_current() const {
  return price_current_;
}
inline void RPResultItem::set_price_current(::google::protobuf::int32 value) {
  set_has_price_current();
  price_current_ = value;
}

// optional string tags = 15;
inline bool RPResultItem::has_tags() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RPResultItem::set_has_tags() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RPResultItem::clear_has_tags() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RPResultItem::clear_tags() {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    tags_->clear();
  }
  clear_has_tags();
}
inline const ::std::string& RPResultItem::tags() const {
  return *tags_;
}
inline void RPResultItem::set_tags(const ::std::string& value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void RPResultItem::set_tags(const char* value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void RPResultItem::set_tags(const char* value, size_t size) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_tags() {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  return tags_;
}
inline ::std::string* RPResultItem::release_tags() {
  clear_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tags_;
    tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_new = 16;
inline bool RPResultItem::has_is_new() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RPResultItem::set_has_is_new() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RPResultItem::clear_has_is_new() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RPResultItem::clear_is_new() {
  is_new_ = 0;
  clear_has_is_new();
}
inline ::google::protobuf::int32 RPResultItem::is_new() const {
  return is_new_;
}
inline void RPResultItem::set_is_new(::google::protobuf::int32 value) {
  set_has_is_new();
  is_new_ = value;
}

// optional int32 is_flush = 17;
inline bool RPResultItem::has_is_flush() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RPResultItem::set_has_is_flush() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RPResultItem::clear_has_is_flush() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RPResultItem::clear_is_flush() {
  is_flush_ = 0;
  clear_has_is_flush();
}
inline ::google::protobuf::int32 RPResultItem::is_flush() const {
  return is_flush_;
}
inline void RPResultItem::set_is_flush(::google::protobuf::int32 value) {
  set_has_is_flush();
  is_flush_ = value;
}

// optional int32 is_reservation = 18;
inline bool RPResultItem::has_is_reservation() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RPResultItem::set_has_is_reservation() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RPResultItem::clear_has_is_reservation() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RPResultItem::clear_is_reservation() {
  is_reservation_ = 0;
  clear_has_is_reservation();
}
inline ::google::protobuf::int32 RPResultItem::is_reservation() const {
  return is_reservation_;
}
inline void RPResultItem::set_is_reservation(::google::protobuf::int32 value) {
  set_has_is_reservation();
  is_reservation_ = value;
}

// optional int32 sale_count = 19;
inline bool RPResultItem::has_sale_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RPResultItem::set_has_sale_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RPResultItem::clear_has_sale_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RPResultItem::clear_sale_count() {
  sale_count_ = 0;
  clear_has_sale_count();
}
inline ::google::protobuf::int32 RPResultItem::sale_count() const {
  return sale_count_;
}
inline void RPResultItem::set_sale_count(::google::protobuf::int32 value) {
  set_has_sale_count();
  sale_count_ = value;
}

// optional int32 type = 20;
inline bool RPResultItem::has_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RPResultItem::set_has_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RPResultItem::clear_has_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RPResultItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RPResultItem::type() const {
  return type_;
}
inline void RPResultItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 pay_start_time = 21;
inline bool RPResultItem::has_pay_start_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RPResultItem::set_has_pay_start_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RPResultItem::clear_has_pay_start_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RPResultItem::clear_pay_start_time() {
  pay_start_time_ = 0;
  clear_has_pay_start_time();
}
inline ::google::protobuf::int32 RPResultItem::pay_start_time() const {
  return pay_start_time_;
}
inline void RPResultItem::set_pay_start_time(::google::protobuf::int32 value) {
  set_has_pay_start_time();
  pay_start_time_ = value;
}

// optional int32 pay_end_time = 22;
inline bool RPResultItem::has_pay_end_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RPResultItem::set_has_pay_end_time() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RPResultItem::clear_has_pay_end_time() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RPResultItem::clear_pay_end_time() {
  pay_end_time_ = 0;
  clear_has_pay_end_time();
}
inline ::google::protobuf::int32 RPResultItem::pay_end_time() const {
  return pay_end_time_;
}
inline void RPResultItem::set_pay_end_time(::google::protobuf::int32 value) {
  set_has_pay_end_time();
  pay_end_time_ = value;
}

// optional int32 deal_start_time = 23;
inline bool RPResultItem::has_deal_start_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RPResultItem::set_has_deal_start_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RPResultItem::clear_has_deal_start_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RPResultItem::clear_deal_start_time() {
  deal_start_time_ = 0;
  clear_has_deal_start_time();
}
inline ::google::protobuf::int32 RPResultItem::deal_start_time() const {
  return deal_start_time_;
}
inline void RPResultItem::set_deal_start_time(::google::protobuf::int32 value) {
  set_has_deal_start_time();
  deal_start_time_ = value;
}

// optional int32 deal_expire_time = 24;
inline bool RPResultItem::has_deal_expire_time() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RPResultItem::set_has_deal_expire_time() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RPResultItem::clear_has_deal_expire_time() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RPResultItem::clear_deal_expire_time() {
  deal_expire_time_ = 0;
  clear_has_deal_expire_time();
}
inline ::google::protobuf::int32 RPResultItem::deal_expire_time() const {
  return deal_expire_time_;
}
inline void RPResultItem::set_deal_expire_time(::google::protobuf::int32 value) {
  set_has_deal_expire_time();
  deal_expire_time_ = value;
}

// optional int32 city_num = 25;
inline bool RPResultItem::has_city_num() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RPResultItem::set_has_city_num() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RPResultItem::clear_has_city_num() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RPResultItem::clear_city_num() {
  city_num_ = 0;
  clear_has_city_num();
}
inline ::google::protobuf::int32 RPResultItem::city_num() const {
  return city_num_;
}
inline void RPResultItem::set_city_num(::google::protobuf::int32 value) {
  set_has_city_num();
  city_num_ = value;
}

// repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
inline int RPResultItem::poi_size() const {
  return poi_.size();
}
inline void RPResultItem::clear_poi() {
  poi_.Clear();
}
inline const ::lbs::da::openservice::RPResultPOIItem& RPResultItem::poi(int index) const {
  return poi_.Get(index);
}
inline ::lbs::da::openservice::RPResultPOIItem* RPResultItem::mutable_poi(int index) {
  return poi_.Mutable(index);
}
inline ::lbs::da::openservice::RPResultPOIItem* RPResultItem::add_poi() {
  return poi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultPOIItem >&
RPResultItem::poi() const {
  return poi_;
}
inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultPOIItem >*
RPResultItem::mutable_poi() {
  return &poi_;
}

// optional int32 poi_num = 27;
inline bool RPResultItem::has_poi_num() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RPResultItem::set_has_poi_num() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RPResultItem::clear_has_poi_num() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RPResultItem::clear_poi_num() {
  poi_num_ = 0;
  clear_has_poi_num();
}
inline ::google::protobuf::int32 RPResultItem::poi_num() const {
  return poi_num_;
}
inline void RPResultItem::set_poi_num(::google::protobuf::int32 value) {
  set_has_poi_num();
  poi_num_ = value;
}

// optional string range = 28;
inline bool RPResultItem::has_range() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RPResultItem::set_has_range() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RPResultItem::clear_has_range() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RPResultItem::clear_range() {
  if (range_ != &::google::protobuf::internal::kEmptyString) {
    range_->clear();
  }
  clear_has_range();
}
inline const ::std::string& RPResultItem::range() const {
  return *range_;
}
inline void RPResultItem::set_range(const ::std::string& value) {
  set_has_range();
  if (range_ == &::google::protobuf::internal::kEmptyString) {
    range_ = new ::std::string;
  }
  range_->assign(value);
}
inline void RPResultItem::set_range(const char* value) {
  set_has_range();
  if (range_ == &::google::protobuf::internal::kEmptyString) {
    range_ = new ::std::string;
  }
  range_->assign(value);
}
inline void RPResultItem::set_range(const char* value, size_t size) {
  set_has_range();
  if (range_ == &::google::protobuf::internal::kEmptyString) {
    range_ = new ::std::string;
  }
  range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_range() {
  set_has_range();
  if (range_ == &::google::protobuf::internal::kEmptyString) {
    range_ = new ::std::string;
  }
  return range_;
}
inline ::std::string* RPResultItem::release_range() {
  clear_has_range();
  if (range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = range_;
    range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 score = 29;
inline bool RPResultItem::has_score() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RPResultItem::set_has_score() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RPResultItem::clear_has_score() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RPResultItem::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 RPResultItem::score() const {
  return score_;
}
inline void RPResultItem::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 comment_num = 30;
inline bool RPResultItem::has_comment_num() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RPResultItem::set_has_comment_num() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RPResultItem::clear_has_comment_num() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RPResultItem::clear_comment_num() {
  comment_num_ = 0;
  clear_has_comment_num();
}
inline ::google::protobuf::int32 RPResultItem::comment_num() const {
  return comment_num_;
}
inline void RPResultItem::set_comment_num(::google::protobuf::int32 value) {
  set_has_comment_num();
  comment_num_ = value;
}

// optional string tinyurl = 31;
inline bool RPResultItem::has_tinyurl() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RPResultItem::set_has_tinyurl() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RPResultItem::clear_has_tinyurl() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RPResultItem::clear_tinyurl() {
  if (tinyurl_ != &::google::protobuf::internal::kEmptyString) {
    tinyurl_->clear();
  }
  clear_has_tinyurl();
}
inline const ::std::string& RPResultItem::tinyurl() const {
  return *tinyurl_;
}
inline void RPResultItem::set_tinyurl(const ::std::string& value) {
  set_has_tinyurl();
  if (tinyurl_ == &::google::protobuf::internal::kEmptyString) {
    tinyurl_ = new ::std::string;
  }
  tinyurl_->assign(value);
}
inline void RPResultItem::set_tinyurl(const char* value) {
  set_has_tinyurl();
  if (tinyurl_ == &::google::protobuf::internal::kEmptyString) {
    tinyurl_ = new ::std::string;
  }
  tinyurl_->assign(value);
}
inline void RPResultItem::set_tinyurl(const char* value, size_t size) {
  set_has_tinyurl();
  if (tinyurl_ == &::google::protobuf::internal::kEmptyString) {
    tinyurl_ = new ::std::string;
  }
  tinyurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_tinyurl() {
  set_has_tinyurl();
  if (tinyurl_ == &::google::protobuf::internal::kEmptyString) {
    tinyurl_ = new ::std::string;
  }
  return tinyurl_;
}
inline ::std::string* RPResultItem::release_tinyurl() {
  clear_has_tinyurl();
  if (tinyurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tinyurl_;
    tinyurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string group_title = 32;
inline bool RPResultItem::has_group_title() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RPResultItem::set_has_group_title() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RPResultItem::clear_has_group_title() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RPResultItem::clear_group_title() {
  if (group_title_ != &::google::protobuf::internal::kEmptyString) {
    group_title_->clear();
  }
  clear_has_group_title();
}
inline const ::std::string& RPResultItem::group_title() const {
  return *group_title_;
}
inline void RPResultItem::set_group_title(const ::std::string& value) {
  set_has_group_title();
  if (group_title_ == &::google::protobuf::internal::kEmptyString) {
    group_title_ = new ::std::string;
  }
  group_title_->assign(value);
}
inline void RPResultItem::set_group_title(const char* value) {
  set_has_group_title();
  if (group_title_ == &::google::protobuf::internal::kEmptyString) {
    group_title_ = new ::std::string;
  }
  group_title_->assign(value);
}
inline void RPResultItem::set_group_title(const char* value, size_t size) {
  set_has_group_title();
  if (group_title_ == &::google::protobuf::internal::kEmptyString) {
    group_title_ = new ::std::string;
  }
  group_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_group_title() {
  set_has_group_title();
  if (group_title_ == &::google::protobuf::internal::kEmptyString) {
    group_title_ = new ::std::string;
  }
  return group_title_;
}
inline ::std::string* RPResultItem::release_group_title() {
  clear_has_group_title();
  if (group_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_title_;
    group_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 group_type = 33;
inline bool RPResultItem::has_group_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RPResultItem::set_has_group_type() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RPResultItem::clear_has_group_type() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RPResultItem::clear_group_type() {
  group_type_ = 0;
  clear_has_group_type();
}
inline ::google::protobuf::int32 RPResultItem::group_type() const {
  return group_type_;
}
inline void RPResultItem::set_group_type(::google::protobuf::int32 value) {
  set_has_group_type();
  group_type_ = value;
}

// repeated .lbs.da.openservice.RPResultItem group_list = 34;
inline int RPResultItem::group_list_size() const {
  return group_list_.size();
}
inline void RPResultItem::clear_group_list() {
  group_list_.Clear();
}
inline const ::lbs::da::openservice::RPResultItem& RPResultItem::group_list(int index) const {
  return group_list_.Get(index);
}
inline ::lbs::da::openservice::RPResultItem* RPResultItem::mutable_group_list(int index) {
  return group_list_.Mutable(index);
}
inline ::lbs::da::openservice::RPResultItem* RPResultItem::add_group_list() {
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
RPResultItem::group_list() const {
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
RPResultItem::mutable_group_list() {
  return &group_list_;
}

// optional int32 day = 35;
inline bool RPResultItem::has_day() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RPResultItem::set_has_day() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RPResultItem::clear_has_day() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RPResultItem::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 RPResultItem::day() const {
  return day_;
}
inline void RPResultItem::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional string bn_rp_svr_exp_ids = 36;
inline bool RPResultItem::has_bn_rp_svr_exp_ids() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RPResultItem::set_has_bn_rp_svr_exp_ids() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RPResultItem::clear_has_bn_rp_svr_exp_ids() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RPResultItem::clear_bn_rp_svr_exp_ids() {
  if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_->clear();
  }
  clear_has_bn_rp_svr_exp_ids();
}
inline const ::std::string& RPResultItem::bn_rp_svr_exp_ids() const {
  return *bn_rp_svr_exp_ids_;
}
inline void RPResultItem::set_bn_rp_svr_exp_ids(const ::std::string& value) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(value);
}
inline void RPResultItem::set_bn_rp_svr_exp_ids(const char* value) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(value);
}
inline void RPResultItem::set_bn_rp_svr_exp_ids(const char* value, size_t size) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPResultItem::mutable_bn_rp_svr_exp_ids() {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  return bn_rp_svr_exp_ids_;
}
inline ::std::string* RPResultItem::release_bn_rp_svr_exp_ids() {
  clear_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bn_rp_svr_exp_ids_;
    bn_rp_svr_exp_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pushNum = 37;
inline bool RPResultItem::has_pushnum() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RPResultItem::set_has_pushnum() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RPResultItem::clear_has_pushnum() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RPResultItem::clear_pushnum() {
  pushnum_ = 0;
  clear_has_pushnum();
}
inline ::google::protobuf::int32 RPResultItem::pushnum() const {
  return pushnum_;
}
inline void RPResultItem::set_pushnum(::google::protobuf::int32 value) {
  set_has_pushnum();
  pushnum_ = value;
}

// repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
inline int RPResultItem::bn_rp_svr_result_size() const {
  return bn_rp_svr_result_.size();
}
inline void RPResultItem::clear_bn_rp_svr_result() {
  bn_rp_svr_result_.Clear();
}
inline const ::lbs::da::openservice::RPResultItem& RPResultItem::bn_rp_svr_result(int index) const {
  return bn_rp_svr_result_.Get(index);
}
inline ::lbs::da::openservice::RPResultItem* RPResultItem::mutable_bn_rp_svr_result(int index) {
  return bn_rp_svr_result_.Mutable(index);
}
inline ::lbs::da::openservice::RPResultItem* RPResultItem::add_bn_rp_svr_result() {
  return bn_rp_svr_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
RPResultItem::bn_rp_svr_result() const {
  return bn_rp_svr_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
RPResultItem::mutable_bn_rp_svr_result() {
  return &bn_rp_svr_result_;
}

// -------------------------------------------------------------------

// RPCommonResponse

// optional string bn_rp_svr_errinf = 1;
inline bool RPCommonResponse::has_bn_rp_svr_errinf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_errinf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_errinf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCommonResponse::clear_bn_rp_svr_errinf() {
  if (bn_rp_svr_errinf_ != &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_errinf_->clear();
  }
  clear_has_bn_rp_svr_errinf();
}
inline const ::std::string& RPCommonResponse::bn_rp_svr_errinf() const {
  return *bn_rp_svr_errinf_;
}
inline void RPCommonResponse::set_bn_rp_svr_errinf(const ::std::string& value) {
  set_has_bn_rp_svr_errinf();
  if (bn_rp_svr_errinf_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_errinf_ = new ::std::string;
  }
  bn_rp_svr_errinf_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_errinf(const char* value) {
  set_has_bn_rp_svr_errinf();
  if (bn_rp_svr_errinf_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_errinf_ = new ::std::string;
  }
  bn_rp_svr_errinf_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_errinf(const char* value, size_t size) {
  set_has_bn_rp_svr_errinf();
  if (bn_rp_svr_errinf_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_errinf_ = new ::std::string;
  }
  bn_rp_svr_errinf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_bn_rp_svr_errinf() {
  set_has_bn_rp_svr_errinf();
  if (bn_rp_svr_errinf_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_errinf_ = new ::std::string;
  }
  return bn_rp_svr_errinf_;
}
inline ::std::string* RPCommonResponse::release_bn_rp_svr_errinf() {
  clear_has_bn_rp_svr_errinf();
  if (bn_rp_svr_errinf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bn_rp_svr_errinf_;
    bn_rp_svr_errinf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bn_rp_svr_errno = 2;
inline bool RPCommonResponse::has_bn_rp_svr_errno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_errno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_errno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCommonResponse::clear_bn_rp_svr_errno() {
  bn_rp_svr_errno_ = 0;
  clear_has_bn_rp_svr_errno();
}
inline ::google::protobuf::int32 RPCommonResponse::bn_rp_svr_errno() const {
  return bn_rp_svr_errno_;
}
inline void RPCommonResponse::set_bn_rp_svr_errno(::google::protobuf::int32 value) {
  set_has_bn_rp_svr_errno();
  bn_rp_svr_errno_ = value;
}

// optional string bn_rp_svr_exp_ids = 3;
inline bool RPCommonResponse::has_bn_rp_svr_exp_ids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_exp_ids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_exp_ids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCommonResponse::clear_bn_rp_svr_exp_ids() {
  if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_->clear();
  }
  clear_has_bn_rp_svr_exp_ids();
}
inline const ::std::string& RPCommonResponse::bn_rp_svr_exp_ids() const {
  return *bn_rp_svr_exp_ids_;
}
inline void RPCommonResponse::set_bn_rp_svr_exp_ids(const ::std::string& value) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_exp_ids(const char* value) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_exp_ids(const char* value, size_t size) {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  bn_rp_svr_exp_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_bn_rp_svr_exp_ids() {
  set_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_exp_ids_ = new ::std::string;
  }
  return bn_rp_svr_exp_ids_;
}
inline ::std::string* RPCommonResponse::release_bn_rp_svr_exp_ids() {
  clear_has_bn_rp_svr_exp_ids();
  if (bn_rp_svr_exp_ids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bn_rp_svr_exp_ids_;
    bn_rp_svr_exp_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string logId = 4;
inline bool RPCommonResponse::has_logid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCommonResponse::set_has_logid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCommonResponse::clear_has_logid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCommonResponse::clear_logid() {
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    logid_->clear();
  }
  clear_has_logid();
}
inline const ::std::string& RPCommonResponse::logid() const {
  return *logid_;
}
inline void RPCommonResponse::set_logid(const ::std::string& value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void RPCommonResponse::set_logid(const char* value) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(value);
}
inline void RPCommonResponse::set_logid(const char* value, size_t size) {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  logid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_logid() {
  set_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    logid_ = new ::std::string;
  }
  return logid_;
}
inline ::std::string* RPCommonResponse::release_logid() {
  clear_has_logid();
  if (logid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logid_;
    logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bn_rp_svr_rec_num = 5;
inline bool RPCommonResponse::has_bn_rp_svr_rec_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_rec_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_rec_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPCommonResponse::clear_bn_rp_svr_rec_num() {
  bn_rp_svr_rec_num_ = 0;
  clear_has_bn_rp_svr_rec_num();
}
inline ::google::protobuf::int32 RPCommonResponse::bn_rp_svr_rec_num() const {
  return bn_rp_svr_rec_num_;
}
inline void RPCommonResponse::set_bn_rp_svr_rec_num(::google::protobuf::int32 value) {
  set_has_bn_rp_svr_rec_num();
  bn_rp_svr_rec_num_ = value;
}

// repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
inline int RPCommonResponse::bn_rp_svr_result_size() const {
  return bn_rp_svr_result_.size();
}
inline void RPCommonResponse::clear_bn_rp_svr_result() {
  bn_rp_svr_result_.Clear();
}
inline const ::lbs::da::openservice::RPResultItem& RPCommonResponse::bn_rp_svr_result(int index) const {
  return bn_rp_svr_result_.Get(index);
}
inline ::lbs::da::openservice::RPResultItem* RPCommonResponse::mutable_bn_rp_svr_result(int index) {
  return bn_rp_svr_result_.Mutable(index);
}
inline ::lbs::da::openservice::RPResultItem* RPCommonResponse::add_bn_rp_svr_result() {
  return bn_rp_svr_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >&
RPCommonResponse::bn_rp_svr_result() const {
  return bn_rp_svr_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::lbs::da::openservice::RPResultItem >*
RPCommonResponse::mutable_bn_rp_svr_result() {
  return &bn_rp_svr_result_;
}

// optional int32 bn_rp_svr_nresult_flag = 7;
inline bool RPCommonResponse::has_bn_rp_svr_nresult_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_nresult_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_nresult_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPCommonResponse::clear_bn_rp_svr_nresult_flag() {
  bn_rp_svr_nresult_flag_ = 0;
  clear_has_bn_rp_svr_nresult_flag();
}
inline ::google::protobuf::int32 RPCommonResponse::bn_rp_svr_nresult_flag() const {
  return bn_rp_svr_nresult_flag_;
}
inline void RPCommonResponse::set_bn_rp_svr_nresult_flag(::google::protobuf::int32 value) {
  set_has_bn_rp_svr_nresult_flag();
  bn_rp_svr_nresult_flag_ = value;
}

// optional string bn_rp_svr_title = 8;
inline bool RPCommonResponse::has_bn_rp_svr_title() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_title() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_title() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RPCommonResponse::clear_bn_rp_svr_title() {
  if (bn_rp_svr_title_ != &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_title_->clear();
  }
  clear_has_bn_rp_svr_title();
}
inline const ::std::string& RPCommonResponse::bn_rp_svr_title() const {
  return *bn_rp_svr_title_;
}
inline void RPCommonResponse::set_bn_rp_svr_title(const ::std::string& value) {
  set_has_bn_rp_svr_title();
  if (bn_rp_svr_title_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_title_ = new ::std::string;
  }
  bn_rp_svr_title_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_title(const char* value) {
  set_has_bn_rp_svr_title();
  if (bn_rp_svr_title_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_title_ = new ::std::string;
  }
  bn_rp_svr_title_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_title(const char* value, size_t size) {
  set_has_bn_rp_svr_title();
  if (bn_rp_svr_title_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_title_ = new ::std::string;
  }
  bn_rp_svr_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_bn_rp_svr_title() {
  set_has_bn_rp_svr_title();
  if (bn_rp_svr_title_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_title_ = new ::std::string;
  }
  return bn_rp_svr_title_;
}
inline ::std::string* RPCommonResponse::release_bn_rp_svr_title() {
  clear_has_bn_rp_svr_title();
  if (bn_rp_svr_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bn_rp_svr_title_;
    bn_rp_svr_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bn_rp_svr_subtitle = 9;
inline bool RPCommonResponse::has_bn_rp_svr_subtitle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RPCommonResponse::set_has_bn_rp_svr_subtitle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RPCommonResponse::clear_has_bn_rp_svr_subtitle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RPCommonResponse::clear_bn_rp_svr_subtitle() {
  if (bn_rp_svr_subtitle_ != &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_subtitle_->clear();
  }
  clear_has_bn_rp_svr_subtitle();
}
inline const ::std::string& RPCommonResponse::bn_rp_svr_subtitle() const {
  return *bn_rp_svr_subtitle_;
}
inline void RPCommonResponse::set_bn_rp_svr_subtitle(const ::std::string& value) {
  set_has_bn_rp_svr_subtitle();
  if (bn_rp_svr_subtitle_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_subtitle_ = new ::std::string;
  }
  bn_rp_svr_subtitle_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_subtitle(const char* value) {
  set_has_bn_rp_svr_subtitle();
  if (bn_rp_svr_subtitle_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_subtitle_ = new ::std::string;
  }
  bn_rp_svr_subtitle_->assign(value);
}
inline void RPCommonResponse::set_bn_rp_svr_subtitle(const char* value, size_t size) {
  set_has_bn_rp_svr_subtitle();
  if (bn_rp_svr_subtitle_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_subtitle_ = new ::std::string;
  }
  bn_rp_svr_subtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_bn_rp_svr_subtitle() {
  set_has_bn_rp_svr_subtitle();
  if (bn_rp_svr_subtitle_ == &::google::protobuf::internal::kEmptyString) {
    bn_rp_svr_subtitle_ = new ::std::string;
  }
  return bn_rp_svr_subtitle_;
}
inline ::std::string* RPCommonResponse::release_bn_rp_svr_subtitle() {
  clear_has_bn_rp_svr_subtitle();
  if (bn_rp_svr_subtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bn_rp_svr_subtitle_;
    bn_rp_svr_subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string gift_cart_id = 10;
inline bool RPCommonResponse::has_gift_cart_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RPCommonResponse::set_has_gift_cart_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RPCommonResponse::clear_has_gift_cart_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RPCommonResponse::clear_gift_cart_id() {
  if (gift_cart_id_ != &::google::protobuf::internal::kEmptyString) {
    gift_cart_id_->clear();
  }
  clear_has_gift_cart_id();
}
inline const ::std::string& RPCommonResponse::gift_cart_id() const {
  return *gift_cart_id_;
}
inline void RPCommonResponse::set_gift_cart_id(const ::std::string& value) {
  set_has_gift_cart_id();
  if (gift_cart_id_ == &::google::protobuf::internal::kEmptyString) {
    gift_cart_id_ = new ::std::string;
  }
  gift_cart_id_->assign(value);
}
inline void RPCommonResponse::set_gift_cart_id(const char* value) {
  set_has_gift_cart_id();
  if (gift_cart_id_ == &::google::protobuf::internal::kEmptyString) {
    gift_cart_id_ = new ::std::string;
  }
  gift_cart_id_->assign(value);
}
inline void RPCommonResponse::set_gift_cart_id(const char* value, size_t size) {
  set_has_gift_cart_id();
  if (gift_cart_id_ == &::google::protobuf::internal::kEmptyString) {
    gift_cart_id_ = new ::std::string;
  }
  gift_cart_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCommonResponse::mutable_gift_cart_id() {
  set_has_gift_cart_id();
  if (gift_cart_id_ == &::google::protobuf::internal::kEmptyString) {
    gift_cart_id_ = new ::std::string;
  }
  return gift_cart_id_;
}
inline ::std::string* RPCommonResponse::release_gift_cart_id() {
  clear_has_gift_cart_id();
  if (gift_cart_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_cart_id_;
    gift_cart_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rp_2eproto__INCLUDED
