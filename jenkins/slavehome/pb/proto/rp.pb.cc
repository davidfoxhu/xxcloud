// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* RPCommonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCommonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPResultPOIItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPResultPOIItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCommonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCommonResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rp_2eproto() {
  protobuf_AddDesc_rp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rp.proto");
  GOOGLE_CHECK(file != NULL);
  RPCommonRequest_descriptor_ = file->message_type(0);
  static const int RPCommonRequest_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, coor_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, situationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, need_poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, poi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, baidu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, targetareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_thdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_shop_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_shop_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_poi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_brand_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_thdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, qrw_str_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, daysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, dealsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, str_site_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, recday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, dealpos_),
  };
  RPCommonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCommonRequest_descriptor_,
      RPCommonRequest::default_instance_,
      RPCommonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCommonRequest));
  RPResultPOIItem_descriptor_ = file->message_type(1);
  static const int RPResultPOIItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, poiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, poiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, rangeid_),
  };
  RPResultPOIItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPResultPOIItem_descriptor_,
      RPResultPOIItem::default_instance_,
      RPResultPOIItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultPOIItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPResultPOIItem));
  RPResultItem_descriptor_ = file->message_type(2);
  static const int RPResultItem_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, rec_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, ifvirtual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, tiny_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, mid_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, business_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, medium_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, min_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, title_high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, price_ori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, price_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, is_flush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, is_reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, sale_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, pay_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, pay_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, deal_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, deal_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, city_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, poi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, comment_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, tinyurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, group_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, group_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, bn_rp_svr_exp_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, pushnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, bn_rp_svr_result_),
  };
  RPResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPResultItem_descriptor_,
      RPResultItem::default_instance_,
      RPResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPResultItem));
  RPCommonResponse_descriptor_ = file->message_type(3);
  static const int RPCommonResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_errinf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_errno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_exp_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_rec_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_nresult_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, bn_rp_svr_subtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, gift_cart_id_),
  };
  RPCommonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCommonResponse_descriptor_,
      RPCommonResponse::default_instance_,
      RPCommonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCommonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCommonResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCommonRequest_descriptor_, &RPCommonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPResultPOIItem_descriptor_, &RPResultPOIItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPResultItem_descriptor_, &RPResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCommonResponse_descriptor_, &RPCommonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rp_2eproto() {
  delete RPCommonRequest::default_instance_;
  delete RPCommonRequest_reflection_;
  delete RPResultPOIItem::default_instance_;
  delete RPResultPOIItem_reflection_;
  delete RPResultItem::default_instance_;
  delete RPResultItem_reflection_;
  delete RPCommonResponse::default_instance_;
  delete RPCommonResponse_reflection_;
}

void protobuf_AddDesc_rp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lbs::da::openservice::protobuf_AddDesc_pbrpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010rp.proto\022\022lbs.da.openservice\032\013pbrpc.pr"
    "oto\"\252\006\n\017RPCommonRequest\0221\n\006header\030\001 \002(\0132"
    "!.lbs.da.openservice.RequestHeader\022\020\n\010pr"
    "ovider\030\002 \001(\t\022\r\n\005logId\030\003 \001(\t\022\016\n\006userID\030\004 "
    "\001(\t\022\014\n\004cuid\030\005 \001(\t\022\020\n\010coor_sys\030\006 \001(\t\022\t\n\001x"
    "\030\007 \001(\001\022\t\n\001y\030\010 \001(\001\022\016\n\006areaId\030\t \001(\003\022\016\n\006dea"
    "lId\030\n \001(\003\022\014\n\004size\030\013 \001(\005\022\022\n\ndeviceType\030\014 "
    "\001(\t\022\023\n\013situationId\030\r \001(\005\022\020\n\010need_poi\030\016 \001"
    "(\005\022\017\n\007poi_num\030\017 \001(\005\022\020\n\010baidu_id\030\020 \001(\t\022\024\n"
    "\014targetAreaId\030\021 \001(\003\022\020\n\010keywords\030\022 \001(\t\022\020\n"
    "\010str_catg\030\023 \001(\t\022\023\n\013str_subcatg\030\024 \001(\t\022\023\n\013"
    "str_thdcatg\030\025 \001(\t\022\025\n\rstr_shop_dist\030\026 \001(\t"
    "\022\026\n\016str_shop_range\030\027 \001(\t\022\026\n\016qrw_str_poi_"
    "id\030\030 \001(\t\022\030\n\020qrw_str_brand_id\030\031 \001(\t\022\027\n\017qr"
    "w_str_thdcatg\030\032 \001(\t\022\027\n\017qrw_str_subcatg\030\033"
    " \001(\t\022\024\n\014qrw_str_catg\030\034 \001(\t\022\024\n\014qrw_str_ci"
    "ty\030\035 \001(\t\022\024\n\014qrw_str_dist\030\036 \001(\t\022\025\n\rqrw_st"
    "r_range\030\037 \001(\t\022\016\n\006client\030  \001(\005\022\023\n\013channel"
    "Type\030! \001(\005\022\020\n\010startDay\030\" \001(\005\022\017\n\007daySize\030"
    "# \001(\005\022\020\n\010dealSize\030$ \001(\005\022\025\n\rstr_site_list"
    "\030% \001(\t\022\017\n\007eventId\030& \001(\005\022\016\n\006recDay\030\' \001(\003\022"
    "\017\n\007dealPos\030( \001(\003\"\210\001\n\017RPResultPOIItem\022\r\n\005"
    "poiid\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\020\n\010dis"
    "tance\030\004 \001(\001\022\017\n\007poiname\030\005 \001(\t\022\017\n\007address\030"
    "\006 \001(\t\022\013\n\003tel\030\007 \001(\t\022\017\n\007rangeid\030\010 \001(\t\"\332\006\n\014"
    "RPResultItem\022\016\n\006dealId\030\001 \001(\003\022\016\n\006weight\030\002"
    " \001(\001\022\024\n\014rec_strategy\030\003 \001(\005\022\016\n\006reason\030\004 \001"
    "(\t\022\021\n\tifvirtual\030\005 \001(\005\022\r\n\005image\030\006 \001(\t\022\022\n\n"
    "tiny_image\030\007 \001(\t\022\021\n\tmid_image\030\010 \001(\t\022\026\n\016b"
    "usiness_title\030\t \001(\t\022\024\n\014medium_title\030\n \001("
    "\t\022\021\n\tmin_title\030\013 \001(\t\022\030\n\020title_high_price"
    "\030\014 \001(\t\022\021\n\tprice_ori\030\r \001(\005\022\025\n\rprice_curre"
    "nt\030\016 \001(\005\022\014\n\004tags\030\017 \001(\t\022\016\n\006is_new\030\020 \001(\005\022\020"
    "\n\010is_flush\030\021 \001(\005\022\026\n\016is_reservation\030\022 \001(\005"
    "\022\022\n\nsale_count\030\023 \001(\005\022\014\n\004type\030\024 \001(\005\022\026\n\016pa"
    "y_start_time\030\025 \001(\005\022\024\n\014pay_end_time\030\026 \001(\005"
    "\022\027\n\017deal_start_time\030\027 \001(\005\022\030\n\020deal_expire"
    "_time\030\030 \001(\005\022\020\n\010city_num\030\031 \001(\005\0220\n\003poi\030\032 \003"
    "(\0132#.lbs.da.openservice.RPResultPOIItem\022"
    "\017\n\007poi_num\030\033 \001(\005\022\r\n\005range\030\034 \001(\t\022\r\n\005score"
    "\030\035 \001(\005\022\023\n\013comment_num\030\036 \001(\005\022\017\n\007tinyurl\030\037"
    " \001(\t\022\023\n\013group_title\030  \001(\t\022\022\n\ngroup_type\030"
    "! \001(\005\0224\n\ngroup_list\030\" \003(\0132 .lbs.da.opens"
    "ervice.RPResultItem\022\013\n\003day\030# \001(\005\022\031\n\021bn_r"
    "p_svr_exp_ids\030$ \001(\t\022\017\n\007pushNum\030% \001(\005\022:\n\020"
    "bn_rp_svr_result\030& \003(\0132 .lbs.da.openserv"
    "ice.RPResultItem\"\261\002\n\020RPCommonResponse\022\030\n"
    "\020bn_rp_svr_errinf\030\001 \001(\t\022\027\n\017bn_rp_svr_err"
    "no\030\002 \001(\005\022\031\n\021bn_rp_svr_exp_ids\030\003 \001(\t\022\r\n\005l"
    "ogId\030\004 \001(\t\022\031\n\021bn_rp_svr_rec_num\030\005 \001(\005\022:\n"
    "\020bn_rp_svr_result\030\006 \003(\0132 .lbs.da.openser"
    "vice.RPResultItem\022\036\n\026bn_rp_svr_nresult_f"
    "lag\030\007 \001(\005\022\027\n\017bn_rp_svr_title\030\010 \001(\t\022\032\n\022bn"
    "_rp_svr_subtitle\030\t \001(\t\022\024\n\014gift_cart_id\030\n"
    " \001(\tB\002H\001", 2168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rp.proto", &protobuf_RegisterTypes);
  RPCommonRequest::default_instance_ = new RPCommonRequest();
  RPResultPOIItem::default_instance_ = new RPResultPOIItem();
  RPResultItem::default_instance_ = new RPResultItem();
  RPCommonResponse::default_instance_ = new RPCommonResponse();
  RPCommonRequest::default_instance_->InitAsDefaultInstance();
  RPResultPOIItem::default_instance_->InitAsDefaultInstance();
  RPResultItem::default_instance_->InitAsDefaultInstance();
  RPCommonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rp_2eproto {
  StaticDescriptorInitializer_rp_2eproto() {
    protobuf_AddDesc_rp_2eproto();
  }
} static_descriptor_initializer_rp_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RPCommonRequest::kHeaderFieldNumber;
const int RPCommonRequest::kProviderFieldNumber;
const int RPCommonRequest::kLogIdFieldNumber;
const int RPCommonRequest::kUserIDFieldNumber;
const int RPCommonRequest::kCuidFieldNumber;
const int RPCommonRequest::kCoorSysFieldNumber;
const int RPCommonRequest::kXFieldNumber;
const int RPCommonRequest::kYFieldNumber;
const int RPCommonRequest::kAreaIdFieldNumber;
const int RPCommonRequest::kDealIdFieldNumber;
const int RPCommonRequest::kSizeFieldNumber;
const int RPCommonRequest::kDeviceTypeFieldNumber;
const int RPCommonRequest::kSituationIdFieldNumber;
const int RPCommonRequest::kNeedPoiFieldNumber;
const int RPCommonRequest::kPoiNumFieldNumber;
const int RPCommonRequest::kBaiduIdFieldNumber;
const int RPCommonRequest::kTargetAreaIdFieldNumber;
const int RPCommonRequest::kKeywordsFieldNumber;
const int RPCommonRequest::kStrCatgFieldNumber;
const int RPCommonRequest::kStrSubcatgFieldNumber;
const int RPCommonRequest::kStrThdcatgFieldNumber;
const int RPCommonRequest::kStrShopDistFieldNumber;
const int RPCommonRequest::kStrShopRangeFieldNumber;
const int RPCommonRequest::kQrwStrPoiIdFieldNumber;
const int RPCommonRequest::kQrwStrBrandIdFieldNumber;
const int RPCommonRequest::kQrwStrThdcatgFieldNumber;
const int RPCommonRequest::kQrwStrSubcatgFieldNumber;
const int RPCommonRequest::kQrwStrCatgFieldNumber;
const int RPCommonRequest::kQrwStrCityFieldNumber;
const int RPCommonRequest::kQrwStrDistFieldNumber;
const int RPCommonRequest::kQrwStrRangeFieldNumber;
const int RPCommonRequest::kClientFieldNumber;
const int RPCommonRequest::kChannelTypeFieldNumber;
const int RPCommonRequest::kStartDayFieldNumber;
const int RPCommonRequest::kDaySizeFieldNumber;
const int RPCommonRequest::kDealSizeFieldNumber;
const int RPCommonRequest::kStrSiteListFieldNumber;
const int RPCommonRequest::kEventIdFieldNumber;
const int RPCommonRequest::kRecDayFieldNumber;
const int RPCommonRequest::kDealPosFieldNumber;
#endif  // !_MSC_VER

RPCommonRequest::RPCommonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCommonRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

RPCommonRequest::RPCommonRequest(const RPCommonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCommonRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coor_sys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  areaid_ = GOOGLE_LONGLONG(0);
  dealid_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  devicetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  situationid_ = 0;
  need_poi_ = 0;
  poi_num_ = 0;
  baidu_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetareaid_ = GOOGLE_LONGLONG(0);
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_catg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_subcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_thdcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_shop_dist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_shop_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_poi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_brand_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_thdcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_subcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_catg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_dist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrw_str_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ = 0;
  channeltype_ = 0;
  startday_ = 0;
  daysize_ = 0;
  dealsize_ = 0;
  str_site_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventid_ = 0;
  recday_ = GOOGLE_LONGLONG(0);
  dealpos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCommonRequest::~RPCommonRequest() {
  SharedDtor();
}

void RPCommonRequest::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    delete logid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (coor_sys_ != &::google::protobuf::internal::kEmptyString) {
    delete coor_sys_;
  }
  if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetype_;
  }
  if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
    delete baidu_id_;
  }
  if (keywords_ != &::google::protobuf::internal::kEmptyString) {
    delete keywords_;
  }
  if (str_catg_ != &::google::protobuf::internal::kEmptyString) {
    delete str_catg_;
  }
  if (str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete str_subcatg_;
  }
  if (str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete str_thdcatg_;
  }
  if (str_shop_dist_ != &::google::protobuf::internal::kEmptyString) {
    delete str_shop_dist_;
  }
  if (str_shop_range_ != &::google::protobuf::internal::kEmptyString) {
    delete str_shop_range_;
  }
  if (qrw_str_poi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_poi_id_;
  }
  if (qrw_str_brand_id_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_brand_id_;
  }
  if (qrw_str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_thdcatg_;
  }
  if (qrw_str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_subcatg_;
  }
  if (qrw_str_catg_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_catg_;
  }
  if (qrw_str_city_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_city_;
  }
  if (qrw_str_dist_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_dist_;
  }
  if (qrw_str_range_ != &::google::protobuf::internal::kEmptyString) {
    delete qrw_str_range_;
  }
  if (str_site_list_ != &::google::protobuf::internal::kEmptyString) {
    delete str_site_list_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void RPCommonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCommonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCommonRequest_descriptor_;
}

const RPCommonRequest& RPCommonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rp_2eproto();  return *default_instance_;
}

RPCommonRequest* RPCommonRequest::default_instance_ = NULL;

RPCommonRequest* RPCommonRequest::New() const {
  return new RPCommonRequest;
}

void RPCommonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::kEmptyString) {
        logid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_coor_sys()) {
      if (coor_sys_ != &::google::protobuf::internal::kEmptyString) {
        coor_sys_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    areaid_ = GOOGLE_LONGLONG(0);
    dealid_ = GOOGLE_LONGLONG(0);
    size_ = 0;
    if (has_devicetype()) {
      if (devicetype_ != &::google::protobuf::internal::kEmptyString) {
        devicetype_->clear();
      }
    }
    situationid_ = 0;
    need_poi_ = 0;
    poi_num_ = 0;
    if (has_baidu_id()) {
      if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
        baidu_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    targetareaid_ = GOOGLE_LONGLONG(0);
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::kEmptyString) {
        keywords_->clear();
      }
    }
    if (has_str_catg()) {
      if (str_catg_ != &::google::protobuf::internal::kEmptyString) {
        str_catg_->clear();
      }
    }
    if (has_str_subcatg()) {
      if (str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
        str_subcatg_->clear();
      }
    }
    if (has_str_thdcatg()) {
      if (str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
        str_thdcatg_->clear();
      }
    }
    if (has_str_shop_dist()) {
      if (str_shop_dist_ != &::google::protobuf::internal::kEmptyString) {
        str_shop_dist_->clear();
      }
    }
    if (has_str_shop_range()) {
      if (str_shop_range_ != &::google::protobuf::internal::kEmptyString) {
        str_shop_range_->clear();
      }
    }
    if (has_qrw_str_poi_id()) {
      if (qrw_str_poi_id_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_poi_id_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_qrw_str_brand_id()) {
      if (qrw_str_brand_id_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_brand_id_->clear();
      }
    }
    if (has_qrw_str_thdcatg()) {
      if (qrw_str_thdcatg_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_thdcatg_->clear();
      }
    }
    if (has_qrw_str_subcatg()) {
      if (qrw_str_subcatg_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_subcatg_->clear();
      }
    }
    if (has_qrw_str_catg()) {
      if (qrw_str_catg_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_catg_->clear();
      }
    }
    if (has_qrw_str_city()) {
      if (qrw_str_city_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_city_->clear();
      }
    }
    if (has_qrw_str_dist()) {
      if (qrw_str_dist_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_dist_->clear();
      }
    }
    if (has_qrw_str_range()) {
      if (qrw_str_range_ != &::google::protobuf::internal::kEmptyString) {
        qrw_str_range_->clear();
      }
    }
    client_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    channeltype_ = 0;
    startday_ = 0;
    daysize_ = 0;
    dealsize_ = 0;
    if (has_str_site_list()) {
      if (str_site_list_ != &::google::protobuf::internal::kEmptyString) {
        str_site_list_->clear();
      }
    }
    eventid_ = 0;
    recday_ = GOOGLE_LONGLONG(0);
    dealpos_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCommonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_provider;
        break;
      }
      
      // optional string provider = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logId;
        break;
      }
      
      // optional string logId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userID;
        break;
      }
      
      // optional string userID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_coor_sys;
        break;
      }
      
      // optional string coor_sys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coor_sys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coor_sys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coor_sys().data(), this->coor_sys().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_x;
        break;
      }
      
      // optional double x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_y;
        break;
      }
      
      // optional double y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_areaId;
        break;
      }
      
      // optional int64 areaId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dealId;
        break;
      }
      
      // optional int64 dealId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_size;
        break;
      }
      
      // optional int32 size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_deviceType;
        break;
      }
      
      // optional string deviceType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_situationId;
        break;
      }
      
      // optional int32 situationId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &situationid_)));
          set_has_situationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_need_poi;
        break;
      }
      
      // optional int32 need_poi = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_poi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_poi_)));
          set_has_need_poi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_poi_num;
        break;
      }
      
      // optional int32 poi_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poi_num_)));
          set_has_poi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_baidu_id;
        break;
      }
      
      // optional string baidu_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baidu_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->baidu_id().data(), this->baidu_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_targetAreaId;
        break;
      }
      
      // optional int64 targetAreaId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetAreaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetareaid_)));
          set_has_targetareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_keywords;
        break;
      }
      
      // optional string keywords = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_str_catg;
        break;
      }
      
      // optional string str_catg = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_catg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_catg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_catg().data(), this->str_catg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_str_subcatg;
        break;
      }
      
      // optional string str_subcatg = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_subcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_subcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_subcatg().data(), this->str_subcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_str_thdcatg;
        break;
      }
      
      // optional string str_thdcatg = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_thdcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_thdcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_thdcatg().data(), this->str_thdcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_str_shop_dist;
        break;
      }
      
      // optional string str_shop_dist = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_shop_dist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_shop_dist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_shop_dist().data(), this->str_shop_dist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_str_shop_range;
        break;
      }
      
      // optional string str_shop_range = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_shop_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_shop_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_shop_range().data(), this->str_shop_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_qrw_str_poi_id;
        break;
      }
      
      // optional string qrw_str_poi_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_poi_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_poi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_poi_id().data(), this->qrw_str_poi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_qrw_str_brand_id;
        break;
      }
      
      // optional string qrw_str_brand_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_brand_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_brand_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_brand_id().data(), this->qrw_str_brand_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_qrw_str_thdcatg;
        break;
      }
      
      // optional string qrw_str_thdcatg = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_thdcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_thdcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_thdcatg().data(), this->qrw_str_thdcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_qrw_str_subcatg;
        break;
      }
      
      // optional string qrw_str_subcatg = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_subcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_subcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_subcatg().data(), this->qrw_str_subcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_qrw_str_catg;
        break;
      }
      
      // optional string qrw_str_catg = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_catg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_catg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_catg().data(), this->qrw_str_catg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_qrw_str_city;
        break;
      }
      
      // optional string qrw_str_city = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_city().data(), this->qrw_str_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_qrw_str_dist;
        break;
      }
      
      // optional string qrw_str_dist = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_dist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_dist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_dist().data(), this->qrw_str_dist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_qrw_str_range;
        break;
      }
      
      // optional string qrw_str_range = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrw_str_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrw_str_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrw_str_range().data(), this->qrw_str_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_client;
        break;
      }
      
      // optional int32 client = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_channelType;
        break;
      }
      
      // optional int32 channelType = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
          set_has_channeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_startDay;
        break;
      }
      
      // optional int32 startDay = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_daySize;
        break;
      }
      
      // optional int32 daySize = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daysize_)));
          set_has_daysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_dealSize;
        break;
      }
      
      // optional int32 dealSize = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealsize_)));
          set_has_dealsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_str_site_list;
        break;
      }
      
      // optional string str_site_list = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_site_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_site_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_site_list().data(), this->str_site_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_eventId;
        break;
      }
      
      // optional int32 eventId = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_recDay;
        break;
      }
      
      // optional int64 recDay = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recday_)));
          set_has_recday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_dealPos;
        break;
      }
      
      // optional int64 dealPos = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dealpos_)));
          set_has_dealpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCommonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional string provider = 2;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->provider(), output);
  }
  
  // optional string logId = 3;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logid(), output);
  }
  
  // optional string userID = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // optional string cuid = 5;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cuid(), output);
  }
  
  // optional string coor_sys = 6;
  if (has_coor_sys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coor_sys().data(), this->coor_sys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->coor_sys(), output);
  }
  
  // optional double x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->x(), output);
  }
  
  // optional double y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->y(), output);
  }
  
  // optional int64 areaId = 9;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->areaid(), output);
  }
  
  // optional int64 dealId = 10;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->dealid(), output);
  }
  
  // optional int32 size = 11;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->size(), output);
  }
  
  // optional string deviceType = 12;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->devicetype(), output);
  }
  
  // optional int32 situationId = 13;
  if (has_situationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->situationid(), output);
  }
  
  // optional int32 need_poi = 14;
  if (has_need_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->need_poi(), output);
  }
  
  // optional int32 poi_num = 15;
  if (has_poi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->poi_num(), output);
  }
  
  // optional string baidu_id = 16;
  if (has_baidu_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baidu_id().data(), this->baidu_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->baidu_id(), output);
  }
  
  // optional int64 targetAreaId = 17;
  if (has_targetareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->targetareaid(), output);
  }
  
  // optional string keywords = 18;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->keywords(), output);
  }
  
  // optional string str_catg = 19;
  if (has_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_catg().data(), this->str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->str_catg(), output);
  }
  
  // optional string str_subcatg = 20;
  if (has_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_subcatg().data(), this->str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->str_subcatg(), output);
  }
  
  // optional string str_thdcatg = 21;
  if (has_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_thdcatg().data(), this->str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->str_thdcatg(), output);
  }
  
  // optional string str_shop_dist = 22;
  if (has_str_shop_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_dist().data(), this->str_shop_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->str_shop_dist(), output);
  }
  
  // optional string str_shop_range = 23;
  if (has_str_shop_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_range().data(), this->str_shop_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->str_shop_range(), output);
  }
  
  // optional string qrw_str_poi_id = 24;
  if (has_qrw_str_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_poi_id().data(), this->qrw_str_poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->qrw_str_poi_id(), output);
  }
  
  // optional string qrw_str_brand_id = 25;
  if (has_qrw_str_brand_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_brand_id().data(), this->qrw_str_brand_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->qrw_str_brand_id(), output);
  }
  
  // optional string qrw_str_thdcatg = 26;
  if (has_qrw_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_thdcatg().data(), this->qrw_str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->qrw_str_thdcatg(), output);
  }
  
  // optional string qrw_str_subcatg = 27;
  if (has_qrw_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_subcatg().data(), this->qrw_str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->qrw_str_subcatg(), output);
  }
  
  // optional string qrw_str_catg = 28;
  if (has_qrw_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_catg().data(), this->qrw_str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->qrw_str_catg(), output);
  }
  
  // optional string qrw_str_city = 29;
  if (has_qrw_str_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_city().data(), this->qrw_str_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->qrw_str_city(), output);
  }
  
  // optional string qrw_str_dist = 30;
  if (has_qrw_str_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_dist().data(), this->qrw_str_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->qrw_str_dist(), output);
  }
  
  // optional string qrw_str_range = 31;
  if (has_qrw_str_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_range().data(), this->qrw_str_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->qrw_str_range(), output);
  }
  
  // optional int32 client = 32;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->client(), output);
  }
  
  // optional int32 channelType = 33;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->channeltype(), output);
  }
  
  // optional int32 startDay = 34;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->startday(), output);
  }
  
  // optional int32 daySize = 35;
  if (has_daysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->daysize(), output);
  }
  
  // optional int32 dealSize = 36;
  if (has_dealsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->dealsize(), output);
  }
  
  // optional string str_site_list = 37;
  if (has_str_site_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_site_list().data(), this->str_site_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->str_site_list(), output);
  }
  
  // optional int32 eventId = 38;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->eventid(), output);
  }
  
  // optional int64 recDay = 39;
  if (has_recday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->recday(), output);
  }
  
  // optional int64 dealPos = 40;
  if (has_dealpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->dealpos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCommonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional string provider = 2;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->provider(), target);
  }
  
  // optional string logId = 3;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logid(), target);
  }
  
  // optional string userID = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // optional string cuid = 5;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cuid(), target);
  }
  
  // optional string coor_sys = 6;
  if (has_coor_sys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coor_sys().data(), this->coor_sys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->coor_sys(), target);
  }
  
  // optional double x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->x(), target);
  }
  
  // optional double y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->y(), target);
  }
  
  // optional int64 areaId = 9;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->areaid(), target);
  }
  
  // optional int64 dealId = 10;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->dealid(), target);
  }
  
  // optional int32 size = 11;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->size(), target);
  }
  
  // optional string deviceType = 12;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->devicetype(), target);
  }
  
  // optional int32 situationId = 13;
  if (has_situationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->situationid(), target);
  }
  
  // optional int32 need_poi = 14;
  if (has_need_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->need_poi(), target);
  }
  
  // optional int32 poi_num = 15;
  if (has_poi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->poi_num(), target);
  }
  
  // optional string baidu_id = 16;
  if (has_baidu_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baidu_id().data(), this->baidu_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->baidu_id(), target);
  }
  
  // optional int64 targetAreaId = 17;
  if (has_targetareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->targetareaid(), target);
  }
  
  // optional string keywords = 18;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->keywords(), target);
  }
  
  // optional string str_catg = 19;
  if (has_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_catg().data(), this->str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->str_catg(), target);
  }
  
  // optional string str_subcatg = 20;
  if (has_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_subcatg().data(), this->str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->str_subcatg(), target);
  }
  
  // optional string str_thdcatg = 21;
  if (has_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_thdcatg().data(), this->str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->str_thdcatg(), target);
  }
  
  // optional string str_shop_dist = 22;
  if (has_str_shop_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_dist().data(), this->str_shop_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->str_shop_dist(), target);
  }
  
  // optional string str_shop_range = 23;
  if (has_str_shop_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_range().data(), this->str_shop_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->str_shop_range(), target);
  }
  
  // optional string qrw_str_poi_id = 24;
  if (has_qrw_str_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_poi_id().data(), this->qrw_str_poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->qrw_str_poi_id(), target);
  }
  
  // optional string qrw_str_brand_id = 25;
  if (has_qrw_str_brand_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_brand_id().data(), this->qrw_str_brand_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->qrw_str_brand_id(), target);
  }
  
  // optional string qrw_str_thdcatg = 26;
  if (has_qrw_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_thdcatg().data(), this->qrw_str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->qrw_str_thdcatg(), target);
  }
  
  // optional string qrw_str_subcatg = 27;
  if (has_qrw_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_subcatg().data(), this->qrw_str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->qrw_str_subcatg(), target);
  }
  
  // optional string qrw_str_catg = 28;
  if (has_qrw_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_catg().data(), this->qrw_str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->qrw_str_catg(), target);
  }
  
  // optional string qrw_str_city = 29;
  if (has_qrw_str_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_city().data(), this->qrw_str_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->qrw_str_city(), target);
  }
  
  // optional string qrw_str_dist = 30;
  if (has_qrw_str_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_dist().data(), this->qrw_str_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->qrw_str_dist(), target);
  }
  
  // optional string qrw_str_range = 31;
  if (has_qrw_str_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrw_str_range().data(), this->qrw_str_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->qrw_str_range(), target);
  }
  
  // optional int32 client = 32;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->client(), target);
  }
  
  // optional int32 channelType = 33;
  if (has_channeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->channeltype(), target);
  }
  
  // optional int32 startDay = 34;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->startday(), target);
  }
  
  // optional int32 daySize = 35;
  if (has_daysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->daysize(), target);
  }
  
  // optional int32 dealSize = 36;
  if (has_dealsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->dealsize(), target);
  }
  
  // optional string str_site_list = 37;
  if (has_str_site_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_site_list().data(), this->str_site_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->str_site_list(), target);
  }
  
  // optional int32 eventId = 38;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->eventid(), target);
  }
  
  // optional int64 recDay = 39;
  if (has_recday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->recday(), target);
  }
  
  // optional int64 dealPos = 40;
  if (has_dealpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->dealpos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCommonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string provider = 2;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }
    
    // optional string logId = 3;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }
    
    // optional string userID = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string cuid = 5;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional string coor_sys = 6;
    if (has_coor_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coor_sys());
    }
    
    // optional double x = 7;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 8;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 areaId = 9;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->areaid());
    }
    
    // optional int64 dealId = 10;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dealid());
    }
    
    // optional int32 size = 11;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional string deviceType = 12;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }
    
    // optional int32 situationId = 13;
    if (has_situationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->situationid());
    }
    
    // optional int32 need_poi = 14;
    if (has_need_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_poi());
    }
    
    // optional int32 poi_num = 15;
    if (has_poi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poi_num());
    }
    
    // optional string baidu_id = 16;
    if (has_baidu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 targetAreaId = 17;
    if (has_targetareaid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetareaid());
    }
    
    // optional string keywords = 18;
    if (has_keywords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }
    
    // optional string str_catg = 19;
    if (has_str_catg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_catg());
    }
    
    // optional string str_subcatg = 20;
    if (has_str_subcatg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_subcatg());
    }
    
    // optional string str_thdcatg = 21;
    if (has_str_thdcatg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_thdcatg());
    }
    
    // optional string str_shop_dist = 22;
    if (has_str_shop_dist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_shop_dist());
    }
    
    // optional string str_shop_range = 23;
    if (has_str_shop_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_shop_range());
    }
    
    // optional string qrw_str_poi_id = 24;
    if (has_qrw_str_poi_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_poi_id());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string qrw_str_brand_id = 25;
    if (has_qrw_str_brand_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_brand_id());
    }
    
    // optional string qrw_str_thdcatg = 26;
    if (has_qrw_str_thdcatg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_thdcatg());
    }
    
    // optional string qrw_str_subcatg = 27;
    if (has_qrw_str_subcatg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_subcatg());
    }
    
    // optional string qrw_str_catg = 28;
    if (has_qrw_str_catg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_catg());
    }
    
    // optional string qrw_str_city = 29;
    if (has_qrw_str_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_city());
    }
    
    // optional string qrw_str_dist = 30;
    if (has_qrw_str_dist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_dist());
    }
    
    // optional string qrw_str_range = 31;
    if (has_qrw_str_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrw_str_range());
    }
    
    // optional int32 client = 32;
    if (has_client()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 channelType = 33;
    if (has_channeltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channeltype());
    }
    
    // optional int32 startDay = 34;
    if (has_startday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startday());
    }
    
    // optional int32 daySize = 35;
    if (has_daysize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daysize());
    }
    
    // optional int32 dealSize = 36;
    if (has_dealsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealsize());
    }
    
    // optional string str_site_list = 37;
    if (has_str_site_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_site_list());
    }
    
    // optional int32 eventId = 38;
    if (has_eventid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }
    
    // optional int64 recDay = 39;
    if (has_recday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recday());
    }
    
    // optional int64 dealPos = 40;
    if (has_dealpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dealpos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCommonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCommonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCommonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCommonRequest::MergeFrom(const RPCommonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_coor_sys()) {
      set_coor_sys(from.coor_sys());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_situationid()) {
      set_situationid(from.situationid());
    }
    if (from.has_need_poi()) {
      set_need_poi(from.need_poi());
    }
    if (from.has_poi_num()) {
      set_poi_num(from.poi_num());
    }
    if (from.has_baidu_id()) {
      set_baidu_id(from.baidu_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_targetareaid()) {
      set_targetareaid(from.targetareaid());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_str_catg()) {
      set_str_catg(from.str_catg());
    }
    if (from.has_str_subcatg()) {
      set_str_subcatg(from.str_subcatg());
    }
    if (from.has_str_thdcatg()) {
      set_str_thdcatg(from.str_thdcatg());
    }
    if (from.has_str_shop_dist()) {
      set_str_shop_dist(from.str_shop_dist());
    }
    if (from.has_str_shop_range()) {
      set_str_shop_range(from.str_shop_range());
    }
    if (from.has_qrw_str_poi_id()) {
      set_qrw_str_poi_id(from.qrw_str_poi_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_qrw_str_brand_id()) {
      set_qrw_str_brand_id(from.qrw_str_brand_id());
    }
    if (from.has_qrw_str_thdcatg()) {
      set_qrw_str_thdcatg(from.qrw_str_thdcatg());
    }
    if (from.has_qrw_str_subcatg()) {
      set_qrw_str_subcatg(from.qrw_str_subcatg());
    }
    if (from.has_qrw_str_catg()) {
      set_qrw_str_catg(from.qrw_str_catg());
    }
    if (from.has_qrw_str_city()) {
      set_qrw_str_city(from.qrw_str_city());
    }
    if (from.has_qrw_str_dist()) {
      set_qrw_str_dist(from.qrw_str_dist());
    }
    if (from.has_qrw_str_range()) {
      set_qrw_str_range(from.qrw_str_range());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_startday()) {
      set_startday(from.startday());
    }
    if (from.has_daysize()) {
      set_daysize(from.daysize());
    }
    if (from.has_dealsize()) {
      set_dealsize(from.dealsize());
    }
    if (from.has_str_site_list()) {
      set_str_site_list(from.str_site_list());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_recday()) {
      set_recday(from.recday());
    }
    if (from.has_dealpos()) {
      set_dealpos(from.dealpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCommonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCommonRequest::CopyFrom(const RPCommonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCommonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RPCommonRequest::Swap(RPCommonRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(provider_, other->provider_);
    std::swap(logid_, other->logid_);
    std::swap(userid_, other->userid_);
    std::swap(cuid_, other->cuid_);
    std::swap(coor_sys_, other->coor_sys_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(areaid_, other->areaid_);
    std::swap(dealid_, other->dealid_);
    std::swap(size_, other->size_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(situationid_, other->situationid_);
    std::swap(need_poi_, other->need_poi_);
    std::swap(poi_num_, other->poi_num_);
    std::swap(baidu_id_, other->baidu_id_);
    std::swap(targetareaid_, other->targetareaid_);
    std::swap(keywords_, other->keywords_);
    std::swap(str_catg_, other->str_catg_);
    std::swap(str_subcatg_, other->str_subcatg_);
    std::swap(str_thdcatg_, other->str_thdcatg_);
    std::swap(str_shop_dist_, other->str_shop_dist_);
    std::swap(str_shop_range_, other->str_shop_range_);
    std::swap(qrw_str_poi_id_, other->qrw_str_poi_id_);
    std::swap(qrw_str_brand_id_, other->qrw_str_brand_id_);
    std::swap(qrw_str_thdcatg_, other->qrw_str_thdcatg_);
    std::swap(qrw_str_subcatg_, other->qrw_str_subcatg_);
    std::swap(qrw_str_catg_, other->qrw_str_catg_);
    std::swap(qrw_str_city_, other->qrw_str_city_);
    std::swap(qrw_str_dist_, other->qrw_str_dist_);
    std::swap(qrw_str_range_, other->qrw_str_range_);
    std::swap(client_, other->client_);
    std::swap(channeltype_, other->channeltype_);
    std::swap(startday_, other->startday_);
    std::swap(daysize_, other->daysize_);
    std::swap(dealsize_, other->dealsize_);
    std::swap(str_site_list_, other->str_site_list_);
    std::swap(eventid_, other->eventid_);
    std::swap(recday_, other->recday_);
    std::swap(dealpos_, other->dealpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCommonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCommonRequest_descriptor_;
  metadata.reflection = RPCommonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPResultPOIItem::kPoiidFieldNumber;
const int RPResultPOIItem::kXFieldNumber;
const int RPResultPOIItem::kYFieldNumber;
const int RPResultPOIItem::kDistanceFieldNumber;
const int RPResultPOIItem::kPoinameFieldNumber;
const int RPResultPOIItem::kAddressFieldNumber;
const int RPResultPOIItem::kTelFieldNumber;
const int RPResultPOIItem::kRangeidFieldNumber;
#endif  // !_MSC_VER

RPResultPOIItem::RPResultPOIItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPResultPOIItem::InitAsDefaultInstance() {
}

RPResultPOIItem::RPResultPOIItem(const RPResultPOIItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPResultPOIItem::SharedCtor() {
  _cached_size_ = 0;
  poiid_ = 0;
  x_ = 0;
  y_ = 0;
  distance_ = 0;
  poiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPResultPOIItem::~RPResultPOIItem() {
  SharedDtor();
}

void RPResultPOIItem::SharedDtor() {
  if (poiname_ != &::google::protobuf::internal::kEmptyString) {
    delete poiname_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (rangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete rangeid_;
  }
  if (this != default_instance_) {
  }
}

void RPResultPOIItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPResultPOIItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPResultPOIItem_descriptor_;
}

const RPResultPOIItem& RPResultPOIItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rp_2eproto();  return *default_instance_;
}

RPResultPOIItem* RPResultPOIItem::default_instance_ = NULL;

RPResultPOIItem* RPResultPOIItem::New() const {
  return new RPResultPOIItem;
}

void RPResultPOIItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poiid_ = 0;
    x_ = 0;
    y_ = 0;
    distance_ = 0;
    if (has_poiname()) {
      if (poiname_ != &::google::protobuf::internal::kEmptyString) {
        poiname_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
    if (has_rangeid()) {
      if (rangeid_ != &::google::protobuf::internal::kEmptyString) {
        rangeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPResultPOIItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 poiid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poiid_)));
          set_has_poiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // optional double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // optional double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_distance;
        break;
      }
      
      // optional double distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poiname;
        break;
      }
      
      // optional string poiname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poiname().data(), this->poiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }
      
      // optional string address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tel;
        break;
      }
      
      // optional string tel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rangeid;
        break;
      }
      
      // optional string rangeid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rangeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rangeid().data(), this->rangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPResultPOIItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 poiid = 1;
  if (has_poiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poiid(), output);
  }
  
  // optional double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // optional double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  // optional double distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->distance(), output);
  }
  
  // optional string poiname = 5;
  if (has_poiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiname().data(), this->poiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poiname(), output);
  }
  
  // optional string address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->address(), output);
  }
  
  // optional string tel = 7;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tel(), output);
  }
  
  // optional string rangeid = 8;
  if (has_rangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rangeid().data(), this->rangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rangeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPResultPOIItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 poiid = 1;
  if (has_poiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poiid(), target);
  }
  
  // optional double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // optional double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  // optional double distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->distance(), target);
  }
  
  // optional string poiname = 5;
  if (has_poiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiname().data(), this->poiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poiname(), target);
  }
  
  // optional string address = 6;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }
  
  // optional string tel = 7;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tel(), target);
  }
  
  // optional string rangeid = 8;
  if (has_rangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rangeid().data(), this->rangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rangeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPResultPOIItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 poiid = 1;
    if (has_poiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poiid());
    }
    
    // optional double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double distance = 4;
    if (has_distance()) {
      total_size += 1 + 8;
    }
    
    // optional string poiname = 5;
    if (has_poiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poiname());
    }
    
    // optional string address = 6;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional string tel = 7;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }
    
    // optional string rangeid = 8;
    if (has_rangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rangeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPResultPOIItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPResultPOIItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPResultPOIItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPResultPOIItem::MergeFrom(const RPResultPOIItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poiid()) {
      set_poiid(from.poiid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_poiname()) {
      set_poiname(from.poiname());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_rangeid()) {
      set_rangeid(from.rangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPResultPOIItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPResultPOIItem::CopyFrom(const RPResultPOIItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPResultPOIItem::IsInitialized() const {
  
  return true;
}

void RPResultPOIItem::Swap(RPResultPOIItem* other) {
  if (other != this) {
    std::swap(poiid_, other->poiid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(distance_, other->distance_);
    std::swap(poiname_, other->poiname_);
    std::swap(address_, other->address_);
    std::swap(tel_, other->tel_);
    std::swap(rangeid_, other->rangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPResultPOIItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPResultPOIItem_descriptor_;
  metadata.reflection = RPResultPOIItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPResultItem::kDealIdFieldNumber;
const int RPResultItem::kWeightFieldNumber;
const int RPResultItem::kRecStrategyFieldNumber;
const int RPResultItem::kReasonFieldNumber;
const int RPResultItem::kIfvirtualFieldNumber;
const int RPResultItem::kImageFieldNumber;
const int RPResultItem::kTinyImageFieldNumber;
const int RPResultItem::kMidImageFieldNumber;
const int RPResultItem::kBusinessTitleFieldNumber;
const int RPResultItem::kMediumTitleFieldNumber;
const int RPResultItem::kMinTitleFieldNumber;
const int RPResultItem::kTitleHighPriceFieldNumber;
const int RPResultItem::kPriceOriFieldNumber;
const int RPResultItem::kPriceCurrentFieldNumber;
const int RPResultItem::kTagsFieldNumber;
const int RPResultItem::kIsNewFieldNumber;
const int RPResultItem::kIsFlushFieldNumber;
const int RPResultItem::kIsReservationFieldNumber;
const int RPResultItem::kSaleCountFieldNumber;
const int RPResultItem::kTypeFieldNumber;
const int RPResultItem::kPayStartTimeFieldNumber;
const int RPResultItem::kPayEndTimeFieldNumber;
const int RPResultItem::kDealStartTimeFieldNumber;
const int RPResultItem::kDealExpireTimeFieldNumber;
const int RPResultItem::kCityNumFieldNumber;
const int RPResultItem::kPoiFieldNumber;
const int RPResultItem::kPoiNumFieldNumber;
const int RPResultItem::kRangeFieldNumber;
const int RPResultItem::kScoreFieldNumber;
const int RPResultItem::kCommentNumFieldNumber;
const int RPResultItem::kTinyurlFieldNumber;
const int RPResultItem::kGroupTitleFieldNumber;
const int RPResultItem::kGroupTypeFieldNumber;
const int RPResultItem::kGroupListFieldNumber;
const int RPResultItem::kDayFieldNumber;
const int RPResultItem::kBnRpSvrExpIdsFieldNumber;
const int RPResultItem::kPushNumFieldNumber;
const int RPResultItem::kBnRpSvrResultFieldNumber;
#endif  // !_MSC_VER

RPResultItem::RPResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPResultItem::InitAsDefaultInstance() {
}

RPResultItem::RPResultItem(const RPResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPResultItem::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = GOOGLE_LONGLONG(0);
  weight_ = 0;
  rec_strategy_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifvirtual_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiny_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mid_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  business_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medium_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_high_price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ori_ = 0;
  price_current_ = 0;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_new_ = 0;
  is_flush_ = 0;
  is_reservation_ = 0;
  sale_count_ = 0;
  type_ = 0;
  pay_start_time_ = 0;
  pay_end_time_ = 0;
  deal_start_time_ = 0;
  deal_expire_time_ = 0;
  city_num_ = 0;
  poi_num_ = 0;
  range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  comment_num_ = 0;
  tinyurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_type_ = 0;
  day_ = 0;
  bn_rp_svr_exp_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pushnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPResultItem::~RPResultItem() {
  SharedDtor();
}

void RPResultItem::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (tiny_image_ != &::google::protobuf::internal::kEmptyString) {
    delete tiny_image_;
  }
  if (mid_image_ != &::google::protobuf::internal::kEmptyString) {
    delete mid_image_;
  }
  if (business_title_ != &::google::protobuf::internal::kEmptyString) {
    delete business_title_;
  }
  if (medium_title_ != &::google::protobuf::internal::kEmptyString) {
    delete medium_title_;
  }
  if (min_title_ != &::google::protobuf::internal::kEmptyString) {
    delete min_title_;
  }
  if (title_high_price_ != &::google::protobuf::internal::kEmptyString) {
    delete title_high_price_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (range_ != &::google::protobuf::internal::kEmptyString) {
    delete range_;
  }
  if (tinyurl_ != &::google::protobuf::internal::kEmptyString) {
    delete tinyurl_;
  }
  if (group_title_ != &::google::protobuf::internal::kEmptyString) {
    delete group_title_;
  }
  if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete bn_rp_svr_exp_ids_;
  }
  if (this != default_instance_) {
  }
}

void RPResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPResultItem_descriptor_;
}

const RPResultItem& RPResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rp_2eproto();  return *default_instance_;
}

RPResultItem* RPResultItem::default_instance_ = NULL;

RPResultItem* RPResultItem::New() const {
  return new RPResultItem;
}

void RPResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dealid_ = GOOGLE_LONGLONG(0);
    weight_ = 0;
    rec_strategy_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    ifvirtual_ = 0;
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    if (has_tiny_image()) {
      if (tiny_image_ != &::google::protobuf::internal::kEmptyString) {
        tiny_image_->clear();
      }
    }
    if (has_mid_image()) {
      if (mid_image_ != &::google::protobuf::internal::kEmptyString) {
        mid_image_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_business_title()) {
      if (business_title_ != &::google::protobuf::internal::kEmptyString) {
        business_title_->clear();
      }
    }
    if (has_medium_title()) {
      if (medium_title_ != &::google::protobuf::internal::kEmptyString) {
        medium_title_->clear();
      }
    }
    if (has_min_title()) {
      if (min_title_ != &::google::protobuf::internal::kEmptyString) {
        min_title_->clear();
      }
    }
    if (has_title_high_price()) {
      if (title_high_price_ != &::google::protobuf::internal::kEmptyString) {
        title_high_price_->clear();
      }
    }
    price_ori_ = 0;
    price_current_ = 0;
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    is_new_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_flush_ = 0;
    is_reservation_ = 0;
    sale_count_ = 0;
    type_ = 0;
    pay_start_time_ = 0;
    pay_end_time_ = 0;
    deal_start_time_ = 0;
    deal_expire_time_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    city_num_ = 0;
    poi_num_ = 0;
    if (has_range()) {
      if (range_ != &::google::protobuf::internal::kEmptyString) {
        range_->clear();
      }
    }
    score_ = 0;
    comment_num_ = 0;
    if (has_tinyurl()) {
      if (tinyurl_ != &::google::protobuf::internal::kEmptyString) {
        tinyurl_->clear();
      }
    }
    if (has_group_title()) {
      if (group_title_ != &::google::protobuf::internal::kEmptyString) {
        group_title_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    group_type_ = 0;
    day_ = 0;
    if (has_bn_rp_svr_exp_ids()) {
      if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
        bn_rp_svr_exp_ids_->clear();
      }
    }
    pushnum_ = 0;
  }
  poi_.Clear();
  group_list_.Clear();
  bn_rp_svr_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dealId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_weight;
        break;
      }
      
      // optional double weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rec_strategy;
        break;
      }
      
      // optional int32 rec_strategy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_strategy_)));
          set_has_rec_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }
      
      // optional string reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ifvirtual;
        break;
      }
      
      // optional int32 ifvirtual = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ifvirtual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifvirtual_)));
          set_has_ifvirtual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }
      
      // optional string image = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tiny_image;
        break;
      }
      
      // optional string tiny_image = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiny_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiny_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiny_image().data(), this->tiny_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mid_image;
        break;
      }
      
      // optional string mid_image = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mid_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mid_image().data(), this->mid_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_business_title;
        break;
      }
      
      // optional string business_title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_business_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_business_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->business_title().data(), this->business_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_medium_title;
        break;
      }
      
      // optional string medium_title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medium_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_medium_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->medium_title().data(), this->medium_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_min_title;
        break;
      }
      
      // optional string min_title = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_min_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->min_title().data(), this->min_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_title_high_price;
        break;
      }
      
      // optional string title_high_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_high_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title_high_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title_high_price().data(), this->title_high_price().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_price_ori;
        break;
      }
      
      // optional int32 price_ori = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_ori:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_ori_)));
          set_has_price_ori();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_price_current;
        break;
      }
      
      // optional int32 price_current = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_current_)));
          set_has_price_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tags;
        break;
      }
      
      // optional string tags = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_new;
        break;
      }
      
      // optional int32 is_new = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_flush;
        break;
      }
      
      // optional int32 is_flush = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_flush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_flush_)));
          set_has_is_flush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_reservation;
        break;
      }
      
      // optional int32 is_reservation = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reservation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_reservation_)));
          set_has_is_reservation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sale_count;
        break;
      }
      
      // optional int32 sale_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_count_)));
          set_has_sale_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }
      
      // optional int32 type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_pay_start_time;
        break;
      }
      
      // optional int32 pay_start_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_start_time_)));
          set_has_pay_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_pay_end_time;
        break;
      }
      
      // optional int32 pay_end_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_end_time_)));
          set_has_pay_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_deal_start_time;
        break;
      }
      
      // optional int32 deal_start_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deal_start_time_)));
          set_has_deal_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_deal_expire_time;
        break;
      }
      
      // optional int32 deal_expire_time = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deal_expire_time_)));
          set_has_deal_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_city_num;
        break;
      }
      
      // optional int32 city_num = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_num_)));
          set_has_city_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_poi;
        break;
      }
      
      // repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_poi;
        if (input->ExpectTag(216)) goto parse_poi_num;
        break;
      }
      
      // optional int32 poi_num = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poi_num_)));
          set_has_poi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_range;
        break;
      }
      
      // optional string range = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->range().data(), this->range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_score;
        break;
      }
      
      // optional int32 score = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_comment_num;
        break;
      }
      
      // optional int32 comment_num = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_num_)));
          set_has_comment_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_tinyurl;
        break;
      }
      
      // optional string tinyurl = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tinyurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tinyurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tinyurl().data(), this->tinyurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_group_title;
        break;
      }
      
      // optional string group_title = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_title().data(), this->group_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_group_type;
        break;
      }
      
      // optional int32 group_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_group_list;
        break;
      }
      
      // repeated .lbs.da.openservice.RPResultItem group_list = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_group_list;
        if (input->ExpectTag(280)) goto parse_day;
        break;
      }
      
      // optional int32 day = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_bn_rp_svr_exp_ids;
        break;
      }
      
      // optional string bn_rp_svr_exp_ids = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_exp_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_rp_svr_exp_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_pushNum;
        break;
      }
      
      // optional int32 pushNum = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pushNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pushnum_)));
          set_has_pushnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_bn_rp_svr_result;
        break;
      }
      
      // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bn_rp_svr_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_bn_rp_svr_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 dealId = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dealid(), output);
  }
  
  // optional double weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight(), output);
  }
  
  // optional int32 rec_strategy = 3;
  if (has_rec_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rec_strategy(), output);
  }
  
  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reason(), output);
  }
  
  // optional int32 ifvirtual = 5;
  if (has_ifvirtual()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifvirtual(), output);
  }
  
  // optional string image = 6;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->image(), output);
  }
  
  // optional string tiny_image = 7;
  if (has_tiny_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_image().data(), this->tiny_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tiny_image(), output);
  }
  
  // optional string mid_image = 8;
  if (has_mid_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mid_image().data(), this->mid_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mid_image(), output);
  }
  
  // optional string business_title = 9;
  if (has_business_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->business_title().data(), this->business_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->business_title(), output);
  }
  
  // optional string medium_title = 10;
  if (has_medium_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->medium_title().data(), this->medium_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->medium_title(), output);
  }
  
  // optional string min_title = 11;
  if (has_min_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_title().data(), this->min_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->min_title(), output);
  }
  
  // optional string title_high_price = 12;
  if (has_title_high_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title_high_price().data(), this->title_high_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->title_high_price(), output);
  }
  
  // optional int32 price_ori = 13;
  if (has_price_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->price_ori(), output);
  }
  
  // optional int32 price_current = 14;
  if (has_price_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->price_current(), output);
  }
  
  // optional string tags = 15;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->tags(), output);
  }
  
  // optional int32 is_new = 16;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->is_new(), output);
  }
  
  // optional int32 is_flush = 17;
  if (has_is_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_flush(), output);
  }
  
  // optional int32 is_reservation = 18;
  if (has_is_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->is_reservation(), output);
  }
  
  // optional int32 sale_count = 19;
  if (has_sale_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sale_count(), output);
  }
  
  // optional int32 type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->type(), output);
  }
  
  // optional int32 pay_start_time = 21;
  if (has_pay_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pay_start_time(), output);
  }
  
  // optional int32 pay_end_time = 22;
  if (has_pay_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->pay_end_time(), output);
  }
  
  // optional int32 deal_start_time = 23;
  if (has_deal_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->deal_start_time(), output);
  }
  
  // optional int32 deal_expire_time = 24;
  if (has_deal_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->deal_expire_time(), output);
  }
  
  // optional int32 city_num = 25;
  if (has_city_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->city_num(), output);
  }
  
  // repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
  for (int i = 0; i < this->poi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->poi(i), output);
  }
  
  // optional int32 poi_num = 27;
  if (has_poi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->poi_num(), output);
  }
  
  // optional string range = 28;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->range(), output);
  }
  
  // optional int32 score = 29;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->score(), output);
  }
  
  // optional int32 comment_num = 30;
  if (has_comment_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->comment_num(), output);
  }
  
  // optional string tinyurl = 31;
  if (has_tinyurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tinyurl().data(), this->tinyurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->tinyurl(), output);
  }
  
  // optional string group_title = 32;
  if (has_group_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_title().data(), this->group_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->group_title(), output);
  }
  
  // optional int32 group_type = 33;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->group_type(), output);
  }
  
  // repeated .lbs.da.openservice.RPResultItem group_list = 34;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->group_list(i), output);
  }
  
  // optional int32 day = 35;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->day(), output);
  }
  
  // optional string bn_rp_svr_exp_ids = 36;
  if (has_bn_rp_svr_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->bn_rp_svr_exp_ids(), output);
  }
  
  // optional int32 pushNum = 37;
  if (has_pushnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->pushnum(), output);
  }
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->bn_rp_svr_result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 dealId = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dealid(), target);
  }
  
  // optional double weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight(), target);
  }
  
  // optional int32 rec_strategy = 3;
  if (has_rec_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rec_strategy(), target);
  }
  
  // optional string reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }
  
  // optional int32 ifvirtual = 5;
  if (has_ifvirtual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifvirtual(), target);
  }
  
  // optional string image = 6;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->image(), target);
  }
  
  // optional string tiny_image = 7;
  if (has_tiny_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_image().data(), this->tiny_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tiny_image(), target);
  }
  
  // optional string mid_image = 8;
  if (has_mid_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mid_image().data(), this->mid_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mid_image(), target);
  }
  
  // optional string business_title = 9;
  if (has_business_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->business_title().data(), this->business_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->business_title(), target);
  }
  
  // optional string medium_title = 10;
  if (has_medium_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->medium_title().data(), this->medium_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->medium_title(), target);
  }
  
  // optional string min_title = 11;
  if (has_min_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_title().data(), this->min_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->min_title(), target);
  }
  
  // optional string title_high_price = 12;
  if (has_title_high_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title_high_price().data(), this->title_high_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->title_high_price(), target);
  }
  
  // optional int32 price_ori = 13;
  if (has_price_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->price_ori(), target);
  }
  
  // optional int32 price_current = 14;
  if (has_price_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->price_current(), target);
  }
  
  // optional string tags = 15;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tags(), target);
  }
  
  // optional int32 is_new = 16;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->is_new(), target);
  }
  
  // optional int32 is_flush = 17;
  if (has_is_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_flush(), target);
  }
  
  // optional int32 is_reservation = 18;
  if (has_is_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->is_reservation(), target);
  }
  
  // optional int32 sale_count = 19;
  if (has_sale_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sale_count(), target);
  }
  
  // optional int32 type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->type(), target);
  }
  
  // optional int32 pay_start_time = 21;
  if (has_pay_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pay_start_time(), target);
  }
  
  // optional int32 pay_end_time = 22;
  if (has_pay_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->pay_end_time(), target);
  }
  
  // optional int32 deal_start_time = 23;
  if (has_deal_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->deal_start_time(), target);
  }
  
  // optional int32 deal_expire_time = 24;
  if (has_deal_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->deal_expire_time(), target);
  }
  
  // optional int32 city_num = 25;
  if (has_city_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->city_num(), target);
  }
  
  // repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
  for (int i = 0; i < this->poi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->poi(i), target);
  }
  
  // optional int32 poi_num = 27;
  if (has_poi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->poi_num(), target);
  }
  
  // optional string range = 28;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->range(), target);
  }
  
  // optional int32 score = 29;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->score(), target);
  }
  
  // optional int32 comment_num = 30;
  if (has_comment_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->comment_num(), target);
  }
  
  // optional string tinyurl = 31;
  if (has_tinyurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tinyurl().data(), this->tinyurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->tinyurl(), target);
  }
  
  // optional string group_title = 32;
  if (has_group_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_title().data(), this->group_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->group_title(), target);
  }
  
  // optional int32 group_type = 33;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->group_type(), target);
  }
  
  // repeated .lbs.da.openservice.RPResultItem group_list = 34;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->group_list(i), target);
  }
  
  // optional int32 day = 35;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->day(), target);
  }
  
  // optional string bn_rp_svr_exp_ids = 36;
  if (has_bn_rp_svr_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->bn_rp_svr_exp_ids(), target);
  }
  
  // optional int32 pushNum = 37;
  if (has_pushnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->pushnum(), target);
  }
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->bn_rp_svr_result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPResultItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 dealId = 1;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dealid());
    }
    
    // optional double weight = 2;
    if (has_weight()) {
      total_size += 1 + 8;
    }
    
    // optional int32 rec_strategy = 3;
    if (has_rec_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec_strategy());
    }
    
    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
    // optional int32 ifvirtual = 5;
    if (has_ifvirtual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifvirtual());
    }
    
    // optional string image = 6;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }
    
    // optional string tiny_image = 7;
    if (has_tiny_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiny_image());
    }
    
    // optional string mid_image = 8;
    if (has_mid_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid_image());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string business_title = 9;
    if (has_business_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->business_title());
    }
    
    // optional string medium_title = 10;
    if (has_medium_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->medium_title());
    }
    
    // optional string min_title = 11;
    if (has_min_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->min_title());
    }
    
    // optional string title_high_price = 12;
    if (has_title_high_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title_high_price());
    }
    
    // optional int32 price_ori = 13;
    if (has_price_ori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_ori());
    }
    
    // optional int32 price_current = 14;
    if (has_price_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_current());
    }
    
    // optional string tags = 15;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional int32 is_new = 16;
    if (has_is_new()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_new());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 is_flush = 17;
    if (has_is_flush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_flush());
    }
    
    // optional int32 is_reservation = 18;
    if (has_is_reservation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_reservation());
    }
    
    // optional int32 sale_count = 19;
    if (has_sale_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale_count());
    }
    
    // optional int32 type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 pay_start_time = 21;
    if (has_pay_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_start_time());
    }
    
    // optional int32 pay_end_time = 22;
    if (has_pay_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_end_time());
    }
    
    // optional int32 deal_start_time = 23;
    if (has_deal_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deal_start_time());
    }
    
    // optional int32 deal_expire_time = 24;
    if (has_deal_expire_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deal_expire_time());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 city_num = 25;
    if (has_city_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_num());
    }
    
    // optional int32 poi_num = 27;
    if (has_poi_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poi_num());
    }
    
    // optional string range = 28;
    if (has_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->range());
    }
    
    // optional int32 score = 29;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 comment_num = 30;
    if (has_comment_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_num());
    }
    
    // optional string tinyurl = 31;
    if (has_tinyurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tinyurl());
    }
    
    // optional string group_title = 32;
    if (has_group_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_title());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 group_type = 33;
    if (has_group_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_type());
    }
    
    // optional int32 day = 35;
    if (has_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }
    
    // optional string bn_rp_svr_exp_ids = 36;
    if (has_bn_rp_svr_exp_ids()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_rp_svr_exp_ids());
    }
    
    // optional int32 pushNum = 37;
    if (has_pushnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pushnum());
    }
    
  }
  // repeated .lbs.da.openservice.RPResultPOIItem poi = 26;
  total_size += 2 * this->poi_size();
  for (int i = 0; i < this->poi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poi(i));
  }
  
  // repeated .lbs.da.openservice.RPResultItem group_list = 34;
  total_size += 2 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 38;
  total_size += 2 * this->bn_rp_svr_result_size();
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bn_rp_svr_result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPResultItem::MergeFrom(const RPResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  poi_.MergeFrom(from.poi_);
  group_list_.MergeFrom(from.group_list_);
  bn_rp_svr_result_.MergeFrom(from.bn_rp_svr_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_rec_strategy()) {
      set_rec_strategy(from.rec_strategy());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_ifvirtual()) {
      set_ifvirtual(from.ifvirtual());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_tiny_image()) {
      set_tiny_image(from.tiny_image());
    }
    if (from.has_mid_image()) {
      set_mid_image(from.mid_image());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_business_title()) {
      set_business_title(from.business_title());
    }
    if (from.has_medium_title()) {
      set_medium_title(from.medium_title());
    }
    if (from.has_min_title()) {
      set_min_title(from.min_title());
    }
    if (from.has_title_high_price()) {
      set_title_high_price(from.title_high_price());
    }
    if (from.has_price_ori()) {
      set_price_ori(from.price_ori());
    }
    if (from.has_price_current()) {
      set_price_current(from.price_current());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_flush()) {
      set_is_flush(from.is_flush());
    }
    if (from.has_is_reservation()) {
      set_is_reservation(from.is_reservation());
    }
    if (from.has_sale_count()) {
      set_sale_count(from.sale_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pay_start_time()) {
      set_pay_start_time(from.pay_start_time());
    }
    if (from.has_pay_end_time()) {
      set_pay_end_time(from.pay_end_time());
    }
    if (from.has_deal_start_time()) {
      set_deal_start_time(from.deal_start_time());
    }
    if (from.has_deal_expire_time()) {
      set_deal_expire_time(from.deal_expire_time());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_city_num()) {
      set_city_num(from.city_num());
    }
    if (from.has_poi_num()) {
      set_poi_num(from.poi_num());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_comment_num()) {
      set_comment_num(from.comment_num());
    }
    if (from.has_tinyurl()) {
      set_tinyurl(from.tinyurl());
    }
    if (from.has_group_title()) {
      set_group_title(from.group_title());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_bn_rp_svr_exp_ids()) {
      set_bn_rp_svr_exp_ids(from.bn_rp_svr_exp_ids());
    }
    if (from.has_pushnum()) {
      set_pushnum(from.pushnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPResultItem::CopyFrom(const RPResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPResultItem::IsInitialized() const {
  
  return true;
}

void RPResultItem::Swap(RPResultItem* other) {
  if (other != this) {
    std::swap(dealid_, other->dealid_);
    std::swap(weight_, other->weight_);
    std::swap(rec_strategy_, other->rec_strategy_);
    std::swap(reason_, other->reason_);
    std::swap(ifvirtual_, other->ifvirtual_);
    std::swap(image_, other->image_);
    std::swap(tiny_image_, other->tiny_image_);
    std::swap(mid_image_, other->mid_image_);
    std::swap(business_title_, other->business_title_);
    std::swap(medium_title_, other->medium_title_);
    std::swap(min_title_, other->min_title_);
    std::swap(title_high_price_, other->title_high_price_);
    std::swap(price_ori_, other->price_ori_);
    std::swap(price_current_, other->price_current_);
    std::swap(tags_, other->tags_);
    std::swap(is_new_, other->is_new_);
    std::swap(is_flush_, other->is_flush_);
    std::swap(is_reservation_, other->is_reservation_);
    std::swap(sale_count_, other->sale_count_);
    std::swap(type_, other->type_);
    std::swap(pay_start_time_, other->pay_start_time_);
    std::swap(pay_end_time_, other->pay_end_time_);
    std::swap(deal_start_time_, other->deal_start_time_);
    std::swap(deal_expire_time_, other->deal_expire_time_);
    std::swap(city_num_, other->city_num_);
    poi_.Swap(&other->poi_);
    std::swap(poi_num_, other->poi_num_);
    std::swap(range_, other->range_);
    std::swap(score_, other->score_);
    std::swap(comment_num_, other->comment_num_);
    std::swap(tinyurl_, other->tinyurl_);
    std::swap(group_title_, other->group_title_);
    std::swap(group_type_, other->group_type_);
    group_list_.Swap(&other->group_list_);
    std::swap(day_, other->day_);
    std::swap(bn_rp_svr_exp_ids_, other->bn_rp_svr_exp_ids_);
    std::swap(pushnum_, other->pushnum_);
    bn_rp_svr_result_.Swap(&other->bn_rp_svr_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPResultItem_descriptor_;
  metadata.reflection = RPResultItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCommonResponse::kBnRpSvrErrinfFieldNumber;
const int RPCommonResponse::kBnRpSvrErrnoFieldNumber;
const int RPCommonResponse::kBnRpSvrExpIdsFieldNumber;
const int RPCommonResponse::kLogIdFieldNumber;
const int RPCommonResponse::kBnRpSvrRecNumFieldNumber;
const int RPCommonResponse::kBnRpSvrResultFieldNumber;
const int RPCommonResponse::kBnRpSvrNresultFlagFieldNumber;
const int RPCommonResponse::kBnRpSvrTitleFieldNumber;
const int RPCommonResponse::kBnRpSvrSubtitleFieldNumber;
const int RPCommonResponse::kGiftCartIdFieldNumber;
#endif  // !_MSC_VER

RPCommonResponse::RPCommonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCommonResponse::InitAsDefaultInstance() {
}

RPCommonResponse::RPCommonResponse(const RPCommonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCommonResponse::SharedCtor() {
  _cached_size_ = 0;
  bn_rp_svr_errinf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bn_rp_svr_errno_ = 0;
  bn_rp_svr_exp_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bn_rp_svr_rec_num_ = 0;
  bn_rp_svr_nresult_flag_ = 0;
  bn_rp_svr_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bn_rp_svr_subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gift_cart_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCommonResponse::~RPCommonResponse() {
  SharedDtor();
}

void RPCommonResponse::SharedDtor() {
  if (bn_rp_svr_errinf_ != &::google::protobuf::internal::kEmptyString) {
    delete bn_rp_svr_errinf_;
  }
  if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete bn_rp_svr_exp_ids_;
  }
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    delete logid_;
  }
  if (bn_rp_svr_title_ != &::google::protobuf::internal::kEmptyString) {
    delete bn_rp_svr_title_;
  }
  if (bn_rp_svr_subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete bn_rp_svr_subtitle_;
  }
  if (gift_cart_id_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_cart_id_;
  }
  if (this != default_instance_) {
  }
}

void RPCommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCommonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCommonResponse_descriptor_;
}

const RPCommonResponse& RPCommonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rp_2eproto();  return *default_instance_;
}

RPCommonResponse* RPCommonResponse::default_instance_ = NULL;

RPCommonResponse* RPCommonResponse::New() const {
  return new RPCommonResponse;
}

void RPCommonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bn_rp_svr_errinf()) {
      if (bn_rp_svr_errinf_ != &::google::protobuf::internal::kEmptyString) {
        bn_rp_svr_errinf_->clear();
      }
    }
    bn_rp_svr_errno_ = 0;
    if (has_bn_rp_svr_exp_ids()) {
      if (bn_rp_svr_exp_ids_ != &::google::protobuf::internal::kEmptyString) {
        bn_rp_svr_exp_ids_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::kEmptyString) {
        logid_->clear();
      }
    }
    bn_rp_svr_rec_num_ = 0;
    bn_rp_svr_nresult_flag_ = 0;
    if (has_bn_rp_svr_title()) {
      if (bn_rp_svr_title_ != &::google::protobuf::internal::kEmptyString) {
        bn_rp_svr_title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bn_rp_svr_subtitle()) {
      if (bn_rp_svr_subtitle_ != &::google::protobuf::internal::kEmptyString) {
        bn_rp_svr_subtitle_->clear();
      }
    }
    if (has_gift_cart_id()) {
      if (gift_cart_id_ != &::google::protobuf::internal::kEmptyString) {
        gift_cart_id_->clear();
      }
    }
  }
  bn_rp_svr_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bn_rp_svr_errinf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_rp_svr_errinf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bn_rp_svr_errinf().data(), this->bn_rp_svr_errinf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bn_rp_svr_errno;
        break;
      }
      
      // optional int32 bn_rp_svr_errno = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bn_rp_svr_errno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bn_rp_svr_errno_)));
          set_has_bn_rp_svr_errno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bn_rp_svr_exp_ids;
        break;
      }
      
      // optional string bn_rp_svr_exp_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_exp_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_rp_svr_exp_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logId;
        break;
      }
      
      // optional string logId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bn_rp_svr_rec_num;
        break;
      }
      
      // optional int32 bn_rp_svr_rec_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bn_rp_svr_rec_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bn_rp_svr_rec_num_)));
          set_has_bn_rp_svr_rec_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bn_rp_svr_result;
        break;
      }
      
      // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bn_rp_svr_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bn_rp_svr_result;
        if (input->ExpectTag(56)) goto parse_bn_rp_svr_nresult_flag;
        break;
      }
      
      // optional int32 bn_rp_svr_nresult_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bn_rp_svr_nresult_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bn_rp_svr_nresult_flag_)));
          set_has_bn_rp_svr_nresult_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bn_rp_svr_title;
        break;
      }
      
      // optional string bn_rp_svr_title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_rp_svr_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bn_rp_svr_title().data(), this->bn_rp_svr_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bn_rp_svr_subtitle;
        break;
      }
      
      // optional string bn_rp_svr_subtitle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bn_rp_svr_subtitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bn_rp_svr_subtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bn_rp_svr_subtitle().data(), this->bn_rp_svr_subtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gift_cart_id;
        break;
      }
      
      // optional string gift_cart_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_cart_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_cart_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_cart_id().data(), this->gift_cart_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bn_rp_svr_errinf = 1;
  if (has_bn_rp_svr_errinf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_errinf().data(), this->bn_rp_svr_errinf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bn_rp_svr_errinf(), output);
  }
  
  // optional int32 bn_rp_svr_errno = 2;
  if (has_bn_rp_svr_errno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bn_rp_svr_errno(), output);
  }
  
  // optional string bn_rp_svr_exp_ids = 3;
  if (has_bn_rp_svr_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bn_rp_svr_exp_ids(), output);
  }
  
  // optional string logId = 4;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logid(), output);
  }
  
  // optional int32 bn_rp_svr_rec_num = 5;
  if (has_bn_rp_svr_rec_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bn_rp_svr_rec_num(), output);
  }
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bn_rp_svr_result(i), output);
  }
  
  // optional int32 bn_rp_svr_nresult_flag = 7;
  if (has_bn_rp_svr_nresult_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bn_rp_svr_nresult_flag(), output);
  }
  
  // optional string bn_rp_svr_title = 8;
  if (has_bn_rp_svr_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_title().data(), this->bn_rp_svr_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->bn_rp_svr_title(), output);
  }
  
  // optional string bn_rp_svr_subtitle = 9;
  if (has_bn_rp_svr_subtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_subtitle().data(), this->bn_rp_svr_subtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bn_rp_svr_subtitle(), output);
  }
  
  // optional string gift_cart_id = 10;
  if (has_gift_cart_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_cart_id().data(), this->gift_cart_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gift_cart_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCommonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bn_rp_svr_errinf = 1;
  if (has_bn_rp_svr_errinf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_errinf().data(), this->bn_rp_svr_errinf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bn_rp_svr_errinf(), target);
  }
  
  // optional int32 bn_rp_svr_errno = 2;
  if (has_bn_rp_svr_errno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bn_rp_svr_errno(), target);
  }
  
  // optional string bn_rp_svr_exp_ids = 3;
  if (has_bn_rp_svr_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_exp_ids().data(), this->bn_rp_svr_exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bn_rp_svr_exp_ids(), target);
  }
  
  // optional string logId = 4;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logid(), target);
  }
  
  // optional int32 bn_rp_svr_rec_num = 5;
  if (has_bn_rp_svr_rec_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bn_rp_svr_rec_num(), target);
  }
  
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bn_rp_svr_result(i), target);
  }
  
  // optional int32 bn_rp_svr_nresult_flag = 7;
  if (has_bn_rp_svr_nresult_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bn_rp_svr_nresult_flag(), target);
  }
  
  // optional string bn_rp_svr_title = 8;
  if (has_bn_rp_svr_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_title().data(), this->bn_rp_svr_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bn_rp_svr_title(), target);
  }
  
  // optional string bn_rp_svr_subtitle = 9;
  if (has_bn_rp_svr_subtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bn_rp_svr_subtitle().data(), this->bn_rp_svr_subtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bn_rp_svr_subtitle(), target);
  }
  
  // optional string gift_cart_id = 10;
  if (has_gift_cart_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_cart_id().data(), this->gift_cart_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gift_cart_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCommonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bn_rp_svr_errinf = 1;
    if (has_bn_rp_svr_errinf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_rp_svr_errinf());
    }
    
    // optional int32 bn_rp_svr_errno = 2;
    if (has_bn_rp_svr_errno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bn_rp_svr_errno());
    }
    
    // optional string bn_rp_svr_exp_ids = 3;
    if (has_bn_rp_svr_exp_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_rp_svr_exp_ids());
    }
    
    // optional string logId = 4;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }
    
    // optional int32 bn_rp_svr_rec_num = 5;
    if (has_bn_rp_svr_rec_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bn_rp_svr_rec_num());
    }
    
    // optional int32 bn_rp_svr_nresult_flag = 7;
    if (has_bn_rp_svr_nresult_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bn_rp_svr_nresult_flag());
    }
    
    // optional string bn_rp_svr_title = 8;
    if (has_bn_rp_svr_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_rp_svr_title());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bn_rp_svr_subtitle = 9;
    if (has_bn_rp_svr_subtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bn_rp_svr_subtitle());
    }
    
    // optional string gift_cart_id = 10;
    if (has_gift_cart_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_cart_id());
    }
    
  }
  // repeated .lbs.da.openservice.RPResultItem bn_rp_svr_result = 6;
  total_size += 1 * this->bn_rp_svr_result_size();
  for (int i = 0; i < this->bn_rp_svr_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bn_rp_svr_result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCommonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCommonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCommonResponse::MergeFrom(const RPCommonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bn_rp_svr_result_.MergeFrom(from.bn_rp_svr_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bn_rp_svr_errinf()) {
      set_bn_rp_svr_errinf(from.bn_rp_svr_errinf());
    }
    if (from.has_bn_rp_svr_errno()) {
      set_bn_rp_svr_errno(from.bn_rp_svr_errno());
    }
    if (from.has_bn_rp_svr_exp_ids()) {
      set_bn_rp_svr_exp_ids(from.bn_rp_svr_exp_ids());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_bn_rp_svr_rec_num()) {
      set_bn_rp_svr_rec_num(from.bn_rp_svr_rec_num());
    }
    if (from.has_bn_rp_svr_nresult_flag()) {
      set_bn_rp_svr_nresult_flag(from.bn_rp_svr_nresult_flag());
    }
    if (from.has_bn_rp_svr_title()) {
      set_bn_rp_svr_title(from.bn_rp_svr_title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bn_rp_svr_subtitle()) {
      set_bn_rp_svr_subtitle(from.bn_rp_svr_subtitle());
    }
    if (from.has_gift_cart_id()) {
      set_gift_cart_id(from.gift_cart_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCommonResponse::CopyFrom(const RPCommonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCommonResponse::IsInitialized() const {
  
  return true;
}

void RPCommonResponse::Swap(RPCommonResponse* other) {
  if (other != this) {
    std::swap(bn_rp_svr_errinf_, other->bn_rp_svr_errinf_);
    std::swap(bn_rp_svr_errno_, other->bn_rp_svr_errno_);
    std::swap(bn_rp_svr_exp_ids_, other->bn_rp_svr_exp_ids_);
    std::swap(logid_, other->logid_);
    std::swap(bn_rp_svr_rec_num_, other->bn_rp_svr_rec_num_);
    bn_rp_svr_result_.Swap(&other->bn_rp_svr_result_);
    std::swap(bn_rp_svr_nresult_flag_, other->bn_rp_svr_nresult_flag_);
    std::swap(bn_rp_svr_title_, other->bn_rp_svr_title_);
    std::swap(bn_rp_svr_subtitle_, other->bn_rp_svr_subtitle_);
    std::swap(gift_cart_id_, other->gift_cart_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCommonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCommonResponse_descriptor_;
  metadata.reflection = RPCommonResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
