// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "as.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* ASRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASFacetDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASFacetDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASPoiDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASPoiDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASDistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASDistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASDealDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASDealDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_as_2eproto() {
  protobuf_AddDesc_as_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "as.proto");
  GOOGLE_CHECK(file != NULL);
  ASRequest_descriptor_ = file->message_type(0);
  static const int ASRequest_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, checkin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, checkout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_thdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_shop_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_shop_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_sub_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_sub_station_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, sub_station_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_site_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, start_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, goods_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, good_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, poi_per_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, poi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, goods_per_poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, baidu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, is_expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, is_goflush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, border_start_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, border_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, verbose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, coor_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, nearby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, str_customized_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, need_poi_),
  };
  ASRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASRequest_descriptor_,
      ASRequest::default_instance_,
      ASRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASRequest));
  ASFacetDetail_descriptor_ = file->message_type(1);
  static const int ASFacetDetail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, thirdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, subway_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, subway_station_),
  };
  ASFacetDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASFacetDetail_descriptor_,
      ASFacetDetail::default_instance_,
      ASFacetDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASFacetDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASFacetDetail));
  ASPoiDetail_descriptor_ = file->message_type(2);
  static const int ASPoiDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, poiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, distance_),
  };
  ASPoiDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASPoiDetail_descriptor_,
      ASPoiDetail::default_instance_,
      ASPoiDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASPoiDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASPoiDetail));
  ASDistInfo_descriptor_ = file->message_type(3);
  static const int ASDistInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDistInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDistInfo, name_),
  };
  ASDistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASDistInfo_descriptor_,
      ASDistInfo::default_instance_,
      ASDistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASDistInfo));
  ASDealDetail_descriptor_ = file->message_type(4);
  static const int ASDealDetail_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, mid_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, tiny_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, business_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, medium_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, title_high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, min_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, price_ori_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, price_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, sale_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, pay_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, pay_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, deal_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, deal_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, city_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, poi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, comment_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, bought_weekly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, tiny_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, dist_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, is_national_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, num_brother_),
  };
  ASDealDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASDealDetail_descriptor_,
      ASDealDetail::default_instance_,
      ASDealDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASDealDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASDealDetail));
  ASResponse_descriptor_ = file->message_type(5);
  static const int ASResponse_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, head_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, facet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, landmark_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, nearby_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, query_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, query_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, highlights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, expired_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, exp_ids_),
  };
  ASResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASResponse_descriptor_,
      ASResponse::default_instance_,
      ASResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_as_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASRequest_descriptor_, &ASRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASFacetDetail_descriptor_, &ASFacetDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASPoiDetail_descriptor_, &ASPoiDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASDistInfo_descriptor_, &ASDistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASDealDetail_descriptor_, &ASDealDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASResponse_descriptor_, &ASResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_as_2eproto() {
  delete ASRequest::default_instance_;
  delete ASRequest_reflection_;
  delete ASFacetDetail::default_instance_;
  delete ASFacetDetail_reflection_;
  delete ASPoiDetail::default_instance_;
  delete ASPoiDetail_reflection_;
  delete ASDistInfo::default_instance_;
  delete ASDistInfo_reflection_;
  delete ASDealDetail::default_instance_;
  delete ASDealDetail_reflection_;
  delete ASResponse::default_instance_;
  delete ASResponse_reflection_;
}

void protobuf_AddDesc_as_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010as.proto\022\022lbs.da.openservice\"\375\006\n\tASReq"
    "uest\022\021\n\006is_new\030\001 \001(\005:\0010\022\030\n\014checkin_time\030"
    "\002 \001(\005:\002-1\022\031\n\rcheckout_time\030\003 \001(\005:\002-1\022\017\n\007"
    "city_id\030\004 \001(\003\022\027\n\014channel_type\030\005 \001(\005:\0018\022\023"
    "\n\010str_catg\030\006 \001(\t:\0010\022\026\n\013str_subcatg\030\007 \001(\t"
    ":\0010\022\026\n\013str_thdcatg\030\010 \001(\t:\0010\022\030\n\rstr_shop_"
    "dist\030\t \001(\t:\0010\022\031\n\016str_shop_range\030\n \001(\t:\0010"
    "\022\024\n\014str_sub_line\030\013 \001(\t\022\027\n\017str_sub_statio"
    "n\030\014 \001(\t\022\023\n\013sub_station\030\r \003(\005\022\030\n\rstr_site"
    "_list\030\016 \001(\t:\0010\022\024\n\tsort_type\030\017 \001(\005:\0010\022\024\n\t"
    "start_idx\030\020 \001(\005:\0011\022\032\n\016goods_per_page\030\021 \001"
    "(\005:\00291\022\024\n\010good_num\030\022 \001(\005:\00291\022\030\n\014poi_per_"
    "page\030\023 \001(\005:\00210\022\023\n\007poi_num\030\024 \001(\005:\00220\022\031\n\rg"
    "oods_per_poi\030\025 \001(\005:\00210\022\016\n\004cuid\030\026 \001(\t:\000\022\021"
    "\n\006client\030\027 \001(\005:\0013\022\030\n\001s\030\030 \001(\t:\rrealtime_p"
    "ush\022\020\n\010baidu_id\030\031 \001(\t\022\025\n\nis_expired\030\032 \001("
    "\005:\0010\022\020\n\010location\030\033 \001(\t\022\020\n\010keywords\030\035 \001(\t"
    "\022\025\n\nis_goflush\030\036 \001(\005:\0010\022\014\n\004tags\030\037 \001(\t\022\016\n"
    "\006border\030  \001(\t\022\035\n\025border_start_distance\030!"
    " \001(\005\022\034\n\017border_distance\030\" \001(\005:\003500\022\017\n\007ve"
    "rbose\030# \001(\005\022\030\n\010coor_sys\030$ \001(\t:\006google\022\021\n"
    "\tnearby_id\030% \001(\t\022\037\n\027str_customized_locat"
    "ion\030& \001(\t\022\016\n\006userID\030\' \001(\t\022\023\n\010need_poi\030( "
    "\001(\t:\0011\"\247\001\n\rASFacetDetail\022\014\n\004catg\030\001 \001(\t\022\014"
    "\n\004city\030\002 \001(\t\022\r\n\005range\030\003 \001(\t\022\014\n\004dist\030\004 \001("
    "\t\022\017\n\007subcatg\030\005 \001(\t\022\021\n\tthirdcatg\030\006 \001(\t\022\014\n"
    "\004tags\030\007 \001(\t\022\023\n\013subway_line\030\010 \001(\t\022\026\n\016subw"
    "ay_station\030\t \001(\t\"D\n\013ASPoiDetail\022\r\n\005poiid"
    "\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\020\n\010distance"
    "\030\004 \001(\005\"&\n\nASDistInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name"
    "\030\002 \001(\t\"\200\005\n\014ASDealDetail\022\n\n\002id\030\001 \001(\005\022\r\n\005i"
    "mage\030\002 \001(\t\022\021\n\tmid_image\030\003 \001(\t\022\022\n\ntiny_im"
    "age\030\004 \001(\t\022\026\n\016business_title\030\005 \001(\t\022\024\n\014med"
    "ium_title\030\006 \001(\t\022\030\n\020title_high_price\030\007 \001("
    "\t\022\021\n\tmin_title\030\010 \001(\t\022\021\n\tprice_ori\030\t \001(\005\022"
    "\025\n\rprice_current\030\n \001(\005\022\014\n\004tags\030\013 \001(\t\022\016\n\006"
    "is_new\030\014 \001(\005\022\022\n\nsale_count\030\r \001(\005\022\014\n\004type"
    "\030\016 \001(\005\022\026\n\016pay_start_time\030\017 \001(\005\022\024\n\014pay_en"
    "d_time\030\020 \001(\005\022\027\n\017deal_start_time\030\021 \001(\005\022\030\n"
    "\020deal_expire_time\030\022 \001(\005\022\020\n\010city_num\030\023 \001("
    "\005\022\017\n\007poi_num\030\024 \001(\005\022,\n\003poi\030\025 \003(\0132\037.lbs.da"
    ".openservice.ASPoiDetail\022\r\n\005range\030\026 \001(\t\022"
    "\r\n\005score\030\027 \001(\005\022\023\n\013comment_num\030\030 \001(\005\022\025\n\rb"
    "ought_weekly\030\031 \001(\005\022\020\n\010tiny_url\030\032 \001(\t\0221\n\t"
    "dist_info\030\033 \001(\0132\036.lbs.da.openservice.ASD"
    "istInfo\022\023\n\013is_national\030\034 \001(\005\022\023\n\013num_brot"
    "her\030\035 \001(\005\"\312\002\n\nASResponse\022\014\n\004data\030\001 \001(\t\022\021"
    "\n\thead_data\030\002 \001(\t\0220\n\005facet\030\003 \001(\0132!.lbs.d"
    "a.openservice.ASFacetDetail\022\r\n\005total\030\004 \001"
    "(\005\022\016\n\006remain\030\005 \001(\t\022\031\n\021landmark_distance\030"
    "\006 \001(\t\022\027\n\017nearby_distance\030\007 \001(\t\022\022\n\nquery_"
    "dist\030\010 \001(\005\022\023\n\013query_range\030\t \001(\005\022\022\n\nhighl"
    "ights\030\n \001(\t\022\026\n\016expired_amount\030\013 \001(\005\0220\n\006d"
    "etail\030\014 \003(\0132 .lbs.da.openservice.ASDealD"
    "etail\022\017\n\007exp_ids\030\r \001(\tB\002H\001", 2186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "as.proto", &protobuf_RegisterTypes);
  ASRequest::default_instance_ = new ASRequest();
  ASFacetDetail::default_instance_ = new ASFacetDetail();
  ASPoiDetail::default_instance_ = new ASPoiDetail();
  ASDistInfo::default_instance_ = new ASDistInfo();
  ASDealDetail::default_instance_ = new ASDealDetail();
  ASResponse::default_instance_ = new ASResponse();
  ASRequest::default_instance_->InitAsDefaultInstance();
  ASFacetDetail::default_instance_->InitAsDefaultInstance();
  ASPoiDetail::default_instance_->InitAsDefaultInstance();
  ASDistInfo::default_instance_->InitAsDefaultInstance();
  ASDealDetail::default_instance_->InitAsDefaultInstance();
  ASResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_as_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_as_2eproto {
  StaticDescriptorInitializer_as_2eproto() {
    protobuf_AddDesc_as_2eproto();
  }
} static_descriptor_initializer_as_2eproto_;


// ===================================================================

const ::std::string ASRequest::_default_str_catg_("0");
const ::std::string ASRequest::_default_str_subcatg_("0");
const ::std::string ASRequest::_default_str_thdcatg_("0");
const ::std::string ASRequest::_default_str_shop_dist_("0");
const ::std::string ASRequest::_default_str_shop_range_("0");
const ::std::string ASRequest::_default_str_site_list_("0");
const ::std::string ASRequest::_default_s_("realtime_push");
const ::std::string ASRequest::_default_coor_sys_("google");
const ::std::string ASRequest::_default_need_poi_("1");
#ifndef _MSC_VER
const int ASRequest::kIsNewFieldNumber;
const int ASRequest::kCheckinTimeFieldNumber;
const int ASRequest::kCheckoutTimeFieldNumber;
const int ASRequest::kCityIdFieldNumber;
const int ASRequest::kChannelTypeFieldNumber;
const int ASRequest::kStrCatgFieldNumber;
const int ASRequest::kStrSubcatgFieldNumber;
const int ASRequest::kStrThdcatgFieldNumber;
const int ASRequest::kStrShopDistFieldNumber;
const int ASRequest::kStrShopRangeFieldNumber;
const int ASRequest::kStrSubLineFieldNumber;
const int ASRequest::kStrSubStationFieldNumber;
const int ASRequest::kSubStationFieldNumber;
const int ASRequest::kStrSiteListFieldNumber;
const int ASRequest::kSortTypeFieldNumber;
const int ASRequest::kStartIdxFieldNumber;
const int ASRequest::kGoodsPerPageFieldNumber;
const int ASRequest::kGoodNumFieldNumber;
const int ASRequest::kPoiPerPageFieldNumber;
const int ASRequest::kPoiNumFieldNumber;
const int ASRequest::kGoodsPerPoiFieldNumber;
const int ASRequest::kCuidFieldNumber;
const int ASRequest::kClientFieldNumber;
const int ASRequest::kSFieldNumber;
const int ASRequest::kBaiduIdFieldNumber;
const int ASRequest::kIsExpiredFieldNumber;
const int ASRequest::kLocationFieldNumber;
const int ASRequest::kKeywordsFieldNumber;
const int ASRequest::kIsGoflushFieldNumber;
const int ASRequest::kTagsFieldNumber;
const int ASRequest::kBorderFieldNumber;
const int ASRequest::kBorderStartDistanceFieldNumber;
const int ASRequest::kBorderDistanceFieldNumber;
const int ASRequest::kVerboseFieldNumber;
const int ASRequest::kCoorSysFieldNumber;
const int ASRequest::kNearbyIdFieldNumber;
const int ASRequest::kStrCustomizedLocationFieldNumber;
const int ASRequest::kUserIDFieldNumber;
const int ASRequest::kNeedPoiFieldNumber;
#endif  // !_MSC_VER

ASRequest::ASRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASRequest::InitAsDefaultInstance() {
}

ASRequest::ASRequest(const ASRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASRequest::SharedCtor() {
  _cached_size_ = 0;
  is_new_ = 0;
  checkin_time_ = -1;
  checkout_time_ = -1;
  city_id_ = GOOGLE_LONGLONG(0);
  channel_type_ = 8;
  str_catg_ = const_cast< ::std::string*>(&_default_str_catg_);
  str_subcatg_ = const_cast< ::std::string*>(&_default_str_subcatg_);
  str_thdcatg_ = const_cast< ::std::string*>(&_default_str_thdcatg_);
  str_shop_dist_ = const_cast< ::std::string*>(&_default_str_shop_dist_);
  str_shop_range_ = const_cast< ::std::string*>(&_default_str_shop_range_);
  str_sub_line_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_sub_station_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_site_list_ = const_cast< ::std::string*>(&_default_str_site_list_);
  sort_type_ = 0;
  start_idx_ = 1;
  goods_per_page_ = 91;
  good_num_ = 91;
  poi_per_page_ = 10;
  poi_num_ = 20;
  goods_per_poi_ = 10;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ = 3;
  s_ = const_cast< ::std::string*>(&_default_s_);
  baidu_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_expired_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keywords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_goflush_ = 0;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  border_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  border_start_distance_ = 0;
  border_distance_ = 500;
  verbose_ = 0;
  coor_sys_ = const_cast< ::std::string*>(&_default_coor_sys_);
  nearby_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_customized_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_poi_ = const_cast< ::std::string*>(&_default_need_poi_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASRequest::~ASRequest() {
  SharedDtor();
}

void ASRequest::SharedDtor() {
  if (str_catg_ != &_default_str_catg_) {
    delete str_catg_;
  }
  if (str_subcatg_ != &_default_str_subcatg_) {
    delete str_subcatg_;
  }
  if (str_thdcatg_ != &_default_str_thdcatg_) {
    delete str_thdcatg_;
  }
  if (str_shop_dist_ != &_default_str_shop_dist_) {
    delete str_shop_dist_;
  }
  if (str_shop_range_ != &_default_str_shop_range_) {
    delete str_shop_range_;
  }
  if (str_sub_line_ != &::google::protobuf::internal::kEmptyString) {
    delete str_sub_line_;
  }
  if (str_sub_station_ != &::google::protobuf::internal::kEmptyString) {
    delete str_sub_station_;
  }
  if (str_site_list_ != &_default_str_site_list_) {
    delete str_site_list_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (s_ != &_default_s_) {
    delete s_;
  }
  if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
    delete baidu_id_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (keywords_ != &::google::protobuf::internal::kEmptyString) {
    delete keywords_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (border_ != &::google::protobuf::internal::kEmptyString) {
    delete border_;
  }
  if (coor_sys_ != &_default_coor_sys_) {
    delete coor_sys_;
  }
  if (nearby_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nearby_id_;
  }
  if (str_customized_location_ != &::google::protobuf::internal::kEmptyString) {
    delete str_customized_location_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (need_poi_ != &_default_need_poi_) {
    delete need_poi_;
  }
  if (this != default_instance_) {
  }
}

void ASRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASRequest_descriptor_;
}

const ASRequest& ASRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASRequest* ASRequest::default_instance_ = NULL;

ASRequest* ASRequest::New() const {
  return new ASRequest;
}

void ASRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_new_ = 0;
    checkin_time_ = -1;
    checkout_time_ = -1;
    city_id_ = GOOGLE_LONGLONG(0);
    channel_type_ = 8;
    if (has_str_catg()) {
      if (str_catg_ != &_default_str_catg_) {
        str_catg_->assign(_default_str_catg_);
      }
    }
    if (has_str_subcatg()) {
      if (str_subcatg_ != &_default_str_subcatg_) {
        str_subcatg_->assign(_default_str_subcatg_);
      }
    }
    if (has_str_thdcatg()) {
      if (str_thdcatg_ != &_default_str_thdcatg_) {
        str_thdcatg_->assign(_default_str_thdcatg_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_str_shop_dist()) {
      if (str_shop_dist_ != &_default_str_shop_dist_) {
        str_shop_dist_->assign(_default_str_shop_dist_);
      }
    }
    if (has_str_shop_range()) {
      if (str_shop_range_ != &_default_str_shop_range_) {
        str_shop_range_->assign(_default_str_shop_range_);
      }
    }
    if (has_str_sub_line()) {
      if (str_sub_line_ != &::google::protobuf::internal::kEmptyString) {
        str_sub_line_->clear();
      }
    }
    if (has_str_sub_station()) {
      if (str_sub_station_ != &::google::protobuf::internal::kEmptyString) {
        str_sub_station_->clear();
      }
    }
    if (has_str_site_list()) {
      if (str_site_list_ != &_default_str_site_list_) {
        str_site_list_->assign(_default_str_site_list_);
      }
    }
    sort_type_ = 0;
    start_idx_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    goods_per_page_ = 91;
    good_num_ = 91;
    poi_per_page_ = 10;
    poi_num_ = 20;
    goods_per_poi_ = 10;
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    client_ = 3;
    if (has_s()) {
      if (s_ != &_default_s_) {
        s_->assign(_default_s_);
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_baidu_id()) {
      if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
        baidu_id_->clear();
      }
    }
    is_expired_ = 0;
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_keywords()) {
      if (keywords_ != &::google::protobuf::internal::kEmptyString) {
        keywords_->clear();
      }
    }
    is_goflush_ = 0;
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    if (has_border()) {
      if (border_ != &::google::protobuf::internal::kEmptyString) {
        border_->clear();
      }
    }
    border_start_distance_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    border_distance_ = 500;
    verbose_ = 0;
    if (has_coor_sys()) {
      if (coor_sys_ != &_default_coor_sys_) {
        coor_sys_->assign(_default_coor_sys_);
      }
    }
    if (has_nearby_id()) {
      if (nearby_id_ != &::google::protobuf::internal::kEmptyString) {
        nearby_id_->clear();
      }
    }
    if (has_str_customized_location()) {
      if (str_customized_location_ != &::google::protobuf::internal::kEmptyString) {
        str_customized_location_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_need_poi()) {
      if (need_poi_ != &_default_need_poi_) {
        need_poi_->assign(_default_need_poi_);
      }
    }
  }
  sub_station_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_new = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkin_time;
        break;
      }
      
      // optional int32 checkin_time = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkin_time_)));
          set_has_checkin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkout_time;
        break;
      }
      
      // optional int32 checkout_time = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkout_time_)));
          set_has_checkout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_city_id;
        break;
      }
      
      // optional int64 city_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel_type;
        break;
      }
      
      // optional int32 channel_type = 5 [default = 8];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_str_catg;
        break;
      }
      
      // optional string str_catg = 6 [default = "0"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_catg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_catg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_catg().data(), this->str_catg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_str_subcatg;
        break;
      }
      
      // optional string str_subcatg = 7 [default = "0"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_subcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_subcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_subcatg().data(), this->str_subcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_str_thdcatg;
        break;
      }
      
      // optional string str_thdcatg = 8 [default = "0"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_thdcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_thdcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_thdcatg().data(), this->str_thdcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_str_shop_dist;
        break;
      }
      
      // optional string str_shop_dist = 9 [default = "0"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_shop_dist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_shop_dist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_shop_dist().data(), this->str_shop_dist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_str_shop_range;
        break;
      }
      
      // optional string str_shop_range = 10 [default = "0"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_shop_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_shop_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_shop_range().data(), this->str_shop_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_str_sub_line;
        break;
      }
      
      // optional string str_sub_line = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_sub_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_sub_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_sub_line().data(), this->str_sub_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_str_sub_station;
        break;
      }
      
      // optional string str_sub_station = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_sub_station:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_sub_station()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_sub_station().data(), this->str_sub_station().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sub_station;
        break;
      }
      
      // repeated int32 sub_station = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_station:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_sub_station())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sub_station())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sub_station;
        if (input->ExpectTag(114)) goto parse_str_site_list;
        break;
      }
      
      // optional string str_site_list = 14 [default = "0"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_site_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_site_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_site_list().data(), this->str_site_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sort_type;
        break;
      }
      
      // optional int32 sort_type = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_type_)));
          set_has_sort_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_start_idx;
        break;
      }
      
      // optional int32 start_idx = 16 [default = 1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_goods_per_page;
        break;
      }
      
      // optional int32 goods_per_page = 17 [default = 91];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_per_page_)));
          set_has_goods_per_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_good_num;
        break;
      }
      
      // optional int32 good_num = 18 [default = 91];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_num_)));
          set_has_good_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_poi_per_page;
        break;
      }
      
      // optional int32 poi_per_page = 19 [default = 10];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poi_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poi_per_page_)));
          set_has_poi_per_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_poi_num;
        break;
      }
      
      // optional int32 poi_num = 20 [default = 20];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poi_num_)));
          set_has_poi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_goods_per_poi;
        break;
      }
      
      // optional int32 goods_per_poi = 21 [default = 10];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_per_poi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_per_poi_)));
          set_has_goods_per_poi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_client;
        break;
      }
      
      // optional int32 client = 23 [default = 3];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_s;
        break;
      }
      
      // optional string s = 24 [default = "realtime_push"];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_baidu_id;
        break;
      }
      
      // optional string baidu_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baidu_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->baidu_id().data(), this->baidu_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_is_expired;
        break;
      }
      
      // optional int32 is_expired = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_expired_)));
          set_has_is_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_location;
        break;
      }
      
      // optional string location = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_keywords;
        break;
      }
      
      // optional string keywords = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_is_goflush;
        break;
      }
      
      // optional int32 is_goflush = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_goflush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_goflush_)));
          set_has_is_goflush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_tags;
        break;
      }
      
      // optional string tags = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_border;
        break;
      }
      
      // optional string border = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_border()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->border().data(), this->border().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_border_start_distance;
        break;
      }
      
      // optional int32 border_start_distance = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_start_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_start_distance_)));
          set_has_border_start_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_border_distance;
        break;
      }
      
      // optional int32 border_distance = 34 [default = 500];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_distance_)));
          set_has_border_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_verbose;
        break;
      }
      
      // optional int32 verbose = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verbose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbose_)));
          set_has_verbose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_coor_sys;
        break;
      }
      
      // optional string coor_sys = 36 [default = "google"];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coor_sys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coor_sys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coor_sys().data(), this->coor_sys().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_nearby_id;
        break;
      }
      
      // optional string nearby_id = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nearby_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nearby_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nearby_id().data(), this->nearby_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_str_customized_location;
        break;
      }
      
      // optional string str_customized_location = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_customized_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_customized_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_customized_location().data(), this->str_customized_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_userID;
        break;
      }
      
      // optional string userID = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_need_poi;
        break;
      }
      
      // optional string need_poi = 40 [default = "1"];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_need_poi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->need_poi().data(), this->need_poi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_new = 1 [default = 0];
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_new(), output);
  }
  
  // optional int32 checkin_time = 2 [default = -1];
  if (has_checkin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkin_time(), output);
  }
  
  // optional int32 checkout_time = 3 [default = -1];
  if (has_checkout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->checkout_time(), output);
  }
  
  // optional int64 city_id = 4;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->city_id(), output);
  }
  
  // optional int32 channel_type = 5 [default = 8];
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel_type(), output);
  }
  
  // optional string str_catg = 6 [default = "0"];
  if (has_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_catg().data(), this->str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->str_catg(), output);
  }
  
  // optional string str_subcatg = 7 [default = "0"];
  if (has_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_subcatg().data(), this->str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->str_subcatg(), output);
  }
  
  // optional string str_thdcatg = 8 [default = "0"];
  if (has_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_thdcatg().data(), this->str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->str_thdcatg(), output);
  }
  
  // optional string str_shop_dist = 9 [default = "0"];
  if (has_str_shop_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_dist().data(), this->str_shop_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->str_shop_dist(), output);
  }
  
  // optional string str_shop_range = 10 [default = "0"];
  if (has_str_shop_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_range().data(), this->str_shop_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->str_shop_range(), output);
  }
  
  // optional string str_sub_line = 11;
  if (has_str_sub_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_sub_line().data(), this->str_sub_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->str_sub_line(), output);
  }
  
  // optional string str_sub_station = 12;
  if (has_str_sub_station()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_sub_station().data(), this->str_sub_station().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->str_sub_station(), output);
  }
  
  // repeated int32 sub_station = 13;
  for (int i = 0; i < this->sub_station_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->sub_station(i), output);
  }
  
  // optional string str_site_list = 14 [default = "0"];
  if (has_str_site_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_site_list().data(), this->str_site_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->str_site_list(), output);
  }
  
  // optional int32 sort_type = 15 [default = 0];
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sort_type(), output);
  }
  
  // optional int32 start_idx = 16 [default = 1];
  if (has_start_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->start_idx(), output);
  }
  
  // optional int32 goods_per_page = 17 [default = 91];
  if (has_goods_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->goods_per_page(), output);
  }
  
  // optional int32 good_num = 18 [default = 91];
  if (has_good_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->good_num(), output);
  }
  
  // optional int32 poi_per_page = 19 [default = 10];
  if (has_poi_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->poi_per_page(), output);
  }
  
  // optional int32 poi_num = 20 [default = 20];
  if (has_poi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->poi_num(), output);
  }
  
  // optional int32 goods_per_poi = 21 [default = 10];
  if (has_goods_per_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->goods_per_poi(), output);
  }
  
  // optional string cuid = 22 [default = ""];
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->cuid(), output);
  }
  
  // optional int32 client = 23 [default = 3];
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->client(), output);
  }
  
  // optional string s = 24 [default = "realtime_push"];
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->s(), output);
  }
  
  // optional string baidu_id = 25;
  if (has_baidu_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baidu_id().data(), this->baidu_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->baidu_id(), output);
  }
  
  // optional int32 is_expired = 26 [default = 0];
  if (has_is_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->is_expired(), output);
  }
  
  // optional string location = 27;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->location(), output);
  }
  
  // optional string keywords = 29;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->keywords(), output);
  }
  
  // optional int32 is_goflush = 30 [default = 0];
  if (has_is_goflush()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->is_goflush(), output);
  }
  
  // optional string tags = 31;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->tags(), output);
  }
  
  // optional string border = 32;
  if (has_border()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->border().data(), this->border().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->border(), output);
  }
  
  // optional int32 border_start_distance = 33;
  if (has_border_start_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->border_start_distance(), output);
  }
  
  // optional int32 border_distance = 34 [default = 500];
  if (has_border_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->border_distance(), output);
  }
  
  // optional int32 verbose = 35;
  if (has_verbose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->verbose(), output);
  }
  
  // optional string coor_sys = 36 [default = "google"];
  if (has_coor_sys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coor_sys().data(), this->coor_sys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->coor_sys(), output);
  }
  
  // optional string nearby_id = 37;
  if (has_nearby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nearby_id().data(), this->nearby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->nearby_id(), output);
  }
  
  // optional string str_customized_location = 38;
  if (has_str_customized_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_customized_location().data(), this->str_customized_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->str_customized_location(), output);
  }
  
  // optional string userID = 39;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->userid(), output);
  }
  
  // optional string need_poi = 40 [default = "1"];
  if (has_need_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->need_poi().data(), this->need_poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->need_poi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_new = 1 [default = 0];
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_new(), target);
  }
  
  // optional int32 checkin_time = 2 [default = -1];
  if (has_checkin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkin_time(), target);
  }
  
  // optional int32 checkout_time = 3 [default = -1];
  if (has_checkout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->checkout_time(), target);
  }
  
  // optional int64 city_id = 4;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->city_id(), target);
  }
  
  // optional int32 channel_type = 5 [default = 8];
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel_type(), target);
  }
  
  // optional string str_catg = 6 [default = "0"];
  if (has_str_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_catg().data(), this->str_catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->str_catg(), target);
  }
  
  // optional string str_subcatg = 7 [default = "0"];
  if (has_str_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_subcatg().data(), this->str_subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str_subcatg(), target);
  }
  
  // optional string str_thdcatg = 8 [default = "0"];
  if (has_str_thdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_thdcatg().data(), this->str_thdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str_thdcatg(), target);
  }
  
  // optional string str_shop_dist = 9 [default = "0"];
  if (has_str_shop_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_dist().data(), this->str_shop_dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str_shop_dist(), target);
  }
  
  // optional string str_shop_range = 10 [default = "0"];
  if (has_str_shop_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_shop_range().data(), this->str_shop_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->str_shop_range(), target);
  }
  
  // optional string str_sub_line = 11;
  if (has_str_sub_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_sub_line().data(), this->str_sub_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->str_sub_line(), target);
  }
  
  // optional string str_sub_station = 12;
  if (has_str_sub_station()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_sub_station().data(), this->str_sub_station().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->str_sub_station(), target);
  }
  
  // repeated int32 sub_station = 13;
  for (int i = 0; i < this->sub_station_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->sub_station(i), target);
  }
  
  // optional string str_site_list = 14 [default = "0"];
  if (has_str_site_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_site_list().data(), this->str_site_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->str_site_list(), target);
  }
  
  // optional int32 sort_type = 15 [default = 0];
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sort_type(), target);
  }
  
  // optional int32 start_idx = 16 [default = 1];
  if (has_start_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->start_idx(), target);
  }
  
  // optional int32 goods_per_page = 17 [default = 91];
  if (has_goods_per_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->goods_per_page(), target);
  }
  
  // optional int32 good_num = 18 [default = 91];
  if (has_good_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->good_num(), target);
  }
  
  // optional int32 poi_per_page = 19 [default = 10];
  if (has_poi_per_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->poi_per_page(), target);
  }
  
  // optional int32 poi_num = 20 [default = 20];
  if (has_poi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->poi_num(), target);
  }
  
  // optional int32 goods_per_poi = 21 [default = 10];
  if (has_goods_per_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->goods_per_poi(), target);
  }
  
  // optional string cuid = 22 [default = ""];
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->cuid(), target);
  }
  
  // optional int32 client = 23 [default = 3];
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->client(), target);
  }
  
  // optional string s = 24 [default = "realtime_push"];
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->s(), target);
  }
  
  // optional string baidu_id = 25;
  if (has_baidu_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->baidu_id().data(), this->baidu_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->baidu_id(), target);
  }
  
  // optional int32 is_expired = 26 [default = 0];
  if (has_is_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->is_expired(), target);
  }
  
  // optional string location = 27;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->location(), target);
  }
  
  // optional string keywords = 29;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->keywords(), target);
  }
  
  // optional int32 is_goflush = 30 [default = 0];
  if (has_is_goflush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->is_goflush(), target);
  }
  
  // optional string tags = 31;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->tags(), target);
  }
  
  // optional string border = 32;
  if (has_border()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->border().data(), this->border().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->border(), target);
  }
  
  // optional int32 border_start_distance = 33;
  if (has_border_start_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->border_start_distance(), target);
  }
  
  // optional int32 border_distance = 34 [default = 500];
  if (has_border_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->border_distance(), target);
  }
  
  // optional int32 verbose = 35;
  if (has_verbose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->verbose(), target);
  }
  
  // optional string coor_sys = 36 [default = "google"];
  if (has_coor_sys()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coor_sys().data(), this->coor_sys().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->coor_sys(), target);
  }
  
  // optional string nearby_id = 37;
  if (has_nearby_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nearby_id().data(), this->nearby_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->nearby_id(), target);
  }
  
  // optional string str_customized_location = 38;
  if (has_str_customized_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_customized_location().data(), this->str_customized_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->str_customized_location(), target);
  }
  
  // optional string userID = 39;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->userid(), target);
  }
  
  // optional string need_poi = 40 [default = "1"];
  if (has_need_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->need_poi().data(), this->need_poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->need_poi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_new = 1 [default = 0];
    if (has_is_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_new());
    }
    
    // optional int32 checkin_time = 2 [default = -1];
    if (has_checkin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkin_time());
    }
    
    // optional int32 checkout_time = 3 [default = -1];
    if (has_checkout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkout_time());
    }
    
    // optional int64 city_id = 4;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->city_id());
    }
    
    // optional int32 channel_type = 5 [default = 8];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_type());
    }
    
    // optional string str_catg = 6 [default = "0"];
    if (has_str_catg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_catg());
    }
    
    // optional string str_subcatg = 7 [default = "0"];
    if (has_str_subcatg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_subcatg());
    }
    
    // optional string str_thdcatg = 8 [default = "0"];
    if (has_str_thdcatg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_thdcatg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string str_shop_dist = 9 [default = "0"];
    if (has_str_shop_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_shop_dist());
    }
    
    // optional string str_shop_range = 10 [default = "0"];
    if (has_str_shop_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_shop_range());
    }
    
    // optional string str_sub_line = 11;
    if (has_str_sub_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_sub_line());
    }
    
    // optional string str_sub_station = 12;
    if (has_str_sub_station()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_sub_station());
    }
    
    // optional string str_site_list = 14 [default = "0"];
    if (has_str_site_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_site_list());
    }
    
    // optional int32 sort_type = 15 [default = 0];
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_type());
    }
    
    // optional int32 start_idx = 16 [default = 1];
    if (has_start_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_idx());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 goods_per_page = 17 [default = 91];
    if (has_goods_per_page()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_per_page());
    }
    
    // optional int32 good_num = 18 [default = 91];
    if (has_good_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good_num());
    }
    
    // optional int32 poi_per_page = 19 [default = 10];
    if (has_poi_per_page()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poi_per_page());
    }
    
    // optional int32 poi_num = 20 [default = 20];
    if (has_poi_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poi_num());
    }
    
    // optional int32 goods_per_poi = 21 [default = 10];
    if (has_goods_per_poi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_per_poi());
    }
    
    // optional string cuid = 22 [default = ""];
    if (has_cuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional int32 client = 23 [default = 3];
    if (has_client()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }
    
    // optional string s = 24 [default = "realtime_push"];
    if (has_s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string baidu_id = 25;
    if (has_baidu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_id());
    }
    
    // optional int32 is_expired = 26 [default = 0];
    if (has_is_expired()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_expired());
    }
    
    // optional string location = 27;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }
    
    // optional string keywords = 29;
    if (has_keywords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }
    
    // optional int32 is_goflush = 30 [default = 0];
    if (has_is_goflush()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_goflush());
    }
    
    // optional string tags = 31;
    if (has_tags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional string border = 32;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->border());
    }
    
    // optional int32 border_start_distance = 33;
    if (has_border_start_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border_start_distance());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 border_distance = 34 [default = 500];
    if (has_border_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border_distance());
    }
    
    // optional int32 verbose = 35;
    if (has_verbose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verbose());
    }
    
    // optional string coor_sys = 36 [default = "google"];
    if (has_coor_sys()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coor_sys());
    }
    
    // optional string nearby_id = 37;
    if (has_nearby_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nearby_id());
    }
    
    // optional string str_customized_location = 38;
    if (has_str_customized_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_customized_location());
    }
    
    // optional string userID = 39;
    if (has_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string need_poi = 40 [default = "1"];
    if (has_need_poi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->need_poi());
    }
    
  }
  // repeated int32 sub_station = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->sub_station_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sub_station(i));
    }
    total_size += 1 * this->sub_station_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASRequest::MergeFrom(const ASRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_station_.MergeFrom(from.sub_station_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_checkin_time()) {
      set_checkin_time(from.checkin_time());
    }
    if (from.has_checkout_time()) {
      set_checkout_time(from.checkout_time());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_str_catg()) {
      set_str_catg(from.str_catg());
    }
    if (from.has_str_subcatg()) {
      set_str_subcatg(from.str_subcatg());
    }
    if (from.has_str_thdcatg()) {
      set_str_thdcatg(from.str_thdcatg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_str_shop_dist()) {
      set_str_shop_dist(from.str_shop_dist());
    }
    if (from.has_str_shop_range()) {
      set_str_shop_range(from.str_shop_range());
    }
    if (from.has_str_sub_line()) {
      set_str_sub_line(from.str_sub_line());
    }
    if (from.has_str_sub_station()) {
      set_str_sub_station(from.str_sub_station());
    }
    if (from.has_str_site_list()) {
      set_str_site_list(from.str_site_list());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_goods_per_page()) {
      set_goods_per_page(from.goods_per_page());
    }
    if (from.has_good_num()) {
      set_good_num(from.good_num());
    }
    if (from.has_poi_per_page()) {
      set_poi_per_page(from.poi_per_page());
    }
    if (from.has_poi_num()) {
      set_poi_num(from.poi_num());
    }
    if (from.has_goods_per_poi()) {
      set_goods_per_poi(from.goods_per_poi());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_baidu_id()) {
      set_baidu_id(from.baidu_id());
    }
    if (from.has_is_expired()) {
      set_is_expired(from.is_expired());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_keywords()) {
      set_keywords(from.keywords());
    }
    if (from.has_is_goflush()) {
      set_is_goflush(from.is_goflush());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_border_start_distance()) {
      set_border_start_distance(from.border_start_distance());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_border_distance()) {
      set_border_distance(from.border_distance());
    }
    if (from.has_verbose()) {
      set_verbose(from.verbose());
    }
    if (from.has_coor_sys()) {
      set_coor_sys(from.coor_sys());
    }
    if (from.has_nearby_id()) {
      set_nearby_id(from.nearby_id());
    }
    if (from.has_str_customized_location()) {
      set_str_customized_location(from.str_customized_location());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_need_poi()) {
      set_need_poi(from.need_poi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASRequest::CopyFrom(const ASRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASRequest::IsInitialized() const {
  
  return true;
}

void ASRequest::Swap(ASRequest* other) {
  if (other != this) {
    std::swap(is_new_, other->is_new_);
    std::swap(checkin_time_, other->checkin_time_);
    std::swap(checkout_time_, other->checkout_time_);
    std::swap(city_id_, other->city_id_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(str_catg_, other->str_catg_);
    std::swap(str_subcatg_, other->str_subcatg_);
    std::swap(str_thdcatg_, other->str_thdcatg_);
    std::swap(str_shop_dist_, other->str_shop_dist_);
    std::swap(str_shop_range_, other->str_shop_range_);
    std::swap(str_sub_line_, other->str_sub_line_);
    std::swap(str_sub_station_, other->str_sub_station_);
    sub_station_.Swap(&other->sub_station_);
    std::swap(str_site_list_, other->str_site_list_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(start_idx_, other->start_idx_);
    std::swap(goods_per_page_, other->goods_per_page_);
    std::swap(good_num_, other->good_num_);
    std::swap(poi_per_page_, other->poi_per_page_);
    std::swap(poi_num_, other->poi_num_);
    std::swap(goods_per_poi_, other->goods_per_poi_);
    std::swap(cuid_, other->cuid_);
    std::swap(client_, other->client_);
    std::swap(s_, other->s_);
    std::swap(baidu_id_, other->baidu_id_);
    std::swap(is_expired_, other->is_expired_);
    std::swap(location_, other->location_);
    std::swap(keywords_, other->keywords_);
    std::swap(is_goflush_, other->is_goflush_);
    std::swap(tags_, other->tags_);
    std::swap(border_, other->border_);
    std::swap(border_start_distance_, other->border_start_distance_);
    std::swap(border_distance_, other->border_distance_);
    std::swap(verbose_, other->verbose_);
    std::swap(coor_sys_, other->coor_sys_);
    std::swap(nearby_id_, other->nearby_id_);
    std::swap(str_customized_location_, other->str_customized_location_);
    std::swap(userid_, other->userid_);
    std::swap(need_poi_, other->need_poi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASRequest_descriptor_;
  metadata.reflection = ASRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASFacetDetail::kCatgFieldNumber;
const int ASFacetDetail::kCityFieldNumber;
const int ASFacetDetail::kRangeFieldNumber;
const int ASFacetDetail::kDistFieldNumber;
const int ASFacetDetail::kSubcatgFieldNumber;
const int ASFacetDetail::kThirdcatgFieldNumber;
const int ASFacetDetail::kTagsFieldNumber;
const int ASFacetDetail::kSubwayLineFieldNumber;
const int ASFacetDetail::kSubwayStationFieldNumber;
#endif  // !_MSC_VER

ASFacetDetail::ASFacetDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASFacetDetail::InitAsDefaultInstance() {
}

ASFacetDetail::ASFacetDetail(const ASFacetDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASFacetDetail::SharedCtor() {
  _cached_size_ = 0;
  catg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thirdcatg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subway_line_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subway_station_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASFacetDetail::~ASFacetDetail() {
  SharedDtor();
}

void ASFacetDetail::SharedDtor() {
  if (catg_ != &::google::protobuf::internal::kEmptyString) {
    delete catg_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (range_ != &::google::protobuf::internal::kEmptyString) {
    delete range_;
  }
  if (dist_ != &::google::protobuf::internal::kEmptyString) {
    delete dist_;
  }
  if (subcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete subcatg_;
  }
  if (thirdcatg_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdcatg_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (subway_line_ != &::google::protobuf::internal::kEmptyString) {
    delete subway_line_;
  }
  if (subway_station_ != &::google::protobuf::internal::kEmptyString) {
    delete subway_station_;
  }
  if (this != default_instance_) {
  }
}

void ASFacetDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASFacetDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASFacetDetail_descriptor_;
}

const ASFacetDetail& ASFacetDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASFacetDetail* ASFacetDetail::default_instance_ = NULL;

ASFacetDetail* ASFacetDetail::New() const {
  return new ASFacetDetail;
}

void ASFacetDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_catg()) {
      if (catg_ != &::google::protobuf::internal::kEmptyString) {
        catg_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_range()) {
      if (range_ != &::google::protobuf::internal::kEmptyString) {
        range_->clear();
      }
    }
    if (has_dist()) {
      if (dist_ != &::google::protobuf::internal::kEmptyString) {
        dist_->clear();
      }
    }
    if (has_subcatg()) {
      if (subcatg_ != &::google::protobuf::internal::kEmptyString) {
        subcatg_->clear();
      }
    }
    if (has_thirdcatg()) {
      if (thirdcatg_ != &::google::protobuf::internal::kEmptyString) {
        thirdcatg_->clear();
      }
    }
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    if (has_subway_line()) {
      if (subway_line_ != &::google::protobuf::internal::kEmptyString) {
        subway_line_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_subway_station()) {
      if (subway_station_ != &::google::protobuf::internal::kEmptyString) {
        subway_station_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASFacetDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string catg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->catg().data(), this->catg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }
      
      // optional string city = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }
      
      // optional string range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->range().data(), this->range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dist;
        break;
      }
      
      // optional string dist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dist().data(), this->dist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subcatg;
        break;
      }
      
      // optional string subcatg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subcatg().data(), this->subcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thirdcatg;
        break;
      }
      
      // optional string thirdcatg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thirdcatg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thirdcatg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thirdcatg().data(), this->thirdcatg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        break;
      }
      
      // optional string tags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_subway_line;
        break;
      }
      
      // optional string subway_line = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subway_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subway_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subway_line().data(), this->subway_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_subway_station;
        break;
      }
      
      // optional string subway_station = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subway_station:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subway_station()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subway_station().data(), this->subway_station().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASFacetDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string catg = 1;
  if (has_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->catg().data(), this->catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->catg(), output);
  }
  
  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->city(), output);
  }
  
  // optional string range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->range(), output);
  }
  
  // optional string dist = 4;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dist().data(), this->dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dist(), output);
  }
  
  // optional string subcatg = 5;
  if (has_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcatg().data(), this->subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subcatg(), output);
  }
  
  // optional string thirdcatg = 6;
  if (has_thirdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thirdcatg().data(), this->thirdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->thirdcatg(), output);
  }
  
  // optional string tags = 7;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tags(), output);
  }
  
  // optional string subway_line = 8;
  if (has_subway_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subway_line().data(), this->subway_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->subway_line(), output);
  }
  
  // optional string subway_station = 9;
  if (has_subway_station()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subway_station().data(), this->subway_station().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->subway_station(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASFacetDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string catg = 1;
  if (has_catg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->catg().data(), this->catg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->catg(), target);
  }
  
  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }
  
  // optional string range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->range(), target);
  }
  
  // optional string dist = 4;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dist().data(), this->dist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dist(), target);
  }
  
  // optional string subcatg = 5;
  if (has_subcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcatg().data(), this->subcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subcatg(), target);
  }
  
  // optional string thirdcatg = 6;
  if (has_thirdcatg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thirdcatg().data(), this->thirdcatg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->thirdcatg(), target);
  }
  
  // optional string tags = 7;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tags(), target);
  }
  
  // optional string subway_line = 8;
  if (has_subway_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subway_line().data(), this->subway_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subway_line(), target);
  }
  
  // optional string subway_station = 9;
  if (has_subway_station()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subway_station().data(), this->subway_station().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subway_station(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASFacetDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string catg = 1;
    if (has_catg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catg());
    }
    
    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->range());
    }
    
    // optional string dist = 4;
    if (has_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dist());
    }
    
    // optional string subcatg = 5;
    if (has_subcatg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subcatg());
    }
    
    // optional string thirdcatg = 6;
    if (has_thirdcatg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thirdcatg());
    }
    
    // optional string tags = 7;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional string subway_line = 8;
    if (has_subway_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subway_line());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string subway_station = 9;
    if (has_subway_station()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subway_station());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASFacetDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASFacetDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASFacetDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASFacetDetail::MergeFrom(const ASFacetDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catg()) {
      set_catg(from.catg());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
    if (from.has_subcatg()) {
      set_subcatg(from.subcatg());
    }
    if (from.has_thirdcatg()) {
      set_thirdcatg(from.thirdcatg());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_subway_line()) {
      set_subway_line(from.subway_line());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subway_station()) {
      set_subway_station(from.subway_station());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASFacetDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASFacetDetail::CopyFrom(const ASFacetDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASFacetDetail::IsInitialized() const {
  
  return true;
}

void ASFacetDetail::Swap(ASFacetDetail* other) {
  if (other != this) {
    std::swap(catg_, other->catg_);
    std::swap(city_, other->city_);
    std::swap(range_, other->range_);
    std::swap(dist_, other->dist_);
    std::swap(subcatg_, other->subcatg_);
    std::swap(thirdcatg_, other->thirdcatg_);
    std::swap(tags_, other->tags_);
    std::swap(subway_line_, other->subway_line_);
    std::swap(subway_station_, other->subway_station_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASFacetDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASFacetDetail_descriptor_;
  metadata.reflection = ASFacetDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASPoiDetail::kPoiidFieldNumber;
const int ASPoiDetail::kXFieldNumber;
const int ASPoiDetail::kYFieldNumber;
const int ASPoiDetail::kDistanceFieldNumber;
#endif  // !_MSC_VER

ASPoiDetail::ASPoiDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASPoiDetail::InitAsDefaultInstance() {
}

ASPoiDetail::ASPoiDetail(const ASPoiDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASPoiDetail::SharedCtor() {
  _cached_size_ = 0;
  poiid_ = 0;
  x_ = 0;
  y_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASPoiDetail::~ASPoiDetail() {
  SharedDtor();
}

void ASPoiDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASPoiDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASPoiDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASPoiDetail_descriptor_;
}

const ASPoiDetail& ASPoiDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASPoiDetail* ASPoiDetail::default_instance_ = NULL;

ASPoiDetail* ASPoiDetail::New() const {
  return new ASPoiDetail;
}

void ASPoiDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poiid_ = 0;
    x_ = 0;
    y_ = 0;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASPoiDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 poiid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poiid_)));
          set_has_poiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distance;
        break;
      }
      
      // optional int32 distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASPoiDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 poiid = 1;
  if (has_poiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poiid(), output);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->distance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASPoiDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 poiid = 1;
  if (has_poiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poiid(), target);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->distance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASPoiDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 poiid = 1;
    if (has_poiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poiid());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASPoiDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASPoiDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASPoiDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASPoiDetail::MergeFrom(const ASPoiDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poiid()) {
      set_poiid(from.poiid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASPoiDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASPoiDetail::CopyFrom(const ASPoiDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASPoiDetail::IsInitialized() const {
  
  return true;
}

void ASPoiDetail::Swap(ASPoiDetail* other) {
  if (other != this) {
    std::swap(poiid_, other->poiid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASPoiDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASPoiDetail_descriptor_;
  metadata.reflection = ASPoiDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASDistInfo::kIdFieldNumber;
const int ASDistInfo::kNameFieldNumber;
#endif  // !_MSC_VER

ASDistInfo::ASDistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASDistInfo::InitAsDefaultInstance() {
}

ASDistInfo::ASDistInfo(const ASDistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASDistInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASDistInfo::~ASDistInfo() {
  SharedDtor();
}

void ASDistInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ASDistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASDistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASDistInfo_descriptor_;
}

const ASDistInfo& ASDistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASDistInfo* ASDistInfo::default_instance_ = NULL;

ASDistInfo* ASDistInfo::New() const {
  return new ASDistInfo;
}

void ASDistInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASDistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASDistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASDistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASDistInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASDistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASDistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASDistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASDistInfo::MergeFrom(const ASDistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASDistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASDistInfo::CopyFrom(const ASDistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASDistInfo::IsInitialized() const {
  
  return true;
}

void ASDistInfo::Swap(ASDistInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASDistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASDistInfo_descriptor_;
  metadata.reflection = ASDistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASDealDetail::kIdFieldNumber;
const int ASDealDetail::kImageFieldNumber;
const int ASDealDetail::kMidImageFieldNumber;
const int ASDealDetail::kTinyImageFieldNumber;
const int ASDealDetail::kBusinessTitleFieldNumber;
const int ASDealDetail::kMediumTitleFieldNumber;
const int ASDealDetail::kTitleHighPriceFieldNumber;
const int ASDealDetail::kMinTitleFieldNumber;
const int ASDealDetail::kPriceOriFieldNumber;
const int ASDealDetail::kPriceCurrentFieldNumber;
const int ASDealDetail::kTagsFieldNumber;
const int ASDealDetail::kIsNewFieldNumber;
const int ASDealDetail::kSaleCountFieldNumber;
const int ASDealDetail::kTypeFieldNumber;
const int ASDealDetail::kPayStartTimeFieldNumber;
const int ASDealDetail::kPayEndTimeFieldNumber;
const int ASDealDetail::kDealStartTimeFieldNumber;
const int ASDealDetail::kDealExpireTimeFieldNumber;
const int ASDealDetail::kCityNumFieldNumber;
const int ASDealDetail::kPoiNumFieldNumber;
const int ASDealDetail::kPoiFieldNumber;
const int ASDealDetail::kRangeFieldNumber;
const int ASDealDetail::kScoreFieldNumber;
const int ASDealDetail::kCommentNumFieldNumber;
const int ASDealDetail::kBoughtWeeklyFieldNumber;
const int ASDealDetail::kTinyUrlFieldNumber;
const int ASDealDetail::kDistInfoFieldNumber;
const int ASDealDetail::kIsNationalFieldNumber;
const int ASDealDetail::kNumBrotherFieldNumber;
#endif  // !_MSC_VER

ASDealDetail::ASDealDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASDealDetail::InitAsDefaultInstance() {
  dist_info_ = const_cast< ::lbs::da::openservice::ASDistInfo*>(&::lbs::da::openservice::ASDistInfo::default_instance());
}

ASDealDetail::ASDealDetail(const ASDealDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASDealDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mid_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiny_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  business_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medium_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_high_price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ori_ = 0;
  price_current_ = 0;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_new_ = 0;
  sale_count_ = 0;
  type_ = 0;
  pay_start_time_ = 0;
  pay_end_time_ = 0;
  deal_start_time_ = 0;
  deal_expire_time_ = 0;
  city_num_ = 0;
  poi_num_ = 0;
  range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  comment_num_ = 0;
  bought_weekly_ = 0;
  tiny_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dist_info_ = NULL;
  is_national_ = 0;
  num_brother_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASDealDetail::~ASDealDetail() {
  SharedDtor();
}

void ASDealDetail::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (mid_image_ != &::google::protobuf::internal::kEmptyString) {
    delete mid_image_;
  }
  if (tiny_image_ != &::google::protobuf::internal::kEmptyString) {
    delete tiny_image_;
  }
  if (business_title_ != &::google::protobuf::internal::kEmptyString) {
    delete business_title_;
  }
  if (medium_title_ != &::google::protobuf::internal::kEmptyString) {
    delete medium_title_;
  }
  if (title_high_price_ != &::google::protobuf::internal::kEmptyString) {
    delete title_high_price_;
  }
  if (min_title_ != &::google::protobuf::internal::kEmptyString) {
    delete min_title_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (range_ != &::google::protobuf::internal::kEmptyString) {
    delete range_;
  }
  if (tiny_url_ != &::google::protobuf::internal::kEmptyString) {
    delete tiny_url_;
  }
  if (this != default_instance_) {
    delete dist_info_;
  }
}

void ASDealDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASDealDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASDealDetail_descriptor_;
}

const ASDealDetail& ASDealDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASDealDetail* ASDealDetail::default_instance_ = NULL;

ASDealDetail* ASDealDetail::New() const {
  return new ASDealDetail;
}

void ASDealDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    if (has_mid_image()) {
      if (mid_image_ != &::google::protobuf::internal::kEmptyString) {
        mid_image_->clear();
      }
    }
    if (has_tiny_image()) {
      if (tiny_image_ != &::google::protobuf::internal::kEmptyString) {
        tiny_image_->clear();
      }
    }
    if (has_business_title()) {
      if (business_title_ != &::google::protobuf::internal::kEmptyString) {
        business_title_->clear();
      }
    }
    if (has_medium_title()) {
      if (medium_title_ != &::google::protobuf::internal::kEmptyString) {
        medium_title_->clear();
      }
    }
    if (has_title_high_price()) {
      if (title_high_price_ != &::google::protobuf::internal::kEmptyString) {
        title_high_price_->clear();
      }
    }
    if (has_min_title()) {
      if (min_title_ != &::google::protobuf::internal::kEmptyString) {
        min_title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    price_ori_ = 0;
    price_current_ = 0;
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
    is_new_ = 0;
    sale_count_ = 0;
    type_ = 0;
    pay_start_time_ = 0;
    pay_end_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    deal_start_time_ = 0;
    deal_expire_time_ = 0;
    city_num_ = 0;
    poi_num_ = 0;
    if (has_range()) {
      if (range_ != &::google::protobuf::internal::kEmptyString) {
        range_->clear();
      }
    }
    score_ = 0;
    comment_num_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bought_weekly_ = 0;
    if (has_tiny_url()) {
      if (tiny_url_ != &::google::protobuf::internal::kEmptyString) {
        tiny_url_->clear();
      }
    }
    if (has_dist_info()) {
      if (dist_info_ != NULL) dist_info_->::lbs::da::openservice::ASDistInfo::Clear();
    }
    is_national_ = 0;
    num_brother_ = 0;
  }
  poi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASDealDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }
      
      // optional string image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mid_image;
        break;
      }
      
      // optional string mid_image = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mid_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mid_image().data(), this->mid_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tiny_image;
        break;
      }
      
      // optional string tiny_image = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiny_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiny_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiny_image().data(), this->tiny_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_business_title;
        break;
      }
      
      // optional string business_title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_business_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_business_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->business_title().data(), this->business_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_medium_title;
        break;
      }
      
      // optional string medium_title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medium_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_medium_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->medium_title().data(), this->medium_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_title_high_price;
        break;
      }
      
      // optional string title_high_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_high_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title_high_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title_high_price().data(), this->title_high_price().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_min_title;
        break;
      }
      
      // optional string min_title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_min_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->min_title().data(), this->min_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_price_ori;
        break;
      }
      
      // optional int32 price_ori = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_ori:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_ori_)));
          set_has_price_ori();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_price_current;
        break;
      }
      
      // optional int32 price_current = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_current_)));
          set_has_price_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }
      
      // optional string tags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_new;
        break;
      }
      
      // optional int32 is_new = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sale_count;
        break;
      }
      
      // optional int32 sale_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_count_)));
          set_has_sale_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_type;
        break;
      }
      
      // optional int32 type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pay_start_time;
        break;
      }
      
      // optional int32 pay_start_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_start_time_)));
          set_has_pay_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pay_end_time;
        break;
      }
      
      // optional int32 pay_end_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_end_time_)));
          set_has_pay_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_deal_start_time;
        break;
      }
      
      // optional int32 deal_start_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deal_start_time_)));
          set_has_deal_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_deal_expire_time;
        break;
      }
      
      // optional int32 deal_expire_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deal_expire_time_)));
          set_has_deal_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_city_num;
        break;
      }
      
      // optional int32 city_num = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_num_)));
          set_has_city_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_poi_num;
        break;
      }
      
      // optional int32 poi_num = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poi_num_)));
          set_has_poi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_poi;
        break;
      }
      
      // repeated .lbs.da.openservice.ASPoiDetail poi = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_poi;
        if (input->ExpectTag(178)) goto parse_range;
        break;
      }
      
      // optional string range = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->range().data(), this->range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_score;
        break;
      }
      
      // optional int32 score = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_comment_num;
        break;
      }
      
      // optional int32 comment_num = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_num_)));
          set_has_comment_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_bought_weekly;
        break;
      }
      
      // optional int32 bought_weekly = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bought_weekly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bought_weekly_)));
          set_has_bought_weekly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_tiny_url;
        break;
      }
      
      // optional string tiny_url = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiny_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiny_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiny_url().data(), this->tiny_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_dist_info;
        break;
      }
      
      // optional .lbs.da.openservice.ASDistInfo dist_info = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dist_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dist_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_is_national;
        break;
      }
      
      // optional int32 is_national = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_national:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_national_)));
          set_has_is_national();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_num_brother;
        break;
      }
      
      // optional int32 num_brother = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_brother:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_brother_)));
          set_has_num_brother();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASDealDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image(), output);
  }
  
  // optional string mid_image = 3;
  if (has_mid_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mid_image().data(), this->mid_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mid_image(), output);
  }
  
  // optional string tiny_image = 4;
  if (has_tiny_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_image().data(), this->tiny_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tiny_image(), output);
  }
  
  // optional string business_title = 5;
  if (has_business_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->business_title().data(), this->business_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->business_title(), output);
  }
  
  // optional string medium_title = 6;
  if (has_medium_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->medium_title().data(), this->medium_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->medium_title(), output);
  }
  
  // optional string title_high_price = 7;
  if (has_title_high_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title_high_price().data(), this->title_high_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->title_high_price(), output);
  }
  
  // optional string min_title = 8;
  if (has_min_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_title().data(), this->min_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->min_title(), output);
  }
  
  // optional int32 price_ori = 9;
  if (has_price_ori()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->price_ori(), output);
  }
  
  // optional int32 price_current = 10;
  if (has_price_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->price_current(), output);
  }
  
  // optional string tags = 11;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tags(), output);
  }
  
  // optional int32 is_new = 12;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_new(), output);
  }
  
  // optional int32 sale_count = 13;
  if (has_sale_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sale_count(), output);
  }
  
  // optional int32 type = 14;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->type(), output);
  }
  
  // optional int32 pay_start_time = 15;
  if (has_pay_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pay_start_time(), output);
  }
  
  // optional int32 pay_end_time = 16;
  if (has_pay_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pay_end_time(), output);
  }
  
  // optional int32 deal_start_time = 17;
  if (has_deal_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->deal_start_time(), output);
  }
  
  // optional int32 deal_expire_time = 18;
  if (has_deal_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->deal_expire_time(), output);
  }
  
  // optional int32 city_num = 19;
  if (has_city_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->city_num(), output);
  }
  
  // optional int32 poi_num = 20;
  if (has_poi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->poi_num(), output);
  }
  
  // repeated .lbs.da.openservice.ASPoiDetail poi = 21;
  for (int i = 0; i < this->poi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->poi(i), output);
  }
  
  // optional string range = 22;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->range(), output);
  }
  
  // optional int32 score = 23;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->score(), output);
  }
  
  // optional int32 comment_num = 24;
  if (has_comment_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->comment_num(), output);
  }
  
  // optional int32 bought_weekly = 25;
  if (has_bought_weekly()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->bought_weekly(), output);
  }
  
  // optional string tiny_url = 26;
  if (has_tiny_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_url().data(), this->tiny_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->tiny_url(), output);
  }
  
  // optional .lbs.da.openservice.ASDistInfo dist_info = 27;
  if (has_dist_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->dist_info(), output);
  }
  
  // optional int32 is_national = 28;
  if (has_is_national()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->is_national(), output);
  }
  
  // optional int32 num_brother = 29;
  if (has_num_brother()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->num_brother(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASDealDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }
  
  // optional string mid_image = 3;
  if (has_mid_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mid_image().data(), this->mid_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mid_image(), target);
  }
  
  // optional string tiny_image = 4;
  if (has_tiny_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_image().data(), this->tiny_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tiny_image(), target);
  }
  
  // optional string business_title = 5;
  if (has_business_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->business_title().data(), this->business_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->business_title(), target);
  }
  
  // optional string medium_title = 6;
  if (has_medium_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->medium_title().data(), this->medium_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->medium_title(), target);
  }
  
  // optional string title_high_price = 7;
  if (has_title_high_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title_high_price().data(), this->title_high_price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title_high_price(), target);
  }
  
  // optional string min_title = 8;
  if (has_min_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_title().data(), this->min_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->min_title(), target);
  }
  
  // optional int32 price_ori = 9;
  if (has_price_ori()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->price_ori(), target);
  }
  
  // optional int32 price_current = 10;
  if (has_price_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->price_current(), target);
  }
  
  // optional string tags = 11;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tags(), target);
  }
  
  // optional int32 is_new = 12;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_new(), target);
  }
  
  // optional int32 sale_count = 13;
  if (has_sale_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->sale_count(), target);
  }
  
  // optional int32 type = 14;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->type(), target);
  }
  
  // optional int32 pay_start_time = 15;
  if (has_pay_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pay_start_time(), target);
  }
  
  // optional int32 pay_end_time = 16;
  if (has_pay_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pay_end_time(), target);
  }
  
  // optional int32 deal_start_time = 17;
  if (has_deal_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->deal_start_time(), target);
  }
  
  // optional int32 deal_expire_time = 18;
  if (has_deal_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->deal_expire_time(), target);
  }
  
  // optional int32 city_num = 19;
  if (has_city_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->city_num(), target);
  }
  
  // optional int32 poi_num = 20;
  if (has_poi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->poi_num(), target);
  }
  
  // repeated .lbs.da.openservice.ASPoiDetail poi = 21;
  for (int i = 0; i < this->poi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->poi(i), target);
  }
  
  // optional string range = 22;
  if (has_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->range().data(), this->range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->range(), target);
  }
  
  // optional int32 score = 23;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->score(), target);
  }
  
  // optional int32 comment_num = 24;
  if (has_comment_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->comment_num(), target);
  }
  
  // optional int32 bought_weekly = 25;
  if (has_bought_weekly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->bought_weekly(), target);
  }
  
  // optional string tiny_url = 26;
  if (has_tiny_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiny_url().data(), this->tiny_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->tiny_url(), target);
  }
  
  // optional .lbs.da.openservice.ASDistInfo dist_info = 27;
  if (has_dist_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->dist_info(), target);
  }
  
  // optional int32 is_national = 28;
  if (has_is_national()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->is_national(), target);
  }
  
  // optional int32 num_brother = 29;
  if (has_num_brother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->num_brother(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASDealDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }
    
    // optional string mid_image = 3;
    if (has_mid_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid_image());
    }
    
    // optional string tiny_image = 4;
    if (has_tiny_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiny_image());
    }
    
    // optional string business_title = 5;
    if (has_business_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->business_title());
    }
    
    // optional string medium_title = 6;
    if (has_medium_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->medium_title());
    }
    
    // optional string title_high_price = 7;
    if (has_title_high_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title_high_price());
    }
    
    // optional string min_title = 8;
    if (has_min_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->min_title());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 price_ori = 9;
    if (has_price_ori()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_ori());
    }
    
    // optional int32 price_current = 10;
    if (has_price_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_current());
    }
    
    // optional string tags = 11;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tags());
    }
    
    // optional int32 is_new = 12;
    if (has_is_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_new());
    }
    
    // optional int32 sale_count = 13;
    if (has_sale_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale_count());
    }
    
    // optional int32 type = 14;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 pay_start_time = 15;
    if (has_pay_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_start_time());
    }
    
    // optional int32 pay_end_time = 16;
    if (has_pay_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_end_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 deal_start_time = 17;
    if (has_deal_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deal_start_time());
    }
    
    // optional int32 deal_expire_time = 18;
    if (has_deal_expire_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deal_expire_time());
    }
    
    // optional int32 city_num = 19;
    if (has_city_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_num());
    }
    
    // optional int32 poi_num = 20;
    if (has_poi_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poi_num());
    }
    
    // optional string range = 22;
    if (has_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->range());
    }
    
    // optional int32 score = 23;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 comment_num = 24;
    if (has_comment_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_num());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 bought_weekly = 25;
    if (has_bought_weekly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bought_weekly());
    }
    
    // optional string tiny_url = 26;
    if (has_tiny_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiny_url());
    }
    
    // optional .lbs.da.openservice.ASDistInfo dist_info = 27;
    if (has_dist_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dist_info());
    }
    
    // optional int32 is_national = 28;
    if (has_is_national()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_national());
    }
    
    // optional int32 num_brother = 29;
    if (has_num_brother()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_brother());
    }
    
  }
  // repeated .lbs.da.openservice.ASPoiDetail poi = 21;
  total_size += 2 * this->poi_size();
  for (int i = 0; i < this->poi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poi(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASDealDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASDealDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASDealDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASDealDetail::MergeFrom(const ASDealDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  poi_.MergeFrom(from.poi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_mid_image()) {
      set_mid_image(from.mid_image());
    }
    if (from.has_tiny_image()) {
      set_tiny_image(from.tiny_image());
    }
    if (from.has_business_title()) {
      set_business_title(from.business_title());
    }
    if (from.has_medium_title()) {
      set_medium_title(from.medium_title());
    }
    if (from.has_title_high_price()) {
      set_title_high_price(from.title_high_price());
    }
    if (from.has_min_title()) {
      set_min_title(from.min_title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price_ori()) {
      set_price_ori(from.price_ori());
    }
    if (from.has_price_current()) {
      set_price_current(from.price_current());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_sale_count()) {
      set_sale_count(from.sale_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pay_start_time()) {
      set_pay_start_time(from.pay_start_time());
    }
    if (from.has_pay_end_time()) {
      set_pay_end_time(from.pay_end_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deal_start_time()) {
      set_deal_start_time(from.deal_start_time());
    }
    if (from.has_deal_expire_time()) {
      set_deal_expire_time(from.deal_expire_time());
    }
    if (from.has_city_num()) {
      set_city_num(from.city_num());
    }
    if (from.has_poi_num()) {
      set_poi_num(from.poi_num());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_comment_num()) {
      set_comment_num(from.comment_num());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bought_weekly()) {
      set_bought_weekly(from.bought_weekly());
    }
    if (from.has_tiny_url()) {
      set_tiny_url(from.tiny_url());
    }
    if (from.has_dist_info()) {
      mutable_dist_info()->::lbs::da::openservice::ASDistInfo::MergeFrom(from.dist_info());
    }
    if (from.has_is_national()) {
      set_is_national(from.is_national());
    }
    if (from.has_num_brother()) {
      set_num_brother(from.num_brother());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASDealDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASDealDetail::CopyFrom(const ASDealDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASDealDetail::IsInitialized() const {
  
  return true;
}

void ASDealDetail::Swap(ASDealDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(image_, other->image_);
    std::swap(mid_image_, other->mid_image_);
    std::swap(tiny_image_, other->tiny_image_);
    std::swap(business_title_, other->business_title_);
    std::swap(medium_title_, other->medium_title_);
    std::swap(title_high_price_, other->title_high_price_);
    std::swap(min_title_, other->min_title_);
    std::swap(price_ori_, other->price_ori_);
    std::swap(price_current_, other->price_current_);
    std::swap(tags_, other->tags_);
    std::swap(is_new_, other->is_new_);
    std::swap(sale_count_, other->sale_count_);
    std::swap(type_, other->type_);
    std::swap(pay_start_time_, other->pay_start_time_);
    std::swap(pay_end_time_, other->pay_end_time_);
    std::swap(deal_start_time_, other->deal_start_time_);
    std::swap(deal_expire_time_, other->deal_expire_time_);
    std::swap(city_num_, other->city_num_);
    std::swap(poi_num_, other->poi_num_);
    poi_.Swap(&other->poi_);
    std::swap(range_, other->range_);
    std::swap(score_, other->score_);
    std::swap(comment_num_, other->comment_num_);
    std::swap(bought_weekly_, other->bought_weekly_);
    std::swap(tiny_url_, other->tiny_url_);
    std::swap(dist_info_, other->dist_info_);
    std::swap(is_national_, other->is_national_);
    std::swap(num_brother_, other->num_brother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASDealDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASDealDetail_descriptor_;
  metadata.reflection = ASDealDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASResponse::kDataFieldNumber;
const int ASResponse::kHeadDataFieldNumber;
const int ASResponse::kFacetFieldNumber;
const int ASResponse::kTotalFieldNumber;
const int ASResponse::kRemainFieldNumber;
const int ASResponse::kLandmarkDistanceFieldNumber;
const int ASResponse::kNearbyDistanceFieldNumber;
const int ASResponse::kQueryDistFieldNumber;
const int ASResponse::kQueryRangeFieldNumber;
const int ASResponse::kHighlightsFieldNumber;
const int ASResponse::kExpiredAmountFieldNumber;
const int ASResponse::kDetailFieldNumber;
const int ASResponse::kExpIdsFieldNumber;
#endif  // !_MSC_VER

ASResponse::ASResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASResponse::InitAsDefaultInstance() {
  facet_ = const_cast< ::lbs::da::openservice::ASFacetDetail*>(&::lbs::da::openservice::ASFacetDetail::default_instance());
}

ASResponse::ASResponse(const ASResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facet_ = NULL;
  total_ = 0;
  remain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  landmark_distance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nearby_distance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_dist_ = 0;
  query_range_ = 0;
  highlights_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expired_amount_ = 0;
  exp_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASResponse::~ASResponse() {
  SharedDtor();
}

void ASResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (head_data_ != &::google::protobuf::internal::kEmptyString) {
    delete head_data_;
  }
  if (remain_ != &::google::protobuf::internal::kEmptyString) {
    delete remain_;
  }
  if (landmark_distance_ != &::google::protobuf::internal::kEmptyString) {
    delete landmark_distance_;
  }
  if (nearby_distance_ != &::google::protobuf::internal::kEmptyString) {
    delete nearby_distance_;
  }
  if (highlights_ != &::google::protobuf::internal::kEmptyString) {
    delete highlights_;
  }
  if (exp_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete exp_ids_;
  }
  if (this != default_instance_) {
    delete facet_;
  }
}

void ASResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASResponse_descriptor_;
}

const ASResponse& ASResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_2eproto();  return *default_instance_;
}

ASResponse* ASResponse::default_instance_ = NULL;

ASResponse* ASResponse::New() const {
  return new ASResponse;
}

void ASResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_head_data()) {
      if (head_data_ != &::google::protobuf::internal::kEmptyString) {
        head_data_->clear();
      }
    }
    if (has_facet()) {
      if (facet_ != NULL) facet_->::lbs::da::openservice::ASFacetDetail::Clear();
    }
    total_ = 0;
    if (has_remain()) {
      if (remain_ != &::google::protobuf::internal::kEmptyString) {
        remain_->clear();
      }
    }
    if (has_landmark_distance()) {
      if (landmark_distance_ != &::google::protobuf::internal::kEmptyString) {
        landmark_distance_->clear();
      }
    }
    if (has_nearby_distance()) {
      if (nearby_distance_ != &::google::protobuf::internal::kEmptyString) {
        nearby_distance_->clear();
      }
    }
    query_dist_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    query_range_ = 0;
    if (has_highlights()) {
      if (highlights_ != &::google::protobuf::internal::kEmptyString) {
        highlights_->clear();
      }
    }
    expired_amount_ = 0;
    if (has_exp_ids()) {
      if (exp_ids_ != &::google::protobuf::internal::kEmptyString) {
        exp_ids_->clear();
      }
    }
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_head_data;
        break;
      }
      
      // optional string head_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_data().data(), this->head_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_facet;
        break;
      }
      
      // optional .lbs.da.openservice.ASFacetDetail facet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }
      
      // optional int32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_remain;
        break;
      }
      
      // optional string remain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remain().data(), this->remain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_landmark_distance;
        break;
      }
      
      // optional string landmark_distance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_landmark_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landmark_distance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->landmark_distance().data(), this->landmark_distance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nearby_distance;
        break;
      }
      
      // optional string nearby_distance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nearby_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nearby_distance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nearby_distance().data(), this->nearby_distance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_query_dist;
        break;
      }
      
      // optional int32 query_dist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_dist_)));
          set_has_query_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_query_range;
        break;
      }
      
      // optional int32 query_range = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_range_)));
          set_has_query_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_highlights;
        break;
      }
      
      // optional string highlights = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highlights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_highlights()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->highlights().data(), this->highlights().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_expired_amount;
        break;
      }
      
      // optional int32 expired_amount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_amount_)));
          set_has_expired_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_detail;
        break;
      }
      
      // repeated .lbs.da.openservice.ASDealDetail detail = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_detail;
        if (input->ExpectTag(106)) goto parse_exp_ids;
        break;
      }
      
      // optional string exp_ids = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exp_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exp_ids().data(), this->exp_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  // optional string head_data = 2;
  if (has_head_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_data().data(), this->head_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->head_data(), output);
  }
  
  // optional .lbs.da.openservice.ASFacetDetail facet = 3;
  if (has_facet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->facet(), output);
  }
  
  // optional int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }
  
  // optional string remain = 5;
  if (has_remain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remain().data(), this->remain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->remain(), output);
  }
  
  // optional string landmark_distance = 6;
  if (has_landmark_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->landmark_distance().data(), this->landmark_distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->landmark_distance(), output);
  }
  
  // optional string nearby_distance = 7;
  if (has_nearby_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nearby_distance().data(), this->nearby_distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nearby_distance(), output);
  }
  
  // optional int32 query_dist = 8;
  if (has_query_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->query_dist(), output);
  }
  
  // optional int32 query_range = 9;
  if (has_query_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->query_range(), output);
  }
  
  // optional string highlights = 10;
  if (has_highlights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->highlights().data(), this->highlights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->highlights(), output);
  }
  
  // optional int32 expired_amount = 11;
  if (has_expired_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->expired_amount(), output);
  }
  
  // repeated .lbs.da.openservice.ASDealDetail detail = 12;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->detail(i), output);
  }
  
  // optional string exp_ids = 13;
  if (has_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exp_ids().data(), this->exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->exp_ids(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  // optional string head_data = 2;
  if (has_head_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_data().data(), this->head_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->head_data(), target);
  }
  
  // optional .lbs.da.openservice.ASFacetDetail facet = 3;
  if (has_facet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->facet(), target);
  }
  
  // optional int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }
  
  // optional string remain = 5;
  if (has_remain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remain().data(), this->remain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remain(), target);
  }
  
  // optional string landmark_distance = 6;
  if (has_landmark_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->landmark_distance().data(), this->landmark_distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->landmark_distance(), target);
  }
  
  // optional string nearby_distance = 7;
  if (has_nearby_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nearby_distance().data(), this->nearby_distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nearby_distance(), target);
  }
  
  // optional int32 query_dist = 8;
  if (has_query_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->query_dist(), target);
  }
  
  // optional int32 query_range = 9;
  if (has_query_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->query_range(), target);
  }
  
  // optional string highlights = 10;
  if (has_highlights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->highlights().data(), this->highlights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->highlights(), target);
  }
  
  // optional int32 expired_amount = 11;
  if (has_expired_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->expired_amount(), target);
  }
  
  // repeated .lbs.da.openservice.ASDealDetail detail = 12;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->detail(i), target);
  }
  
  // optional string exp_ids = 13;
  if (has_exp_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exp_ids().data(), this->exp_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->exp_ids(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
    // optional string head_data = 2;
    if (has_head_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_data());
    }
    
    // optional .lbs.da.openservice.ASFacetDetail facet = 3;
    if (has_facet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facet());
    }
    
    // optional int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }
    
    // optional string remain = 5;
    if (has_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remain());
    }
    
    // optional string landmark_distance = 6;
    if (has_landmark_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landmark_distance());
    }
    
    // optional string nearby_distance = 7;
    if (has_nearby_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nearby_distance());
    }
    
    // optional int32 query_dist = 8;
    if (has_query_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->query_dist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 query_range = 9;
    if (has_query_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->query_range());
    }
    
    // optional string highlights = 10;
    if (has_highlights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->highlights());
    }
    
    // optional int32 expired_amount = 11;
    if (has_expired_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired_amount());
    }
    
    // optional string exp_ids = 13;
    if (has_exp_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exp_ids());
    }
    
  }
  // repeated .lbs.da.openservice.ASDealDetail detail = 12;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASResponse::MergeFrom(const ASResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_head_data()) {
      set_head_data(from.head_data());
    }
    if (from.has_facet()) {
      mutable_facet()->::lbs::da::openservice::ASFacetDetail::MergeFrom(from.facet());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_remain()) {
      set_remain(from.remain());
    }
    if (from.has_landmark_distance()) {
      set_landmark_distance(from.landmark_distance());
    }
    if (from.has_nearby_distance()) {
      set_nearby_distance(from.nearby_distance());
    }
    if (from.has_query_dist()) {
      set_query_dist(from.query_dist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_query_range()) {
      set_query_range(from.query_range());
    }
    if (from.has_highlights()) {
      set_highlights(from.highlights());
    }
    if (from.has_expired_amount()) {
      set_expired_amount(from.expired_amount());
    }
    if (from.has_exp_ids()) {
      set_exp_ids(from.exp_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASResponse::CopyFrom(const ASResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASResponse::IsInitialized() const {
  
  return true;
}

void ASResponse::Swap(ASResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(head_data_, other->head_data_);
    std::swap(facet_, other->facet_);
    std::swap(total_, other->total_);
    std::swap(remain_, other->remain_);
    std::swap(landmark_distance_, other->landmark_distance_);
    std::swap(nearby_distance_, other->nearby_distance_);
    std::swap(query_dist_, other->query_dist_);
    std::swap(query_range_, other->query_range_);
    std::swap(highlights_, other->highlights_);
    std::swap(expired_amount_, other->expired_amount_);
    detail_.Swap(&other->detail_);
    std::swap(exp_ids_, other->exp_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASResponse_descriptor_;
  metadata.reflection = ASResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
