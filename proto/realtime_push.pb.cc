// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "realtime_push.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* PoiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AoiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AoiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTriggeredInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTriggeredInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPushDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPushDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisKeyVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisKeyVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCenterPushInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCenterPushInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCenterPushDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCenterPushDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPushDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPushDetailResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PushActionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_realtime_5fpush_2eproto() {
  protobuf_AddDesc_realtime_5fpush_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "realtime_push.proto");
  GOOGLE_CHECK(file != NULL);
  PoiInfo_descriptor_ = file->message_type(0);
  static const int PoiInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_tag_),
  };
  PoiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoiInfo_descriptor_,
      PoiInfo::default_instance_,
      PoiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoiInfo));
  AoiInfo_descriptor_ = file->message_type(1);
  static const int AoiInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiInfo, aoi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiInfo, aoi_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiInfo, aoi_name_),
  };
  AoiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AoiInfo_descriptor_,
      AoiInfo::default_instance_,
      AoiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AoiInfo));
  TrajStatusInfo_descriptor_ = file->message_type(2);
  static const int TrajStatusInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusInfo, traj_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusInfo, mercator_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusInfo, mercator_y_),
  };
  TrajStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajStatusInfo_descriptor_,
      TrajStatusInfo::default_instance_,
      TrajStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajStatusInfo));
  UserTriggeredInfo_descriptor_ = file->message_type(3);
  static const int UserTriggeredInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, passport_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, mercator_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, mercator_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, tsmcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, last_log_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, target_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, cond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, cond_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, append_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, triggered_poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, triggered_aoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, triggered_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, triggered_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, os_name_),
  };
  UserTriggeredInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTriggeredInfo_descriptor_,
      UserTriggeredInfo::default_instance_,
      UserTriggeredInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTriggeredInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTriggeredInfo));
  GetPushDetailRequest_descriptor_ = file->message_type(4);
  static const int GetPushDetailRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, passport_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, cond_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, triggered_info_),
  };
  GetPushDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPushDetailRequest_descriptor_,
      GetPushDetailRequest::default_instance_,
      GetPushDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPushDetailRequest));
  RedisKeyVal_descriptor_ = file->message_type(5);
  static const int RedisKeyVal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, expire_seconds_),
  };
  RedisKeyVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisKeyVal_descriptor_,
      RedisKeyVal::default_instance_,
      RedisKeyVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisKeyVal));
  MsgCenterPushInfo_descriptor_ = file->message_type(6);
  static const int MsgCenterPushInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, tuanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, situationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, daysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, dealsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, strsitelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, eventid_),
  };
  MsgCenterPushInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCenterPushInfo_descriptor_,
      MsgCenterPushInfo::default_instance_,
      MsgCenterPushInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCenterPushInfo));
  MsgCenterPushDetail_descriptor_ = file->message_type(7);
  static const int MsgCenterPushDetail_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, utype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, prod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, et_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, info_),
  };
  MsgCenterPushDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCenterPushDetail_descriptor_,
      MsgCenterPushDetail::default_instance_,
      MsgCenterPushDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCenterPushDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCenterPushDetail));
  GetPushDetailResponse_descriptor_ = file->message_type(8);
  static const int GetPushDetailResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, trigger_cond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, passport_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, redis_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, push_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, sample_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, action_type_),
  };
  GetPushDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPushDetailResponse_descriptor_,
      GetPushDetailResponse::default_instance_,
      GetPushDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPushDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPushDetailResponse));
  PushActionType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_realtime_5fpush_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoiInfo_descriptor_, &PoiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AoiInfo_descriptor_, &AoiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajStatusInfo_descriptor_, &TrajStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTriggeredInfo_descriptor_, &UserTriggeredInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPushDetailRequest_descriptor_, &GetPushDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisKeyVal_descriptor_, &RedisKeyVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCenterPushInfo_descriptor_, &MsgCenterPushInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCenterPushDetail_descriptor_, &MsgCenterPushDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPushDetailResponse_descriptor_, &GetPushDetailResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_realtime_5fpush_2eproto() {
  delete PoiInfo::default_instance_;
  delete PoiInfo_reflection_;
  delete AoiInfo::default_instance_;
  delete AoiInfo_reflection_;
  delete TrajStatusInfo::default_instance_;
  delete TrajStatusInfo_reflection_;
  delete UserTriggeredInfo::default_instance_;
  delete UserTriggeredInfo_reflection_;
  delete GetPushDetailRequest::default_instance_;
  delete GetPushDetailRequest_reflection_;
  delete RedisKeyVal::default_instance_;
  delete RedisKeyVal_reflection_;
  delete MsgCenterPushInfo::default_instance_;
  delete MsgCenterPushInfo_reflection_;
  delete MsgCenterPushDetail::default_instance_;
  delete MsgCenterPushDetail_reflection_;
  delete GetPushDetailResponse::default_instance_;
  delete GetPushDetailResponse_reflection_;
}

void protobuf_AddDesc_realtime_5fpush_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lbs::da::openservice::protobuf_AddDesc_pbrpc_2eproto();
  ::lbs::da::openservice::protobuf_AddDesc_regist_5fcondition_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023realtime_push.proto\022\022lbs.da.openservic"
    "e\032\013pbrpc.proto\032\026regist_condition.proto\"W"
    "\n\007PoiInfo\022\016\n\006poi_id\030\001 \001(\t\022\r\n\005poi_x\030\002 \001(\001"
    "\022\r\n\005poi_y\030\003 \001(\001\022\r\n\005poi_r\030\004 \001(\001\022\017\n\007poi_ta"
    "g\030\005 \001(\t\"<\n\007AoiInfo\022\016\n\006aoi_id\030\001 \001(\t\022\017\n\007ao"
    "i_tag\030\002 \001(\t\022\020\n\010aoi_name\030\003 \001(\t\"q\n\016TrajSta"
    "tusInfo\0227\n\013traj_status\030\001 \001(\0162\".lbs.da.op"
    "enservice.UserTrajStatus\022\022\n\nmercator_x\030\002"
    " \001(\001\022\022\n\nmercator_y\030\003 \001(\001\"\267\003\n\021UserTrigger"
    "edInfo\022\014\n\004cuid\030\001 \001(\t\022\023\n\013passport_id\030\002 \001("
    "\t\022\022\n\nmercator_x\030\003 \001(\001\022\022\n\nmercator_y\030\004 \001("
    "\001\022\016\n\006tsmcid\030\005 \001(\t\022\025\n\rlast_log_time\030\006 \001(\003"
    "\022\023\n\013target_city\030\007 \001(\003\022\017\n\007cond_id\030\010 \001(\t\022\020"
    "\n\010cond_tag\030\t \001(\t\022\016\n\006append\030\n \001(\t\0222\n\rtrig"
    "gered_poi\030\013 \003(\0132\033.lbs.da.openservice.Poi"
    "Info\0222\n\rtriggered_aoi\030\014 \003(\0132\033.lbs.da.ope"
    "nservice.AoiInfo\022<\n\020triggered_status\030\r \001"
    "(\0132\".lbs.da.openservice.TrajStatusInfo\0221"
    "\n\017triggered_rules\030\016 \003(\0132\030.lbs.da.openser"
    "vice.Rule\022\017\n\007os_name\030\017 \001(\t\"\275\001\n\024GetPushDe"
    "tailRequest\0221\n\006header\030\001 \001(\0132!.lbs.da.ope"
    "nservice.RequestHeader\022\014\n\004cuid\030\002 \001(\t\022\023\n\013"
    "passport_id\030\003 \001(\t\022\020\n\010cond_tag\030\004 \001(\t\022=\n\016t"
    "riggered_info\030\005 \001(\0132%.lbs.da.openservice"
    ".UserTriggeredInfo\"O\n\013RedisKeyVal\022\016\n\006sou"
    "rce\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\013\n\003val\030\003 \001(\t\022\026\n\016e"
    "xpire_seconds\030\004 \001(\003\"\223\001\n\021MsgCenterPushInf"
    "o\022\016\n\006tuanid\030\001 \001(\005\022\023\n\013situationid\030\002 \001(\005\022\020"
    "\n\010startday\030\003 \001(\005\022\017\n\007daysize\030\004 \001(\005\022\020\n\010dea"
    "lsize\030\005 \001(\005\022\023\n\013strsitelist\030\006 \001(\005\022\017\n\007even"
    "tid\030\007 \001(\005\"\222\002\n\023MsgCenterPushDetail\022\013\n\003pid"
    "\030\001 \001(\t\022\r\n\005utype\030\002 \001(\005\022\013\n\003uid\030\003 \001(\t\022\r\n\005ti"
    "tle\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\014\n\004type\030\006 \001(\005"
    "\022\017\n\004prod\030\007 \001(\005:\0011\022\020\n\010operator\030\010 \001(\t\022\020\n\003s"
    "rc\030\t \001(\t:\003srh\022\r\n\002at\030\n \001(\005:\0010\022\017\n\003seq\030\013 \001("
    "\005:\002-1\022\r\n\002et\030\014 \001(\005:\0010\022\013\n\003exp\030\r \001(\005\0223\n\004inf"
    "o\030\016 \001(\0132%.lbs.da.openservice.MsgCenterPu"
    "shInfo\"\223\002\n\025GetPushDetailResponse\022\027\n\017trig"
    "ger_cond_id\030\001 \001(\t\022\014\n\004cuid\030\002 \001(\t\022\023\n\013passp"
    "ort_id\030\003 \001(\t\0223\n\nredis_data\030\005 \003(\0132\037.lbs.d"
    "a.openservice.RedisKeyVal\022<\n\013push_detail"
    "\030\006 \001(\0132\'.lbs.da.openservice.MsgCenterPus"
    "hDetail\022\022\n\nsample_ids\030\007 \001(\t\0227\n\013action_ty"
    "pe\030\010 \001(\0162\".lbs.da.openservice.PushAction"
    "Type*d\n\016PushActionType\022\r\n\tNO_ACTION\020\001\022\017\n"
    "\013WRITE_REDIS\020\002\022\022\n\016PUSH_MSGCENTER\020\003\022\036\n\032WR"
    "ITE_REDIS_PUSH_MSGCENTER\020\004B\002H\001", 1870);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "realtime_push.proto", &protobuf_RegisterTypes);
  PoiInfo::default_instance_ = new PoiInfo();
  AoiInfo::default_instance_ = new AoiInfo();
  TrajStatusInfo::default_instance_ = new TrajStatusInfo();
  UserTriggeredInfo::default_instance_ = new UserTriggeredInfo();
  GetPushDetailRequest::default_instance_ = new GetPushDetailRequest();
  RedisKeyVal::default_instance_ = new RedisKeyVal();
  MsgCenterPushInfo::default_instance_ = new MsgCenterPushInfo();
  MsgCenterPushDetail::default_instance_ = new MsgCenterPushDetail();
  GetPushDetailResponse::default_instance_ = new GetPushDetailResponse();
  PoiInfo::default_instance_->InitAsDefaultInstance();
  AoiInfo::default_instance_->InitAsDefaultInstance();
  TrajStatusInfo::default_instance_->InitAsDefaultInstance();
  UserTriggeredInfo::default_instance_->InitAsDefaultInstance();
  GetPushDetailRequest::default_instance_->InitAsDefaultInstance();
  RedisKeyVal::default_instance_->InitAsDefaultInstance();
  MsgCenterPushInfo::default_instance_->InitAsDefaultInstance();
  MsgCenterPushDetail::default_instance_->InitAsDefaultInstance();
  GetPushDetailResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_realtime_5fpush_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_realtime_5fpush_2eproto {
  StaticDescriptorInitializer_realtime_5fpush_2eproto() {
    protobuf_AddDesc_realtime_5fpush_2eproto();
  }
} static_descriptor_initializer_realtime_5fpush_2eproto_;

const ::google::protobuf::EnumDescriptor* PushActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushActionType_descriptor_;
}
bool PushActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PoiInfo::kPoiIdFieldNumber;
const int PoiInfo::kPoiXFieldNumber;
const int PoiInfo::kPoiYFieldNumber;
const int PoiInfo::kPoiRFieldNumber;
const int PoiInfo::kPoiTagFieldNumber;
#endif  // !_MSC_VER

PoiInfo::PoiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoiInfo::InitAsDefaultInstance() {
}

PoiInfo::PoiInfo(const PoiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoiInfo::SharedCtor() {
  _cached_size_ = 0;
  poi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poi_x_ = 0;
  poi_y_ = 0;
  poi_r_ = 0;
  poi_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiInfo::~PoiInfo() {
  SharedDtor();
}

void PoiInfo::SharedDtor() {
  if (poi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_id_;
  }
  if (poi_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_tag_;
  }
  if (this != default_instance_) {
  }
}

void PoiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiInfo_descriptor_;
}

const PoiInfo& PoiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

PoiInfo* PoiInfo::default_instance_ = NULL;

PoiInfo* PoiInfo::New() const {
  return new PoiInfo;
}

void PoiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poi_id()) {
      if (poi_id_ != &::google::protobuf::internal::kEmptyString) {
        poi_id_->clear();
      }
    }
    poi_x_ = 0;
    poi_y_ = 0;
    poi_r_ = 0;
    if (has_poi_tag()) {
      if (poi_tag_ != &::google::protobuf::internal::kEmptyString) {
        poi_tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi_id().data(), this->poi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_poi_x;
        break;
      }
      
      // optional double poi_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_x_)));
          set_has_poi_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_poi_y;
        break;
      }
      
      // optional double poi_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_y_)));
          set_has_poi_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_poi_r;
        break;
      }
      
      // optional double poi_r = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_r_)));
          set_has_poi_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poi_tag;
        break;
      }
      
      // optional string poi_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi_tag().data(), this->poi_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poi_id = 1;
  if (has_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_id().data(), this->poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poi_id(), output);
  }
  
  // optional double poi_x = 2;
  if (has_poi_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->poi_x(), output);
  }
  
  // optional double poi_y = 3;
  if (has_poi_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->poi_y(), output);
  }
  
  // optional double poi_r = 4;
  if (has_poi_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->poi_r(), output);
  }
  
  // optional string poi_tag = 5;
  if (has_poi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_tag().data(), this->poi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poi_tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poi_id = 1;
  if (has_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_id().data(), this->poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poi_id(), target);
  }
  
  // optional double poi_x = 2;
  if (has_poi_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->poi_x(), target);
  }
  
  // optional double poi_y = 3;
  if (has_poi_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->poi_y(), target);
  }
  
  // optional double poi_r = 4;
  if (has_poi_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->poi_r(), target);
  }
  
  // optional string poi_tag = 5;
  if (has_poi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_tag().data(), this->poi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poi_tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoiInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poi_id = 1;
    if (has_poi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi_id());
    }
    
    // optional double poi_x = 2;
    if (has_poi_x()) {
      total_size += 1 + 8;
    }
    
    // optional double poi_y = 3;
    if (has_poi_y()) {
      total_size += 1 + 8;
    }
    
    // optional double poi_r = 4;
    if (has_poi_r()) {
      total_size += 1 + 8;
    }
    
    // optional string poi_tag = 5;
    if (has_poi_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi_tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoiInfo::MergeFrom(const PoiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poi_id()) {
      set_poi_id(from.poi_id());
    }
    if (from.has_poi_x()) {
      set_poi_x(from.poi_x());
    }
    if (from.has_poi_y()) {
      set_poi_y(from.poi_y());
    }
    if (from.has_poi_r()) {
      set_poi_r(from.poi_r());
    }
    if (from.has_poi_tag()) {
      set_poi_tag(from.poi_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiInfo::CopyFrom(const PoiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiInfo::IsInitialized() const {
  
  return true;
}

void PoiInfo::Swap(PoiInfo* other) {
  if (other != this) {
    std::swap(poi_id_, other->poi_id_);
    std::swap(poi_x_, other->poi_x_);
    std::swap(poi_y_, other->poi_y_);
    std::swap(poi_r_, other->poi_r_);
    std::swap(poi_tag_, other->poi_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiInfo_descriptor_;
  metadata.reflection = PoiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AoiInfo::kAoiIdFieldNumber;
const int AoiInfo::kAoiTagFieldNumber;
const int AoiInfo::kAoiNameFieldNumber;
#endif  // !_MSC_VER

AoiInfo::AoiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AoiInfo::InitAsDefaultInstance() {
}

AoiInfo::AoiInfo(const AoiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AoiInfo::SharedCtor() {
  _cached_size_ = 0;
  aoi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aoi_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aoi_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AoiInfo::~AoiInfo() {
  SharedDtor();
}

void AoiInfo::SharedDtor() {
  if (aoi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete aoi_id_;
  }
  if (aoi_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete aoi_tag_;
  }
  if (aoi_name_ != &::google::protobuf::internal::kEmptyString) {
    delete aoi_name_;
  }
  if (this != default_instance_) {
  }
}

void AoiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AoiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AoiInfo_descriptor_;
}

const AoiInfo& AoiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

AoiInfo* AoiInfo::default_instance_ = NULL;

AoiInfo* AoiInfo::New() const {
  return new AoiInfo;
}

void AoiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_aoi_id()) {
      if (aoi_id_ != &::google::protobuf::internal::kEmptyString) {
        aoi_id_->clear();
      }
    }
    if (has_aoi_tag()) {
      if (aoi_tag_ != &::google::protobuf::internal::kEmptyString) {
        aoi_tag_->clear();
      }
    }
    if (has_aoi_name()) {
      if (aoi_name_ != &::google::protobuf::internal::kEmptyString) {
        aoi_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AoiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string aoi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aoi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_id().data(), this->aoi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_aoi_tag;
        break;
      }
      
      // optional string aoi_tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoi_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aoi_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_tag().data(), this->aoi_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aoi_name;
        break;
      }
      
      // optional string aoi_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoi_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aoi_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_name().data(), this->aoi_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AoiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string aoi_id = 1;
  if (has_aoi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id().data(), this->aoi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->aoi_id(), output);
  }
  
  // optional string aoi_tag = 2;
  if (has_aoi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_tag().data(), this->aoi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->aoi_tag(), output);
  }
  
  // optional string aoi_name = 3;
  if (has_aoi_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_name().data(), this->aoi_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->aoi_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AoiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string aoi_id = 1;
  if (has_aoi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id().data(), this->aoi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->aoi_id(), target);
  }
  
  // optional string aoi_tag = 2;
  if (has_aoi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_tag().data(), this->aoi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aoi_tag(), target);
  }
  
  // optional string aoi_name = 3;
  if (has_aoi_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_name().data(), this->aoi_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aoi_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AoiInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string aoi_id = 1;
    if (has_aoi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aoi_id());
    }
    
    // optional string aoi_tag = 2;
    if (has_aoi_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aoi_tag());
    }
    
    // optional string aoi_name = 3;
    if (has_aoi_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aoi_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AoiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AoiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AoiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AoiInfo::MergeFrom(const AoiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aoi_id()) {
      set_aoi_id(from.aoi_id());
    }
    if (from.has_aoi_tag()) {
      set_aoi_tag(from.aoi_tag());
    }
    if (from.has_aoi_name()) {
      set_aoi_name(from.aoi_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AoiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AoiInfo::CopyFrom(const AoiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AoiInfo::IsInitialized() const {
  
  return true;
}

void AoiInfo::Swap(AoiInfo* other) {
  if (other != this) {
    std::swap(aoi_id_, other->aoi_id_);
    std::swap(aoi_tag_, other->aoi_tag_);
    std::swap(aoi_name_, other->aoi_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AoiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AoiInfo_descriptor_;
  metadata.reflection = AoiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajStatusInfo::kTrajStatusFieldNumber;
const int TrajStatusInfo::kMercatorXFieldNumber;
const int TrajStatusInfo::kMercatorYFieldNumber;
#endif  // !_MSC_VER

TrajStatusInfo::TrajStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajStatusInfo::InitAsDefaultInstance() {
}

TrajStatusInfo::TrajStatusInfo(const TrajStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  traj_status_ = 0;
  mercator_x_ = 0;
  mercator_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajStatusInfo::~TrajStatusInfo() {
  SharedDtor();
}

void TrajStatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajStatusInfo_descriptor_;
}

const TrajStatusInfo& TrajStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

TrajStatusInfo* TrajStatusInfo::default_instance_ = NULL;

TrajStatusInfo* TrajStatusInfo::New() const {
  return new TrajStatusInfo;
}

void TrajStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    traj_status_ = 0;
    mercator_x_ = 0;
    mercator_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lbs.da.openservice.UserTrajStatus traj_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::UserTrajStatus_IsValid(value)) {
            set_traj_status(static_cast< lbs::da::openservice::UserTrajStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mercator_x;
        break;
      }
      
      // optional double mercator_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_x_)));
          set_has_mercator_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mercator_y;
        break;
      }
      
      // optional double mercator_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_y_)));
          set_has_mercator_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lbs.da.openservice.UserTrajStatus traj_status = 1;
  if (has_traj_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->traj_status(), output);
  }
  
  // optional double mercator_x = 2;
  if (has_mercator_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mercator_x(), output);
  }
  
  // optional double mercator_y = 3;
  if (has_mercator_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mercator_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lbs.da.openservice.UserTrajStatus traj_status = 1;
  if (has_traj_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_status(), target);
  }
  
  // optional double mercator_x = 2;
  if (has_mercator_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mercator_x(), target);
  }
  
  // optional double mercator_y = 3;
  if (has_mercator_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mercator_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajStatusInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lbs.da.openservice.UserTrajStatus traj_status = 1;
    if (has_traj_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traj_status());
    }
    
    // optional double mercator_x = 2;
    if (has_mercator_x()) {
      total_size += 1 + 8;
    }
    
    // optional double mercator_y = 3;
    if (has_mercator_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajStatusInfo::MergeFrom(const TrajStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_traj_status()) {
      set_traj_status(from.traj_status());
    }
    if (from.has_mercator_x()) {
      set_mercator_x(from.mercator_x());
    }
    if (from.has_mercator_y()) {
      set_mercator_y(from.mercator_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajStatusInfo::CopyFrom(const TrajStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajStatusInfo::IsInitialized() const {
  
  return true;
}

void TrajStatusInfo::Swap(TrajStatusInfo* other) {
  if (other != this) {
    std::swap(traj_status_, other->traj_status_);
    std::swap(mercator_x_, other->mercator_x_);
    std::swap(mercator_y_, other->mercator_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajStatusInfo_descriptor_;
  metadata.reflection = TrajStatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTriggeredInfo::kCuidFieldNumber;
const int UserTriggeredInfo::kPassportIdFieldNumber;
const int UserTriggeredInfo::kMercatorXFieldNumber;
const int UserTriggeredInfo::kMercatorYFieldNumber;
const int UserTriggeredInfo::kTsmcidFieldNumber;
const int UserTriggeredInfo::kLastLogTimeFieldNumber;
const int UserTriggeredInfo::kTargetCityFieldNumber;
const int UserTriggeredInfo::kCondIdFieldNumber;
const int UserTriggeredInfo::kCondTagFieldNumber;
const int UserTriggeredInfo::kAppendFieldNumber;
const int UserTriggeredInfo::kTriggeredPoiFieldNumber;
const int UserTriggeredInfo::kTriggeredAoiFieldNumber;
const int UserTriggeredInfo::kTriggeredStatusFieldNumber;
const int UserTriggeredInfo::kTriggeredRulesFieldNumber;
const int UserTriggeredInfo::kOsNameFieldNumber;
#endif  // !_MSC_VER

UserTriggeredInfo::UserTriggeredInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserTriggeredInfo::InitAsDefaultInstance() {
  triggered_status_ = const_cast< ::lbs::da::openservice::TrajStatusInfo*>(&::lbs::da::openservice::TrajStatusInfo::default_instance());
}

UserTriggeredInfo::UserTriggeredInfo(const UserTriggeredInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserTriggeredInfo::SharedCtor() {
  _cached_size_ = 0;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passport_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mercator_x_ = 0;
  mercator_y_ = 0;
  tsmcid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_log_time_ = GOOGLE_LONGLONG(0);
  target_city_ = GOOGLE_LONGLONG(0);
  cond_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cond_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  append_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  triggered_status_ = NULL;
  os_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTriggeredInfo::~UserTriggeredInfo() {
  SharedDtor();
}

void UserTriggeredInfo::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
    delete passport_id_;
  }
  if (tsmcid_ != &::google::protobuf::internal::kEmptyString) {
    delete tsmcid_;
  }
  if (cond_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cond_id_;
  }
  if (cond_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete cond_tag_;
  }
  if (append_ != &::google::protobuf::internal::kEmptyString) {
    delete append_;
  }
  if (os_name_ != &::google::protobuf::internal::kEmptyString) {
    delete os_name_;
  }
  if (this != default_instance_) {
    delete triggered_status_;
  }
}

void UserTriggeredInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTriggeredInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTriggeredInfo_descriptor_;
}

const UserTriggeredInfo& UserTriggeredInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

UserTriggeredInfo* UserTriggeredInfo::default_instance_ = NULL;

UserTriggeredInfo* UserTriggeredInfo::New() const {
  return new UserTriggeredInfo;
}

void UserTriggeredInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_passport_id()) {
      if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
        passport_id_->clear();
      }
    }
    mercator_x_ = 0;
    mercator_y_ = 0;
    if (has_tsmcid()) {
      if (tsmcid_ != &::google::protobuf::internal::kEmptyString) {
        tsmcid_->clear();
      }
    }
    last_log_time_ = GOOGLE_LONGLONG(0);
    target_city_ = GOOGLE_LONGLONG(0);
    if (has_cond_id()) {
      if (cond_id_ != &::google::protobuf::internal::kEmptyString) {
        cond_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cond_tag()) {
      if (cond_tag_ != &::google::protobuf::internal::kEmptyString) {
        cond_tag_->clear();
      }
    }
    if (has_append()) {
      if (append_ != &::google::protobuf::internal::kEmptyString) {
        append_->clear();
      }
    }
    if (has_triggered_status()) {
      if (triggered_status_ != NULL) triggered_status_->::lbs::da::openservice::TrajStatusInfo::Clear();
    }
    if (has_os_name()) {
      if (os_name_ != &::google::protobuf::internal::kEmptyString) {
        os_name_->clear();
      }
    }
  }
  triggered_poi_.Clear();
  triggered_aoi_.Clear();
  triggered_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTriggeredInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passport_id;
        break;
      }
      
      // optional string passport_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passport_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passport_id().data(), this->passport_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mercator_x;
        break;
      }
      
      // optional double mercator_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_x_)));
          set_has_mercator_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_mercator_y;
        break;
      }
      
      // optional double mercator_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_y_)));
          set_has_mercator_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tsmcid;
        break;
      }
      
      // optional string tsmcid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tsmcid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tsmcid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tsmcid().data(), this->tsmcid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_log_time;
        break;
      }
      
      // optional int64 last_log_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_log_time_)));
          set_has_last_log_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_city;
        break;
      }
      
      // optional int64 target_city = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_city_)));
          set_has_target_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cond_id;
        break;
      }
      
      // optional string cond_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cond_id().data(), this->cond_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cond_tag;
        break;
      }
      
      // optional string cond_tag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cond_tag().data(), this->cond_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_append;
        break;
      }
      
      // optional string append = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_append()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->append().data(), this->append().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_triggered_poi;
        break;
      }
      
      // repeated .lbs.da.openservice.PoiInfo triggered_poi = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggered_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggered_poi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_triggered_poi;
        if (input->ExpectTag(98)) goto parse_triggered_aoi;
        break;
      }
      
      // repeated .lbs.da.openservice.AoiInfo triggered_aoi = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggered_aoi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggered_aoi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_triggered_aoi;
        if (input->ExpectTag(106)) goto parse_triggered_status;
        break;
      }
      
      // optional .lbs.da.openservice.TrajStatusInfo triggered_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggered_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triggered_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_triggered_rules;
        break;
      }
      
      // repeated .lbs.da.openservice.Rule triggered_rules = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggered_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggered_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_triggered_rules;
        if (input->ExpectTag(122)) goto parse_os_name;
        break;
      }
      
      // optional string os_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserTriggeredInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cuid = 1;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cuid(), output);
  }
  
  // optional string passport_id = 2;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passport_id(), output);
  }
  
  // optional double mercator_x = 3;
  if (has_mercator_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mercator_x(), output);
  }
  
  // optional double mercator_y = 4;
  if (has_mercator_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mercator_y(), output);
  }
  
  // optional string tsmcid = 5;
  if (has_tsmcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tsmcid().data(), this->tsmcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tsmcid(), output);
  }
  
  // optional int64 last_log_time = 6;
  if (has_last_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_log_time(), output);
  }
  
  // optional int64 target_city = 7;
  if (has_target_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->target_city(), output);
  }
  
  // optional string cond_id = 8;
  if (has_cond_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_id().data(), this->cond_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cond_id(), output);
  }
  
  // optional string cond_tag = 9;
  if (has_cond_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_tag().data(), this->cond_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cond_tag(), output);
  }
  
  // optional string append = 10;
  if (has_append()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->append().data(), this->append().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->append(), output);
  }
  
  // repeated .lbs.da.openservice.PoiInfo triggered_poi = 11;
  for (int i = 0; i < this->triggered_poi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->triggered_poi(i), output);
  }
  
  // repeated .lbs.da.openservice.AoiInfo triggered_aoi = 12;
  for (int i = 0; i < this->triggered_aoi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->triggered_aoi(i), output);
  }
  
  // optional .lbs.da.openservice.TrajStatusInfo triggered_status = 13;
  if (has_triggered_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->triggered_status(), output);
  }
  
  // repeated .lbs.da.openservice.Rule triggered_rules = 14;
  for (int i = 0; i < this->triggered_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->triggered_rules(i), output);
  }
  
  // optional string os_name = 15;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->os_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserTriggeredInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cuid = 1;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cuid(), target);
  }
  
  // optional string passport_id = 2;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passport_id(), target);
  }
  
  // optional double mercator_x = 3;
  if (has_mercator_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mercator_x(), target);
  }
  
  // optional double mercator_y = 4;
  if (has_mercator_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mercator_y(), target);
  }
  
  // optional string tsmcid = 5;
  if (has_tsmcid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tsmcid().data(), this->tsmcid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tsmcid(), target);
  }
  
  // optional int64 last_log_time = 6;
  if (has_last_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_log_time(), target);
  }
  
  // optional int64 target_city = 7;
  if (has_target_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->target_city(), target);
  }
  
  // optional string cond_id = 8;
  if (has_cond_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_id().data(), this->cond_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cond_id(), target);
  }
  
  // optional string cond_tag = 9;
  if (has_cond_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_tag().data(), this->cond_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cond_tag(), target);
  }
  
  // optional string append = 10;
  if (has_append()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->append().data(), this->append().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->append(), target);
  }
  
  // repeated .lbs.da.openservice.PoiInfo triggered_poi = 11;
  for (int i = 0; i < this->triggered_poi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->triggered_poi(i), target);
  }
  
  // repeated .lbs.da.openservice.AoiInfo triggered_aoi = 12;
  for (int i = 0; i < this->triggered_aoi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->triggered_aoi(i), target);
  }
  
  // optional .lbs.da.openservice.TrajStatusInfo triggered_status = 13;
  if (has_triggered_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->triggered_status(), target);
  }
  
  // repeated .lbs.da.openservice.Rule triggered_rules = 14;
  for (int i = 0; i < this->triggered_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->triggered_rules(i), target);
  }
  
  // optional string os_name = 15;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->os_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserTriggeredInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cuid = 1;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional string passport_id = 2;
    if (has_passport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport_id());
    }
    
    // optional double mercator_x = 3;
    if (has_mercator_x()) {
      total_size += 1 + 8;
    }
    
    // optional double mercator_y = 4;
    if (has_mercator_y()) {
      total_size += 1 + 8;
    }
    
    // optional string tsmcid = 5;
    if (has_tsmcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tsmcid());
    }
    
    // optional int64 last_log_time = 6;
    if (has_last_log_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_log_time());
    }
    
    // optional int64 target_city = 7;
    if (has_target_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_city());
    }
    
    // optional string cond_id = 8;
    if (has_cond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cond_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cond_tag = 9;
    if (has_cond_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cond_tag());
    }
    
    // optional string append = 10;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->append());
    }
    
    // optional .lbs.da.openservice.TrajStatusInfo triggered_status = 13;
    if (has_triggered_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triggered_status());
    }
    
    // optional string os_name = 15;
    if (has_os_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_name());
    }
    
  }
  // repeated .lbs.da.openservice.PoiInfo triggered_poi = 11;
  total_size += 1 * this->triggered_poi_size();
  for (int i = 0; i < this->triggered_poi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggered_poi(i));
  }
  
  // repeated .lbs.da.openservice.AoiInfo triggered_aoi = 12;
  total_size += 1 * this->triggered_aoi_size();
  for (int i = 0; i < this->triggered_aoi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggered_aoi(i));
  }
  
  // repeated .lbs.da.openservice.Rule triggered_rules = 14;
  total_size += 1 * this->triggered_rules_size();
  for (int i = 0; i < this->triggered_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggered_rules(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTriggeredInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTriggeredInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTriggeredInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTriggeredInfo::MergeFrom(const UserTriggeredInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggered_poi_.MergeFrom(from.triggered_poi_);
  triggered_aoi_.MergeFrom(from.triggered_aoi_);
  triggered_rules_.MergeFrom(from.triggered_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_passport_id()) {
      set_passport_id(from.passport_id());
    }
    if (from.has_mercator_x()) {
      set_mercator_x(from.mercator_x());
    }
    if (from.has_mercator_y()) {
      set_mercator_y(from.mercator_y());
    }
    if (from.has_tsmcid()) {
      set_tsmcid(from.tsmcid());
    }
    if (from.has_last_log_time()) {
      set_last_log_time(from.last_log_time());
    }
    if (from.has_target_city()) {
      set_target_city(from.target_city());
    }
    if (from.has_cond_id()) {
      set_cond_id(from.cond_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cond_tag()) {
      set_cond_tag(from.cond_tag());
    }
    if (from.has_append()) {
      set_append(from.append());
    }
    if (from.has_triggered_status()) {
      mutable_triggered_status()->::lbs::da::openservice::TrajStatusInfo::MergeFrom(from.triggered_status());
    }
    if (from.has_os_name()) {
      set_os_name(from.os_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTriggeredInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTriggeredInfo::CopyFrom(const UserTriggeredInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTriggeredInfo::IsInitialized() const {
  
  for (int i = 0; i < triggered_rules_size(); i++) {
    if (!this->triggered_rules(i).IsInitialized()) return false;
  }
  return true;
}

void UserTriggeredInfo::Swap(UserTriggeredInfo* other) {
  if (other != this) {
    std::swap(cuid_, other->cuid_);
    std::swap(passport_id_, other->passport_id_);
    std::swap(mercator_x_, other->mercator_x_);
    std::swap(mercator_y_, other->mercator_y_);
    std::swap(tsmcid_, other->tsmcid_);
    std::swap(last_log_time_, other->last_log_time_);
    std::swap(target_city_, other->target_city_);
    std::swap(cond_id_, other->cond_id_);
    std::swap(cond_tag_, other->cond_tag_);
    std::swap(append_, other->append_);
    triggered_poi_.Swap(&other->triggered_poi_);
    triggered_aoi_.Swap(&other->triggered_aoi_);
    std::swap(triggered_status_, other->triggered_status_);
    triggered_rules_.Swap(&other->triggered_rules_);
    std::swap(os_name_, other->os_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTriggeredInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTriggeredInfo_descriptor_;
  metadata.reflection = UserTriggeredInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPushDetailRequest::kHeaderFieldNumber;
const int GetPushDetailRequest::kCuidFieldNumber;
const int GetPushDetailRequest::kPassportIdFieldNumber;
const int GetPushDetailRequest::kCondTagFieldNumber;
const int GetPushDetailRequest::kTriggeredInfoFieldNumber;
#endif  // !_MSC_VER

GetPushDetailRequest::GetPushDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPushDetailRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
  triggered_info_ = const_cast< ::lbs::da::openservice::UserTriggeredInfo*>(&::lbs::da::openservice::UserTriggeredInfo::default_instance());
}

GetPushDetailRequest::GetPushDetailRequest(const GetPushDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPushDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passport_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cond_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  triggered_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPushDetailRequest::~GetPushDetailRequest() {
  SharedDtor();
}

void GetPushDetailRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
    delete passport_id_;
  }
  if (cond_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete cond_tag_;
  }
  if (this != default_instance_) {
    delete header_;
    delete triggered_info_;
  }
}

void GetPushDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPushDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPushDetailRequest_descriptor_;
}

const GetPushDetailRequest& GetPushDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

GetPushDetailRequest* GetPushDetailRequest::default_instance_ = NULL;

GetPushDetailRequest* GetPushDetailRequest::New() const {
  return new GetPushDetailRequest;
}

void GetPushDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_passport_id()) {
      if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
        passport_id_->clear();
      }
    }
    if (has_cond_tag()) {
      if (cond_tag_ != &::google::protobuf::internal::kEmptyString) {
        cond_tag_->clear();
      }
    }
    if (has_triggered_info()) {
      if (triggered_info_ != NULL) triggered_info_->::lbs::da::openservice::UserTriggeredInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPushDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passport_id;
        break;
      }
      
      // optional string passport_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passport_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passport_id().data(), this->passport_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cond_tag;
        break;
      }
      
      // optional string cond_tag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cond_tag().data(), this->cond_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_triggered_info;
        break;
      }
      
      // optional .lbs.da.openservice.UserTriggeredInfo triggered_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggered_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triggered_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPushDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  // optional string passport_id = 3;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passport_id(), output);
  }
  
  // optional string cond_tag = 4;
  if (has_cond_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_tag().data(), this->cond_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cond_tag(), output);
  }
  
  // optional .lbs.da.openservice.UserTriggeredInfo triggered_info = 5;
  if (has_triggered_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->triggered_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPushDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  // optional string passport_id = 3;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passport_id(), target);
  }
  
  // optional string cond_tag = 4;
  if (has_cond_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_tag().data(), this->cond_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cond_tag(), target);
  }
  
  // optional .lbs.da.openservice.UserTriggeredInfo triggered_info = 5;
  if (has_triggered_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->triggered_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPushDetailRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional string passport_id = 3;
    if (has_passport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport_id());
    }
    
    // optional string cond_tag = 4;
    if (has_cond_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cond_tag());
    }
    
    // optional .lbs.da.openservice.UserTriggeredInfo triggered_info = 5;
    if (has_triggered_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triggered_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPushDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPushDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPushDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPushDetailRequest::MergeFrom(const GetPushDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_passport_id()) {
      set_passport_id(from.passport_id());
    }
    if (from.has_cond_tag()) {
      set_cond_tag(from.cond_tag());
    }
    if (from.has_triggered_info()) {
      mutable_triggered_info()->::lbs::da::openservice::UserTriggeredInfo::MergeFrom(from.triggered_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPushDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPushDetailRequest::CopyFrom(const GetPushDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPushDetailRequest::IsInitialized() const {
  
  if (has_triggered_info()) {
    if (!this->triggered_info().IsInitialized()) return false;
  }
  return true;
}

void GetPushDetailRequest::Swap(GetPushDetailRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cuid_, other->cuid_);
    std::swap(passport_id_, other->passport_id_);
    std::swap(cond_tag_, other->cond_tag_);
    std::swap(triggered_info_, other->triggered_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPushDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPushDetailRequest_descriptor_;
  metadata.reflection = GetPushDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisKeyVal::kSourceFieldNumber;
const int RedisKeyVal::kKeyFieldNumber;
const int RedisKeyVal::kValFieldNumber;
const int RedisKeyVal::kExpireSecondsFieldNumber;
#endif  // !_MSC_VER

RedisKeyVal::RedisKeyVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedisKeyVal::InitAsDefaultInstance() {
}

RedisKeyVal::RedisKeyVal(const RedisKeyVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedisKeyVal::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expire_seconds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisKeyVal::~RedisKeyVal() {
  SharedDtor();
}

void RedisKeyVal::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void RedisKeyVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisKeyVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisKeyVal_descriptor_;
}

const RedisKeyVal& RedisKeyVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

RedisKeyVal* RedisKeyVal::default_instance_ = NULL;

RedisKeyVal* RedisKeyVal::New() const {
  return new RedisKeyVal;
}

void RedisKeyVal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    expire_seconds_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisKeyVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // optional string val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_seconds;
        break;
      }
      
      // optional int64 expire_seconds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_seconds_)));
          set_has_expire_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedisKeyVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional string val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->val(), output);
  }
  
  // optional int64 expire_seconds = 4;
  if (has_expire_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expire_seconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedisKeyVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional string val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->val(), target);
  }
  
  // optional int64 expire_seconds = 4;
  if (has_expire_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expire_seconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedisKeyVal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
    // optional int64 expire_seconds = 4;
    if (has_expire_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_seconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisKeyVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisKeyVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisKeyVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisKeyVal::MergeFrom(const RedisKeyVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_expire_seconds()) {
      set_expire_seconds(from.expire_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisKeyVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisKeyVal::CopyFrom(const RedisKeyVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisKeyVal::IsInitialized() const {
  
  return true;
}

void RedisKeyVal::Swap(RedisKeyVal* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(expire_seconds_, other->expire_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisKeyVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisKeyVal_descriptor_;
  metadata.reflection = RedisKeyVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCenterPushInfo::kTuanidFieldNumber;
const int MsgCenterPushInfo::kSituationidFieldNumber;
const int MsgCenterPushInfo::kStartdayFieldNumber;
const int MsgCenterPushInfo::kDaysizeFieldNumber;
const int MsgCenterPushInfo::kDealsizeFieldNumber;
const int MsgCenterPushInfo::kStrsitelistFieldNumber;
const int MsgCenterPushInfo::kEventidFieldNumber;
#endif  // !_MSC_VER

MsgCenterPushInfo::MsgCenterPushInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCenterPushInfo::InitAsDefaultInstance() {
}

MsgCenterPushInfo::MsgCenterPushInfo(const MsgCenterPushInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCenterPushInfo::SharedCtor() {
  _cached_size_ = 0;
  tuanid_ = 0;
  situationid_ = 0;
  startday_ = 0;
  daysize_ = 0;
  dealsize_ = 0;
  strsitelist_ = 0;
  eventid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCenterPushInfo::~MsgCenterPushInfo() {
  SharedDtor();
}

void MsgCenterPushInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCenterPushInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCenterPushInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCenterPushInfo_descriptor_;
}

const MsgCenterPushInfo& MsgCenterPushInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

MsgCenterPushInfo* MsgCenterPushInfo::default_instance_ = NULL;

MsgCenterPushInfo* MsgCenterPushInfo::New() const {
  return new MsgCenterPushInfo;
}

void MsgCenterPushInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tuanid_ = 0;
    situationid_ = 0;
    startday_ = 0;
    daysize_ = 0;
    dealsize_ = 0;
    strsitelist_ = 0;
    eventid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCenterPushInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tuanid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuanid_)));
          set_has_tuanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_situationid;
        break;
      }
      
      // optional int32 situationid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situationid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &situationid_)));
          set_has_situationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startday;
        break;
      }
      
      // optional int32 startday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_daysize;
        break;
      }
      
      // optional int32 daysize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daysize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daysize_)));
          set_has_daysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dealsize;
        break;
      }
      
      // optional int32 dealsize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealsize_)));
          set_has_dealsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strsitelist;
        break;
      }
      
      // optional int32 strsitelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strsitelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strsitelist_)));
          set_has_strsitelist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eventid;
        break;
      }
      
      // optional int32 eventid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCenterPushInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tuanid = 1;
  if (has_tuanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tuanid(), output);
  }
  
  // optional int32 situationid = 2;
  if (has_situationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->situationid(), output);
  }
  
  // optional int32 startday = 3;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startday(), output);
  }
  
  // optional int32 daysize = 4;
  if (has_daysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->daysize(), output);
  }
  
  // optional int32 dealsize = 5;
  if (has_dealsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealsize(), output);
  }
  
  // optional int32 strsitelist = 6;
  if (has_strsitelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strsitelist(), output);
  }
  
  // optional int32 eventid = 7;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->eventid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCenterPushInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tuanid = 1;
  if (has_tuanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tuanid(), target);
  }
  
  // optional int32 situationid = 2;
  if (has_situationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->situationid(), target);
  }
  
  // optional int32 startday = 3;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startday(), target);
  }
  
  // optional int32 daysize = 4;
  if (has_daysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->daysize(), target);
  }
  
  // optional int32 dealsize = 5;
  if (has_dealsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealsize(), target);
  }
  
  // optional int32 strsitelist = 6;
  if (has_strsitelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strsitelist(), target);
  }
  
  // optional int32 eventid = 7;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->eventid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCenterPushInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tuanid = 1;
    if (has_tuanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuanid());
    }
    
    // optional int32 situationid = 2;
    if (has_situationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->situationid());
    }
    
    // optional int32 startday = 3;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startday());
    }
    
    // optional int32 daysize = 4;
    if (has_daysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daysize());
    }
    
    // optional int32 dealsize = 5;
    if (has_dealsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealsize());
    }
    
    // optional int32 strsitelist = 6;
    if (has_strsitelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strsitelist());
    }
    
    // optional int32 eventid = 7;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCenterPushInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCenterPushInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCenterPushInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCenterPushInfo::MergeFrom(const MsgCenterPushInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tuanid()) {
      set_tuanid(from.tuanid());
    }
    if (from.has_situationid()) {
      set_situationid(from.situationid());
    }
    if (from.has_startday()) {
      set_startday(from.startday());
    }
    if (from.has_daysize()) {
      set_daysize(from.daysize());
    }
    if (from.has_dealsize()) {
      set_dealsize(from.dealsize());
    }
    if (from.has_strsitelist()) {
      set_strsitelist(from.strsitelist());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCenterPushInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCenterPushInfo::CopyFrom(const MsgCenterPushInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCenterPushInfo::IsInitialized() const {
  
  return true;
}

void MsgCenterPushInfo::Swap(MsgCenterPushInfo* other) {
  if (other != this) {
    std::swap(tuanid_, other->tuanid_);
    std::swap(situationid_, other->situationid_);
    std::swap(startday_, other->startday_);
    std::swap(daysize_, other->daysize_);
    std::swap(dealsize_, other->dealsize_);
    std::swap(strsitelist_, other->strsitelist_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCenterPushInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCenterPushInfo_descriptor_;
  metadata.reflection = MsgCenterPushInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCenterPushDetail::_default_src_("srh");
#ifndef _MSC_VER
const int MsgCenterPushDetail::kPidFieldNumber;
const int MsgCenterPushDetail::kUtypeFieldNumber;
const int MsgCenterPushDetail::kUidFieldNumber;
const int MsgCenterPushDetail::kTitleFieldNumber;
const int MsgCenterPushDetail::kContentFieldNumber;
const int MsgCenterPushDetail::kTypeFieldNumber;
const int MsgCenterPushDetail::kProdFieldNumber;
const int MsgCenterPushDetail::kOperatorFieldNumber;
const int MsgCenterPushDetail::kSrcFieldNumber;
const int MsgCenterPushDetail::kAtFieldNumber;
const int MsgCenterPushDetail::kSeqFieldNumber;
const int MsgCenterPushDetail::kEtFieldNumber;
const int MsgCenterPushDetail::kExpFieldNumber;
const int MsgCenterPushDetail::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgCenterPushDetail::MsgCenterPushDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCenterPushDetail::InitAsDefaultInstance() {
  info_ = const_cast< ::lbs::da::openservice::MsgCenterPushInfo*>(&::lbs::da::openservice::MsgCenterPushInfo::default_instance());
}

MsgCenterPushDetail::MsgCenterPushDetail(const MsgCenterPushDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCenterPushDetail::SharedCtor() {
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  utype_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  prod_ = 1;
  operator__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&_default_src_);
  at_ = 0;
  seq_ = -1;
  et_ = 0;
  exp_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCenterPushDetail::~MsgCenterPushDetail() {
  SharedDtor();
}

void MsgCenterPushDetail::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (operator__ != &::google::protobuf::internal::kEmptyString) {
    delete operator__;
  }
  if (src_ != &_default_src_) {
    delete src_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgCenterPushDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCenterPushDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCenterPushDetail_descriptor_;
}

const MsgCenterPushDetail& MsgCenterPushDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

MsgCenterPushDetail* MsgCenterPushDetail::default_instance_ = NULL;

MsgCenterPushDetail* MsgCenterPushDetail::New() const {
  return new MsgCenterPushDetail;
}

void MsgCenterPushDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    utype_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 0;
    prod_ = 1;
    if (has_operator_()) {
      if (operator__ != &::google::protobuf::internal::kEmptyString) {
        operator__->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_src()) {
      if (src_ != &_default_src_) {
        src_->assign(_default_src_);
      }
    }
    at_ = 0;
    seq_ = -1;
    et_ = 0;
    exp_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::lbs::da::openservice::MsgCenterPushInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCenterPushDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_utype;
        break;
      }
      
      // optional int32 utype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utype_)));
          set_has_utype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }
      
      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prod;
        break;
      }
      
      // optional int32 prod = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prod_)));
          set_has_prod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_operator;
        break;
      }
      
      // optional string operator = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_().data(), this->operator_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_src;
        break;
      }
      
      // optional string src = 9 [default = "srh"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_at;
        break;
      }
      
      // optional int32 at = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &at_)));
          set_has_at();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_seq;
        break;
      }
      
      // optional int32 seq = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_et;
        break;
      }
      
      // optional int32 et = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_et:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &et_)));
          set_has_et();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_info;
        break;
      }
      
      // optional .lbs.da.openservice.MsgCenterPushInfo info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCenterPushDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pid(), output);
  }
  
  // optional int32 utype = 2;
  if (has_utype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->utype(), output);
  }
  
  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  // optional int32 prod = 7 [default = 1];
  if (has_prod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prod(), output);
  }
  
  // optional string operator = 8;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->operator_(), output);
  }
  
  // optional string src = 9 [default = "srh"];
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->src(), output);
  }
  
  // optional int32 at = 10 [default = 0];
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->at(), output);
  }
  
  // optional int32 seq = 11 [default = -1];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->seq(), output);
  }
  
  // optional int32 et = 12 [default = 0];
  if (has_et()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->et(), output);
  }
  
  // optional int32 exp = 13;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exp(), output);
  }
  
  // optional .lbs.da.openservice.MsgCenterPushInfo info = 14;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCenterPushDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }
  
  // optional int32 utype = 2;
  if (has_utype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->utype(), target);
  }
  
  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  // optional int32 prod = 7 [default = 1];
  if (has_prod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prod(), target);
  }
  
  // optional string operator = 8;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->operator_(), target);
  }
  
  // optional string src = 9 [default = "srh"];
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->src(), target);
  }
  
  // optional int32 at = 10 [default = 0];
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->at(), target);
  }
  
  // optional int32 seq = 11 [default = -1];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->seq(), target);
  }
  
  // optional int32 et = 12 [default = 0];
  if (has_et()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->et(), target);
  }
  
  // optional int32 exp = 13;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->exp(), target);
  }
  
  // optional .lbs.da.openservice.MsgCenterPushInfo info = 14;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCenterPushDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }
    
    // optional int32 utype = 2;
    if (has_utype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utype());
    }
    
    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 prod = 7 [default = 1];
    if (has_prod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prod());
    }
    
    // optional string operator = 8;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string src = 9 [default = "srh"];
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }
    
    // optional int32 at = 10 [default = 0];
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->at());
    }
    
    // optional int32 seq = 11 [default = -1];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }
    
    // optional int32 et = 12 [default = 0];
    if (has_et()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->et());
    }
    
    // optional int32 exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional .lbs.da.openservice.MsgCenterPushInfo info = 14;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCenterPushDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCenterPushDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCenterPushDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCenterPushDetail::MergeFrom(const MsgCenterPushDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_utype()) {
      set_utype(from.utype());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prod()) {
      set_prod(from.prod());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_et()) {
      set_et(from.et());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_info()) {
      mutable_info()->::lbs::da::openservice::MsgCenterPushInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCenterPushDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCenterPushDetail::CopyFrom(const MsgCenterPushDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCenterPushDetail::IsInitialized() const {
  
  return true;
}

void MsgCenterPushDetail::Swap(MsgCenterPushDetail* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(utype_, other->utype_);
    std::swap(uid_, other->uid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(prod_, other->prod_);
    std::swap(operator__, other->operator__);
    std::swap(src_, other->src_);
    std::swap(at_, other->at_);
    std::swap(seq_, other->seq_);
    std::swap(et_, other->et_);
    std::swap(exp_, other->exp_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCenterPushDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCenterPushDetail_descriptor_;
  metadata.reflection = MsgCenterPushDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPushDetailResponse::kTriggerCondIdFieldNumber;
const int GetPushDetailResponse::kCuidFieldNumber;
const int GetPushDetailResponse::kPassportIdFieldNumber;
const int GetPushDetailResponse::kRedisDataFieldNumber;
const int GetPushDetailResponse::kPushDetailFieldNumber;
const int GetPushDetailResponse::kSampleIdsFieldNumber;
const int GetPushDetailResponse::kActionTypeFieldNumber;
#endif  // !_MSC_VER

GetPushDetailResponse::GetPushDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPushDetailResponse::InitAsDefaultInstance() {
  push_detail_ = const_cast< ::lbs::da::openservice::MsgCenterPushDetail*>(&::lbs::da::openservice::MsgCenterPushDetail::default_instance());
}

GetPushDetailResponse::GetPushDetailResponse(const GetPushDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPushDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  trigger_cond_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passport_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  push_detail_ = NULL;
  sample_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPushDetailResponse::~GetPushDetailResponse() {
  SharedDtor();
}

void GetPushDetailResponse::SharedDtor() {
  if (trigger_cond_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_cond_id_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
    delete passport_id_;
  }
  if (sample_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete sample_ids_;
  }
  if (this != default_instance_) {
    delete push_detail_;
  }
}

void GetPushDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPushDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPushDetailResponse_descriptor_;
}

const GetPushDetailResponse& GetPushDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_realtime_5fpush_2eproto();  return *default_instance_;
}

GetPushDetailResponse* GetPushDetailResponse::default_instance_ = NULL;

GetPushDetailResponse* GetPushDetailResponse::New() const {
  return new GetPushDetailResponse;
}

void GetPushDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trigger_cond_id()) {
      if (trigger_cond_id_ != &::google::protobuf::internal::kEmptyString) {
        trigger_cond_id_->clear();
      }
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_passport_id()) {
      if (passport_id_ != &::google::protobuf::internal::kEmptyString) {
        passport_id_->clear();
      }
    }
    if (has_push_detail()) {
      if (push_detail_ != NULL) push_detail_->::lbs::da::openservice::MsgCenterPushDetail::Clear();
    }
    if (has_sample_ids()) {
      if (sample_ids_ != &::google::protobuf::internal::kEmptyString) {
        sample_ids_->clear();
      }
    }
    action_type_ = 1;
  }
  redis_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPushDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trigger_cond_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_cond_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_cond_id().data(), this->trigger_cond_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passport_id;
        break;
      }
      
      // optional string passport_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passport_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passport_id().data(), this->passport_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redis_data;
        break;
      }
      
      // repeated .lbs.da.openservice.RedisKeyVal redis_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redis_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redis_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redis_data;
        if (input->ExpectTag(50)) goto parse_push_detail;
        break;
      }
      
      // optional .lbs.da.openservice.MsgCenterPushDetail push_detail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sample_ids;
        break;
      }
      
      // optional string sample_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sample_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sample_ids().data(), this->sample_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_action_type;
        break;
      }
      
      // optional .lbs.da.openservice.PushActionType action_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::PushActionType_IsValid(value)) {
            set_action_type(static_cast< lbs::da::openservice::PushActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPushDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trigger_cond_id = 1;
  if (has_trigger_cond_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_cond_id().data(), this->trigger_cond_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trigger_cond_id(), output);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  // optional string passport_id = 3;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passport_id(), output);
  }
  
  // repeated .lbs.da.openservice.RedisKeyVal redis_data = 5;
  for (int i = 0; i < this->redis_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redis_data(i), output);
  }
  
  // optional .lbs.da.openservice.MsgCenterPushDetail push_detail = 6;
  if (has_push_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->push_detail(), output);
  }
  
  // optional string sample_ids = 7;
  if (has_sample_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sample_ids().data(), this->sample_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sample_ids(), output);
  }
  
  // optional .lbs.da.openservice.PushActionType action_type = 8;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->action_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPushDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trigger_cond_id = 1;
  if (has_trigger_cond_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_cond_id().data(), this->trigger_cond_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trigger_cond_id(), target);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  // optional string passport_id = 3;
  if (has_passport_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport_id().data(), this->passport_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passport_id(), target);
  }
  
  // repeated .lbs.da.openservice.RedisKeyVal redis_data = 5;
  for (int i = 0; i < this->redis_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redis_data(i), target);
  }
  
  // optional .lbs.da.openservice.MsgCenterPushDetail push_detail = 6;
  if (has_push_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->push_detail(), target);
  }
  
  // optional string sample_ids = 7;
  if (has_sample_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sample_ids().data(), this->sample_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sample_ids(), target);
  }
  
  // optional .lbs.da.openservice.PushActionType action_type = 8;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->action_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPushDetailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trigger_cond_id = 1;
    if (has_trigger_cond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_cond_id());
    }
    
    // optional string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional string passport_id = 3;
    if (has_passport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport_id());
    }
    
    // optional .lbs.da.openservice.MsgCenterPushDetail push_detail = 6;
    if (has_push_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push_detail());
    }
    
    // optional string sample_ids = 7;
    if (has_sample_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sample_ids());
    }
    
    // optional .lbs.da.openservice.PushActionType action_type = 8;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }
    
  }
  // repeated .lbs.da.openservice.RedisKeyVal redis_data = 5;
  total_size += 1 * this->redis_data_size();
  for (int i = 0; i < this->redis_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redis_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPushDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPushDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPushDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPushDetailResponse::MergeFrom(const GetPushDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  redis_data_.MergeFrom(from.redis_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trigger_cond_id()) {
      set_trigger_cond_id(from.trigger_cond_id());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_passport_id()) {
      set_passport_id(from.passport_id());
    }
    if (from.has_push_detail()) {
      mutable_push_detail()->::lbs::da::openservice::MsgCenterPushDetail::MergeFrom(from.push_detail());
    }
    if (from.has_sample_ids()) {
      set_sample_ids(from.sample_ids());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPushDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPushDetailResponse::CopyFrom(const GetPushDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPushDetailResponse::IsInitialized() const {
  
  return true;
}

void GetPushDetailResponse::Swap(GetPushDetailResponse* other) {
  if (other != this) {
    std::swap(trigger_cond_id_, other->trigger_cond_id_);
    std::swap(cuid_, other->cuid_);
    std::swap(passport_id_, other->passport_id_);
    redis_data_.Swap(&other->redis_data_);
    std::swap(push_detail_, other->push_detail_);
    std::swap(sample_ids_, other->sample_ids_);
    std::swap(action_type_, other->action_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPushDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPushDetailResponse_descriptor_;
  metadata.reflection = GetPushDetailResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
